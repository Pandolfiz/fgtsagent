/**
 * Utilit√°rio para detectar erros de autentica√ß√£o e tokens
 * Mapeia TODAS as poss√≠veis mensagens de erro relacionadas √† autentica√ß√£o
 */

/**
 * Verifica se um erro √© relacionado √† autentica√ß√£o/token
 * @param {Error|Object} error - O erro a ser verificado
 * @returns {boolean} - true se for erro de autentica√ß√£o
 */
export const isAuthError = (error) => {
  if (!error) return false;
  
  // Obter mensagem do erro (suporta diferentes formatos)
  let message = '';
  if (typeof error === 'string') {
    message = error;
  } else if (error.message) {
    message = error.message;
  } else if (error.error) {
    message = error.error;
  } else if (error.response?.data?.message) {
    message = error.response.data.message;
  } else if (error.response?.data?.error) {
    message = error.response.data.error;
  } else {
    return false;
  }
  
  // Converter para min√∫sculas para compara√ß√£o
  const lowerMessage = message.toLowerCase();
  
  // ‚úÖ TODOS OS PADR√ïES DE ERRO DE AUTENTICA√á√ÉO
  const authErrorPatterns = [
    // === PADR√ïES J√Å IMPLEMENTADOS ===
    'token de acesso n√£o encontrado',
    '401',
    'unauthorized',
    
    // === ERROS DO BACKEND (src/) ===
    // Middleware de Autentica√ß√£o
    'api key inv√°lida',
    'token de autentica√ß√£o necess√°rio',
    'token inv√°lido ou expirado',
    'autentica√ß√£o necess√°ria',
    'acesso restrito a administradores',
    'usu√°rio n√£o pertence a nenhuma organiza√ß√£o',
    
    // Controladores de Autentica√ß√£o
    '√© necess√°rio confirmar seu email antes de fazer login',
    'email ou senha inv√°lidos',
    'n√£o autenticado',
    'nenhum token fornecido',
    'erro ao renovar token',
    'n√£o foi poss√≠vel renovar a sess√£o',
    'token n√£o encontrado',
    'sess√£o expirada',
    'usu√°rio encontrado mas plano n√£o est√° ativo',
    'email n√£o confirmado',
    'acesso negado',
    'somente administradores podem criar sess√µes',
    
    // Outros Controladores
    'token de acesso inv√°lido ou expirado',
    'usu√°rio n√£o autenticado',
    'sua sess√£o expirou',
    'logout e login novamente',
    'senha atual est√° incorreta',
    'acesso negado a esta conversa',
    'acesso negado a esta organiza√ß√£o',
    'token n√£o fornecido',
    
    // === ERROS DO FRONTEND ===
    // Erros de Sess√£o
    'sua sess√£o expirou',
    'dados de autentica√ß√£o inv√°lidos',
    'token realmente inv√°lido',
    'token expirado ou inv√°lido',
    'sess√£o expirada',
    
    // === ERROS DO SUPABASE ===
    'jwt',
    'authapierror',
    'invalid login credentials',
    'email not confirmed',
    'session_invalid',
    'token inv√°lido',
    'invalid token',
    'expired token',
    'malformed token',
    
    // === ERROS DE REFRESH TOKEN ===
    'refresh_token',
    'refreshtoken',
    'refresh token n√£o encontrado',
    'falha no refresh autom√°tico',
    'token pr√≥ximo do vencimento',
    'refresh session',
    'session refresh',
    
    // === ERROS DE REDE E CONECTIVIDADE ===
    'err_network',
    'network error',
    'typeerror',
    'networkerror',
    'fetch failed',
    'connection failed',
    'api n√£o dispon√≠vel',
    'sem resposta do servidor',
    'verificar conectividade',
    
    // === C√ìDIGOS DE STATUS ===
    '403',
    'forbidden',
    'access denied',
    
    // === PADR√ïES GEN√âRICOS ===
    'invalid',
    'expired',
    'expirou',
    'expirado',
    'token',
    'auth',
    'authentication',
    'authorization',
    'session',
    'login',
    'credential',
    'credencial'
  ];
  
  // Verificar se a mensagem cont√©m algum padr√£o de erro de autentica√ß√£o
  return authErrorPatterns.some(pattern => lowerMessage.includes(pattern));
};

/**
 * Obt√©m uma mensagem de erro amig√°vel para o usu√°rio
 * @param {Error|Object} error - O erro original
 * @returns {string} - Mensagem amig√°vel
 */
export const getAuthErrorMessage = (error) => {
  if (!error) return 'Erro de autentica√ß√£o desconhecido';
  
  let message = '';
  if (typeof error === 'string') {
    message = error;
  } else if (error.message) {
    message = error.message;
  } else if (error.response?.data?.message) {
    message = error.response.data.message;
  }
  
  const lowerMessage = message.toLowerCase();
  
  // Mapear mensagens espec√≠ficas para mensagens amig√°veis
  if (lowerMessage.includes('email not confirmed') || lowerMessage.includes('email n√£o confirmado')) {
    return 'Email n√£o confirmado. Verifique sua caixa de entrada.';
  }
  
  if (lowerMessage.includes('invalid login credentials') || lowerMessage.includes('email ou senha inv√°lidos')) {
    return 'Email ou senha inv√°lidos. Verifique e tente novamente.';
  }
  
  if (lowerMessage.includes('refresh') || lowerMessage.includes('renovar')) {
    return 'Sua sess√£o expirou. Fa√ßa login novamente.';
  }
  
  if (lowerMessage.includes('network') || lowerMessage.includes('conectividade')) {
    return 'Problema de conex√£o. Verifique sua internet e tente novamente.';
  }
  
  if (lowerMessage.includes('access denied') || lowerMessage.includes('acesso negado')) {
    return 'Acesso negado. Voc√™ n√£o tem permiss√£o para esta a√ß√£o.';
  }
  
  // Mensagem padr√£o
  return 'Sua sess√£o expirou. Fa√ßa login novamente.';
};

/**
 * Redireciona para a p√°gina de login com mensagem de erro
 * @param {Error|Object} error - O erro original
 * @param {string} customMessage - Mensagem personalizada (opcional)
 */
export const redirectToLogin = (error, customMessage = null) => {
  const message = customMessage || getAuthErrorMessage(error);
  const encodedMessage = encodeURIComponent(message);
  
  console.log('üîÑ Redirecionando para login devido a erro de autentica√ß√£o:', {
    originalError: error,
    friendlyMessage: message
  });
  
  window.location.href = `/login?error=session_expired&message=${encodedMessage}`;
};

/**
 * Fun√ß√£o utilit√°ria para tratar erros em catch blocks
 * @param {Error|Object} error - O erro capturado
 * @param {Function} setError - Fun√ß√£o para definir erro local (opcional)
 * @param {string} customMessage - Mensagem personalizada (opcional)
 */
export const handleAuthError = (error, setError = null, customMessage = null) => {
  console.error('‚ùå Erro capturado:', error);
  
  if (isAuthError(error)) {
    redirectToLogin(error, customMessage);
    return true; // Indica que foi um erro de autentica√ß√£o
  }
  
  // Se n√£o for erro de autentica√ß√£o e setError foi fornecido, definir erro local
  if (setError) {
    const message = customMessage || (error.message || 'Erro inesperado');
    setError(message);
  }
  
  return false; // Indica que n√£o foi um erro de autentica√ß√£o
};
