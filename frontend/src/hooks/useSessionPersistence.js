import { useState, useEffect, useCallback } from 'react';
import supabase from '../lib/supabaseClient';

/**
 * Hook simplificado para gerenciar persist√™ncia de sess√£o
 * Foca apenas na funcionalidade essencial
 */
export const useSessionPersistence = () => {
  const [session, setSession] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // ‚úÖ FUN√á√ÉO: Obter token atual (memoizada)
  const getToken = useCallback(() => {
    return session?.access_token || localStorage.getItem('authToken');
  }, [session]);

  // ‚úÖ FUN√á√ÉO: Verificar se est√° autenticado (memoizada)
  const isAuthenticated = useCallback(() => {
    return !!session && !!getToken();
  }, [session, getToken]);

  useEffect(() => {
    let mounted = true;
    let timeoutId = null;

    const initializeSession = async () => {
      try {
        if (!mounted) return;
        
        setLoading(true);
        setError(null);

        // ‚úÖ PASSO 1: Verificar se j√° existe uma sess√£o ativa no Supabase
        console.log('üîÑ Hook: Verificando sess√£o ativa no Supabase...');
        const { data: activeSession, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError) {
          console.warn('‚ö†Ô∏è Hook: Erro ao obter sess√£o ativa:', sessionError.message);
          if (mounted) setError(sessionError.message);
          return;
        }

        if (activeSession?.session) {
          console.log('‚úÖ Hook: Sess√£o ativa encontrada no Supabase');
          if (mounted) {
            // ‚úÖ EVITAR: Atualiza√ß√µes desnecess√°rias se a sess√£o √© a mesma
            setSession(prevSession => {
              if (prevSession?.access_token === activeSession.session.access_token) {
                // Removido log excessivo
                return prevSession; // N√£o atualizar se √© o mesmo token
              }
              // Removido log excessivo
              return activeSession.session;
            });
          }
          
          // ‚úÖ SINCRONIZAR: Token com localStorage
          const token = activeSession.session.access_token;
          localStorage.setItem('authToken', token);
          
          if (mounted) setLoading(false);
          return;
        }

        // ‚úÖ PASSO 2: Se n√£o h√° sess√£o ativa, verificar localStorage
        console.log('üîÑ Hook: Verificando localStorage para tokens salvos...');
        const storedAuthToken = localStorage.getItem('authToken');
        
        if (storedAuthToken) {
          console.log('‚úÖ Hook: Token encontrado no localStorage, validando...');
          
          // ‚úÖ VALIDAR: Token com Supabase
          const { data: validationData, error: validationError } = await supabase.auth.getUser(storedAuthToken);
          
          if (validationError) {
            console.warn('‚ö†Ô∏è Hook: Token inv√°lido, removendo...');
            localStorage.removeItem('authToken');
            if (mounted) setSession(null);
          } else if (validationData?.user) {
            console.log('‚úÖ Hook: Token v√°lido, recuperando sess√£o...');
            
            // ‚úÖ RECUPERAR: Sess√£o completa
            const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
            
            if (!sessionError && sessionData?.session) {
              if (mounted) setSession(sessionData.session);
            }
          }
        }

        if (mounted) setLoading(false);
        
      } catch (err) {
        console.error('‚ùå Hook: Erro na inicializa√ß√£o da sess√£o:', err);
        if (mounted) setError(err.message);
        if (mounted) setLoading(false);
      }
    };

    // ‚úÖ PASSO 3: Configurar listener para mudan√ßas de autentica√ß√£o
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (!mounted) return;
        
        console.log(`üîÑ Hook: Evento de autentica√ß√£o: ${event}`, session ? 'com sess√£o' : 'sem sess√£o');
        
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
          // ‚úÖ EVITAR: Atualiza√ß√µes desnecess√°rias se a sess√£o √© a mesma
          setSession(prevSession => {
            if (prevSession?.access_token === session?.access_token) {
              console.log('üîÑ Hook: Evento de autentica√ß√£o - mesmo token, evitando atualiza√ß√£o');
              return prevSession; // N√£o atualizar se √© o mesmo token
            }
            console.log('üîÑ Hook: Evento de autentica√ß√£o - token diferente, atualizando sess√£o');
            return session;
          });
          setError(null);
          
          if (session?.access_token) {
            // ‚úÖ SINCRONIZAR: Token com localStorage
            localStorage.setItem('authToken', session.access_token);
          }
        } else if (event === 'SIGNED_OUT') {
          console.log('üîÑ Hook: Usu√°rio fez logout, limpando sess√£o...');
          setSession(null);
          setError(null);
          
          // ‚úÖ LIMPEZA COMPLETA: Quando explicitamente solicitado
          localStorage.removeItem('authToken');
          localStorage.removeItem('supabase.auth.token');
          
          // ‚úÖ FOR√áAR: Limpeza de todos os dados relacionados
          const keysToRemove = [];
          for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && (key.includes('auth') || key.includes('supabase') || key.includes('user'))) {
              keysToRemove.push(key);
            }
          }
          
          keysToRemove.forEach(key => {
            localStorage.removeItem(key);
            console.log(`üóëÔ∏è Hook: Removido ${key} do localStorage`);
          });
          
          console.log('‚úÖ Hook: Sess√£o completamente limpa');
        }
      }
    );

    // ‚úÖ TIMEOUT DE SEGURAN√áA: Aumentado para evitar limpeza prematura
    timeoutId = setTimeout(() => {
      if (mounted && loading) {
        console.warn('‚ö†Ô∏è Hook: Timeout de seguran√ßa - for√ßando finaliza√ß√£o');
        setLoading(false);
      }
    }, 30000); // 30 segundos

    initializeSession();

    return () => {
      mounted = false;
      if (timeoutId) clearTimeout(timeoutId);
      subscription?.unsubscribe();
    };
  }, []);

  // ‚úÖ FUN√á√ÉO: For√ßar refresh da sess√£o
  const refreshSession = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase.auth.refreshSession();
      
      if (error) {
        setError(error.message);
        return false;
      }
      
      if (data?.session) {
        setSession(data.session);
        setError(null);
        return true;
      }
      
      return false;
    } catch (err) {
      setError(err.message);
      return false;
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ FUN√á√ÉO: For√ßar limpeza completa da sess√£o
  const forceClearSession = useCallback(() => {
    console.log('üîÑ Hook: For√ßando limpeza completa da sess√£o...');
    
    // Limpar estado local
    setSession(null);
    setError(null);
    
    // Limpar localStorage
    localStorage.removeItem('authToken');
    localStorage.removeItem('supabase.auth.token');
    
    // Limpar todos os dados relacionados
    const keysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && (key.includes('auth') || key.includes('supabase') || key.includes('user'))) {
        keysToRemove.push(key);
      }
    }
    
    keysToRemove.forEach(key => {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è Hook: Removido ${key} do localStorage`);
    });
    
    console.log('‚úÖ Hook: Sess√£o for√ßadamente limpa');
  }, []);

  return {
    session,
    loading,
    error,
    refreshSession,
    getToken,
    isAuthenticated,
    forceClearSession, // ‚úÖ NOVA FUN√á√ÉO
  };
};
