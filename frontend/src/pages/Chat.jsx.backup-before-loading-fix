import React, { useState, useEffect, useRef } from 'react'
import Navbar from '../components/Navbar'
import { FaSearch, FaEllipsisV, FaPaperclip, FaMicrophone, FaSmile, FaPhone, FaVideo, FaPlus, FaArrowLeft, FaSpinner, FaExclamationTriangle, FaWallet, FaCalculator, FaFileAlt, FaTimesCircle, FaCheckCircle, FaInfoCircle, FaIdCard, FaRegCopy, FaChevronDown, FaCheck } from 'react-icons/fa'
import { IoSend } from 'react-icons/io5'
import { useNavigate } from 'react-router-dom'
import { apiFetch } from '../utilities/apiFetch';
import { cachedFetch } from '../utils/authCache'

// ‚úÖ SEGURAN√áA: Fun√ß√µes de sanitiza√ß√£o e valida√ß√£o robustas
const SECURITY_CONFIG = {
  MAX_MESSAGE_LENGTH: 1000,
  MAX_SEARCH_LENGTH: 100,
  RATE_LIMIT_DELAY: 1000, // 1 segundo entre envios
  SESSION_CHECK_INTERVAL: 5 * 60 * 1000, // 5 minutos
  DANGEROUS_PATTERNS: /[<>\"'&]|javascript:|data:|vbscript:|on\w+\s*=|expression\s*\(|eval\s*\(/gi
};

// ‚úÖ SEGURAN√áA: Sanitiza√ß√£o robusta de conte√∫do
const sanitizeContent = (content) => {
  if (typeof content !== 'string') return '';
  
  // Remover caracteres de controle perigosos
  let sanitized = content.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
  
  // Remover padr√µes perigosos
  sanitized = sanitized.replace(SECURITY_CONFIG.DANGEROUS_PATTERNS, '');
  
  // Escapar HTML
  sanitized = sanitized
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;');
  
  return sanitized.trim();
};

// ‚úÖ SEGURAN√áA: Valida√ß√£o rigorosa de entrada
const validateUserInput = (input, type = 'message') => {
  if (typeof input !== 'string') {
    return { valid: false, error: 'Input deve ser uma string' };
  }
  
  const trimmed = input.trim();
  
  switch (type) {
    case 'message':
      if (!trimmed) {
        return { valid: false, error: 'Mensagem n√£o pode estar vazia' };
      }
      
      if (trimmed.length > SECURITY_CONFIG.MAX_MESSAGE_LENGTH) {
        return { valid: false, error: `Mensagem muito longa (m√°ximo ${SECURITY_CONFIG.MAX_MESSAGE_LENGTH} caracteres)` };
      }
      
      // Verificar padr√µes perigosos
      if (SECURITY_CONFIG.DANGEROUS_PATTERNS.test(trimmed)) {
        return { valid: false, error: 'Conte√∫do n√£o permitido' };
      }
      
      return { valid: true, value: sanitizeContent(trimmed) };
      
    case 'search':
      if (trimmed.length > SECURITY_CONFIG.MAX_SEARCH_LENGTH) {
        return { valid: false, error: 'Busca muito longa' };
      }
      
      return { valid: true, value: sanitizeContent(trimmed) };
      
    default:
      return { valid: true, value: sanitizeContent(trimmed) };
  }
};



// ‚úÖ SEGURAN√áA: Obter token CSRF
const getCSRFToken = () => {
  return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
};

// ‚úÖ SEGURAN√áA: Verificar sess√£o
const checkSession = async () => {
  try {
    const response = await fetch('/api/auth/check-session', {
      credentials: 'include',
      headers: {
        'X-CSRF-Token': getCSRFToken()
      }
    });
    
    if (!response.ok) {
      window.location.href = '/login?error=session_expired&message=Sua sess√£o expirou. Por favor, fa√ßa login novamente.';
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Erro ao verificar sess√£o:', error);
    return false;
  }
};

// Fun√ß√£o auxiliar para gerar IDs de mensagem √∫nicos
function generateMessageId() {
  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

// Fun√ß√£o de debounce para evitar m√∫ltiplos cliques
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Fun√ß√£o robusta para formata√ß√£o de valores monet√°rios
function formataMoeda(valor) {
  // Se o valor for null, undefined ou n√£o num√©rico, retornar null
  if (valor === null || valor === undefined) {

    return null;
  }
  
  try {
    // Garantir que estamos trabalhando com um n√∫mero
    let numero;
    
    // Verificar se j√° √© um n√∫mero
    if (typeof valor === 'number') {

      numero = valor;
    } else {
      // Tentar converter string para n√∫mero
      // Remover qualquer formata√ß√£o que possa existir
      const valorLimpo = String(valor).replace(/[^\d.,]/g, '')
        .replace(/\./g, '#')  // Substituir temporariamente pontos
        .replace(/,/g, '.')   // Substituir v√≠rgulas por pontos
        .replace(/#/g, '');   // Remover pontos tempor√°rios
      
      numero = parseFloat(valorLimpo);

    }
    
    // Verificar se a convers√£o resultou em um n√∫mero v√°lido
    if (isNaN(numero)) {

      return null;
    }
    
    // Formatar o n√∫mero como moeda brasileira
    const formatado = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
      minimumFractionDigits: 2
    }).format(numero);
    

    return formatado;
  } catch (error) {
    console.error(`Erro ao formatar valor monet√°rio: ${error.message}`);
    // Fallback simples
    try {
      return `R$ ${parseFloat(valor).toFixed(2).replace('.', ',')}`;
    } catch (e) {
      console.error(`Erro no fallback de formata√ß√£o: ${e.message}`);
      return null;
    }
  }
}

export default function Chat() {
  const [contacts, setContacts] = useState([])
  const [displayContacts, setDisplayContacts] = useState([]) // Estado para exibi√ß√£o ordenada
  const [messages, setMessages] = useState([])
  const [newMessage, setNewMessage] = useState('')
  const [currentContact, setCurrentContact] = useState(null)
  const [isLoading, setIsLoading] = useState(false) // Inicializar como false
  const [isUpdating, setIsUpdating] = useState(false)
  const [isSendingMessage, setIsSendingMessage] = useState(false) // Controle de envio
  const [lastMessageTimestamp, setLastMessageTimestamp] = useState(0) // Timestamp do √∫ltimo envio
  const [currentUser, setCurrentUser] = useState(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [isMobileView, setIsMobileView] = useState(window.innerWidth < 768)
  const [screenWidth, setScreenWidth] = useState(window.innerWidth)
  const [error, setError] = useState(null)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const [connectionStatus, setConnectionStatus] = useState(null)
  const [autoResponseContacts, setAutoResponseContacts] = useState({})

  const [isSyncing, setIsSyncing] = useState(false)
  const [lastSyncTime, setLastSyncTime] = useState(null)
  const messagesContainerRef = useRef(null);
  const lastMessageIdRef = useRef(null) // Refer√™ncia para o √∫ltimo ID de mensagem
  const timeoutsRef = useRef([])
  const intervalsRef = useRef([])
  const navigate = useNavigate()
  const [agentMode, setAgentMode] = useState('full');
  
  // Estados para gerenciar inst√¢ncias
  const [instances, setInstances] = useState([])
  
  // Log para monitorar mudan√ßas no estado instances
  useEffect(() => {
    console.log('[DEBUG] üìä Estado instances mudou:', instances.length, 'inst√¢ncias');
  }, [instances]);
  const [selectedInstanceId, setSelectedInstanceId] = useState('all') // 'all' para todas as inst√¢ncias
  const [isLoadingInstances, setIsLoadingInstances] = useState(false)
  const [dropdownOpen, setDropdownOpen] = useState(false)
  const dropdownRef = useRef(null)
  const currentIntervalRef = useRef(30000); // ‚úÖ Ref para polling adaptativo
  const lastMessageRef = useRef(null); // ‚úÖ Ref para √∫ltima mensagem (evitar loops)
  const scrollTimeoutRef = useRef(null); // ‚úÖ Ref para debounce do scroll
  const contactsContainerRef = useRef(null); // ‚úÖ Ref para container de contatos
  const contactsScrollTimeoutRef = useRef(null); // ‚úÖ Ref para debounce do scroll de contatos
  const [contactInstances, setContactInstances] = useState({}) // Mapa de contato -> inst√¢ncia
  
  // Estados para pagina√ß√£o e performance
  const [contactsPage, setContactsPage] = useState(1)
  const [hasMoreContacts, setHasMoreContacts] = useState(true)
  const [isLoadingMoreContacts, setIsLoadingMoreContacts] = useState(false)
  
  // Estados para pagina√ß√£o de mensagens (scroll infinito)
  const [messagesPage, setMessagesPage] = useState(1)
  const [hasMoreMessages, setHasMoreMessages] = useState(true)
  const [isLoadingMoreMessages, setIsLoadingMoreMessages] = useState(false)
  
  // Estados para UX melhorada
  const [isAtBottom, setIsAtBottom] = useState(true)
  const [unreadCount, setUnreadCount] = useState(0)
  const [isOnline, setIsOnline] = useState(navigator.onLine)
  const [retryQueue, setRetryQueue] = useState([]) // ‚úÖ Fila de opera√ß√µes para retry
  // Removido: isMessagesReady - n√£o √© mais necess√°rio
  const [isInitialLoad, setIsInitialLoad] = useState(false) // ‚úÖ Evita scrolls conflitantes
  const [allowInfiniteScroll, setAllowInfiniteScroll] = useState(false) // ‚úÖ Controla quando scroll infinito pode ser ativado
  
  const CONTACTS_PER_PAGE = 15
  const MESSAGES_PER_PAGE = 20
  
  // Estilos para dispositivos m√≥veis usando vari√°veis CSS personalizadas
  const mobileStyles = {
    mainContainer: {
      height: 'calc(100vh - 4rem)',
      maxHeight: 'calc(100vh - 4rem)',
      marginBottom: '0px',
      padding: '0rem',
      width: '100%'
    },
    messagesContainer: {
      height: 'auto',
      maxHeight: 'calc(100vh - 12rem)',
      padding: '0rem'
    },
    pageContainer: {
      padding: '0',
      margin: '0',
      height: '100vh',
      minHeight: '100vh',
      maxHeight: '100vh',
      display: 'flex',
      flexDirection: 'column',
      background: 'linear-gradient(to bottom right, rgb(4 47 46), rgb(12 74 110), rgb(23 37 84))',
      overflow: 'hidden',
      width: '100vw'
    },
    contentContainer: {
      padding: '0.5rem',
      paddingBottom: '0.5rem',
      margin: '0',
      flex: '1',
      display: 'flex',
      flexDirection: 'column',
      overflow: 'hidden',
      width: '100%'
    },
    messageInputContainer: {
      margin: '0',
      padding: '0rem',
      borderTop: '1px solid rgba(8, 145, 178, 0.2)'
    }
  };

  // Estado para controlar quando deve rolar a tela
  // Removido: vari√°veis de scroll complexo n√£o necess√°rias

  // Estados para os dados do contato
  const [contactData, setContactData] = useState({
    saldo: null,
    simulado: null,
    erroConsulta: null,
    proposta: null,
    erroProposta: null,
    statusProposta: null,
    descricaoStatus: null,
    valorProposta: null,
    linkFormalizacao: null,
    chavePix: null
  });

  // [ADICIONAR estados locais para feedback de c√≥pia]
  const [copiedPix, setCopiedPix] = useState(false);
  const [copiedId, setCopiedId] = useState(false);
  const [copiedLink, setCopiedLink] = useState(false);

  // Log inicial para diagn√≥stico
  useEffect(() => {
    
  }, []);

  // ‚úÖ SEGURAN√áA: Listener para detectar mudan√ßas na conectividade e verificar sess√£o
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      console.log('[NETWORK] ‚úÖ Conex√£o restaurada - processando fila de retry');
      // Processar fila de retry quando voltar online
      if (retryQueue.length > 0) {
        processRetryQueue();
      }
    };
    
    const handleOffline = () => {
      setIsOnline(false);
      console.log('[NETWORK] ‚ùå Conex√£o perdida - modo offline ativado');
    };
    
    // ‚úÖ SEGURAN√áA: Verifica√ß√£o peri√≥dica de sess√£o
    const sessionCheckInterval = setInterval(async () => {
      if (currentUser && !document.hidden) {
        const sessionValid = await checkSession();
        if (!sessionValid) {
          setError('Sess√£o expirada. Redirecionando...');
        }
      }
    }, SECURITY_CONFIG.SESSION_CHECK_INTERVAL);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      clearInterval(sessionCheckInterval);
    };
  }, [retryQueue, currentUser]);

  // ‚úÖ Fun√ß√£o para processar fila de retry
  const processRetryQueue = async () => {
    if (!isOnline || retryQueue.length === 0) return;
    
    console.log(`[RETRY] üîÑ Processando ${retryQueue.length} opera√ß√µes pendentes`);
    
    for (const operation of retryQueue) {
      try {
        await operation.execute();
        console.log(`[RETRY] ‚úÖ Opera√ß√£o executada: ${operation.type}`);
      } catch (error) {
        console.error(`[RETRY] ‚ùå Falha na opera√ß√£o ${operation.type}:`, error);
      }
    }
    
    setRetryQueue([]);
  };

  // Cleanup de timeouts e intervals quando o componente for desmontado
  useEffect(() => {
    return () => {
      // Limpar todos os timeouts
      timeoutsRef.current.forEach(timeoutId => clearTimeout(timeoutId));
      timeoutsRef.current = [];
      
      // Limpar todos os intervals
      intervalsRef.current.forEach(intervalId => clearInterval(intervalId));
      intervalsRef.current = [];
      
      // ‚úÖ Cleanup do scroll debounce
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
        scrollTimeoutRef.current = null;
      }
      
      // ‚úÖ Cleanup do scroll de contatos
      if (contactsScrollTimeoutRef.current) {
        clearTimeout(contactsScrollTimeoutRef.current);
        contactsScrollTimeoutRef.current = null;
      }
    };
  }, []);

  // Fechar dropdown quando clicar fora
  useEffect(() => {
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setDropdownOpen(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Fun√ß√µes utilit√°rias para gerenciar timeouts e intervals
  const createTimeout = (callback, delay) => {
    const timeoutId = setTimeout(callback, delay);
    timeoutsRef.current.push(timeoutId);
    return timeoutId;
  };

  const createInterval = (callback, delay) => {
    const intervalId = setInterval(callback, delay);
    intervalsRef.current.push(intervalId);
    return intervalId;
  };

  const clearTimeoutSafe = (timeoutId) => {
    clearTimeout(timeoutId);
    timeoutsRef.current = timeoutsRef.current.filter(id => id !== timeoutId);
  };

  const clearIntervalSafe = (intervalId) => {
    clearInterval(intervalId);
    intervalsRef.current = intervalsRef.current.filter(id => id !== intervalId);
  };

  // Detectar mudan√ßas de tamanho da tela
  useEffect(() => {
    const handleResize = () => {
      const width = window.innerWidth;
      const height = window.innerHeight;
      setScreenWidth(width);
      setIsMobileView(width < 768);
      
      // Ajustar o viewport height em dispositivos m√≥veis para lidar com barras de navega√ß√£o
      if (width < 768) {
        // Subtrair altura do navbar e espa√ßamentos
        const adjustedHeight = height - 20; // 20px de espa√ßamento
        document.documentElement.style.setProperty('--vh', `${adjustedHeight * 0.01}px`);
        
        // Detectar iOS
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        if (isIOS) {
          document.body.classList.add('ios-device');
        } else {
          document.body.classList.remove('ios-device');
        }
      }
    }

    // Executar imediatamente para definir o valor inicial
    handleResize();

    window.addEventListener('resize', handleResize)
    return () => {
      window.removeEventListener('resize', handleResize)
    }
  }, [])

  // Adicionar estilos CSS para o iOS
  useEffect(() => {
    // Remover margens e paddings do corpo da p√°gina
    document.body.style.margin = '0';
    document.body.style.padding = '0';
    document.body.style.overflow = 'hidden';
    document.documentElement.style.margin = '0';
    document.documentElement.style.padding = '0';
    document.documentElement.style.overflow = 'hidden';
    
    // Criar um estilo para dispositivos iOS - usando textContent para evitar XSS
    const style = document.createElement('style');
    style.textContent = `
      .ios-device .message-input-container {
        padding-bottom: env(safe-area-inset-bottom, 20px);
      }
      
      html, body {
        margin: 0 !important;
        padding: 0 !important;
        overflow: hidden !important;
        height: 100% !important;
      }
      
      .message-input-container {
        margin-bottom: 0 !important;
        padding-bottom: 0 !important;
      }
      
      .container.mx-auto {
        margin-bottom: 0 !important;
        padding-bottom: 0 !important;
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
      document.body.style.margin = '';
      document.body.style.padding = '';
      document.body.style.overflow = '';
      document.documentElement.style.margin = '';
      document.documentElement.style.padding = '';
      document.documentElement.style.overflow = '';
    };
  }, []);

  // Adicionar estilos globais para customizar as barras de scroll
  useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      /* Scrollbar geral */
      ::-webkit-scrollbar {
        width: 8px;
        background: transparent;
      }
      ::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #0891b2 40%, #0ea5e9 100%);
        border-radius: 8px;
        border: 2px solid transparent;
        background-clip: padding-box;
      }
      ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #06b6d4 40%, #38bdf8 100%);
      }
      /* Firefox */
      * {
        scrollbar-width: thin;
        scrollbar-color: #0891b2 #0000;
      }
    `;
    document.head.appendChild(style);
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  // Fun√ß√£o para testar a conex√£o com a API
  useEffect(() => {
    async function checkConnection() {
      try {
        console.log("Testando conex√£o com a API...");
        const response = await fetch('/api/contacts/count', {
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error(`Erro ao verificar conectividade: ${response.status}`);
        }
        
        const data = await response.json();
        
        setConnectionStatus({
          connected: data.success,
          timestamp: new Date().toISOString(),
          count: data.count
        });
        
        // Teste de conex√£o conclu√≠do
      } catch (error) {
        console.error("Erro ao testar conex√£o:", error);
        setConnectionStatus({
          connected: false,
          error: error.message,
          timestamp: new Date().toISOString()
        });
      }
    }
    
    checkConnection();
  }, []);

  // Fun√ß√£o auxiliar para obter o usu√°rio atual via API
  const fetchUserFromApi = async () => {
    try {
      console.log("Iniciando fetchUserFromApi...");
      const data = await cachedFetch('/api/auth/me', {
        credentials: 'include'
      });
      
      if (!data || !data.success) {
        if (data && data.status === 401) {
          // Redirecionar para a p√°gina de login se n√£o estiver autenticado
          navigate('/login?error=auth_required&message=Voc√™ precisa estar autenticado para acessar o chat.');
          return null;
        }
        
        console.error(`Erro ao buscar usu√°rio:`, data);
        throw new Error(`Erro ao buscar usu√°rio: ${data?.message || 'Erro desconhecido'}`);
      }
  
      
      // Verificar e extrair o objeto user da resposta
      if (data.success && data.user) {

        return data.user; // Retornar o objeto user, n√£o a resposta completa
      } else if (data.id) {
        // Se a API retornar o usu√°rio diretamente sem wrapper

        return data;
      } else {
        console.error('Formato de resposta inesperado:', data);
        throw new Error('Formato de resposta inv√°lido da API');
      }
    } catch (error) {
      console.error('Erro ao buscar usu√°rio da API:', error);
      throw error;
    }
  }

  // Obter o usu√°rio atual
  useEffect(() => {
    async function getCurrentUser() {
      try {
        setIsLoading(true);
        setError(null);
        
        // Tenta obter do backend via API
        const userData = await fetchUserFromApi();
        
        if (userData && userData.id) {
          // Usu√°rio autenticado
          setCurrentUser(userData);
          
          // Ap√≥s obter o usu√°rio, atualiza o status da conex√£o para garantir
          try {
            const response = await fetch('/api/contacts/count', {
              credentials: 'include'
            });
            const data = await response.json();
            
            setConnectionStatus(prev => ({
              ...prev,
              connected: data.success,
              timestamp: new Date().toISOString(),
              withUser: true
            }));
          } catch (error) {
            console.error("Erro ao verificar contatos:", error);
          }
        } else if (userData === null) {
          // Usu√°rio n√£o autenticado - o redirecionamento j√° ocorreu em fetchUserFromApi
          return;
        } else {
          console.error("Dados de usu√°rio recebidos, mas sem ID v√°lido:", userData);
          throw new Error('Dados de usu√°rio inv√°lidos');
        }
      } catch (error) {
        console.error('Erro ao obter usu√°rio:', error);
        setError(`Erro ao obter dados do usu√°rio: ${error.message}. Por favor, tente novamente.`);
      } finally {
        setIsLoading(false);
      }
    }
    
    getCurrentUser();
  }, [navigate]);

  // Buscar o modo do agente ao montar o componente
  useEffect(() => {
    async function fetchAgentMode() {
      try {
        const res = await apiFetch('/api/agents/mode');
        if (!res) return;
        const json = await res.json();
        if (json.success && json.data?.mode) {
          setAgentMode(json.data.mode);
        }
      } catch (err) {
        console.error('Erro ao buscar modo do agente:', err);
      }
    }
    fetchAgentMode();
  }, []);

  // Fun√ß√£o para determinar se o bot√£o AI deve estar ligado para cada contato
  const isAgentAiActive = (contact) => {
    if (!contact) return false;
    return contact.agent_state === 'ai';
  };

  // Fun√ß√£o para obter o texto de exibi√ß√£o da inst√¢ncia selecionada
  const getSelectedInstanceText = () => {
    if (isLoadingInstances) return 'Carregando...';
    if (selectedInstanceId === 'all') return 'Todas as inst√¢ncias';
    
    const selectedInstance = instances.find(instance => instance.id === selectedInstanceId);
    return selectedInstance?.agent_name || selectedInstance?.instance_name || `Inst√¢ncia ${selectedInstanceId}`;
  };

  // Fun√ß√£o para selecionar uma inst√¢ncia
  const handleInstanceSelect = (instanceId) => {
    console.log(`[INSTANCE-SELECT] ÔøΩÔøΩÔøΩ Selecionando inst√¢ncia: ${instanceId}`);
    
    // ‚úÖ LIMPAR CONTATO ATUAL quando inst√¢ncia muda
    if (currentContact) {
      console.log(`[INSTANCE-SELECT] ÔøΩÔøΩÔøΩ Limpando contato atual: ${currentContact.name || currentContact.push_name}`);
      setCurrentContact(null);
    }
    
    setSelectedInstanceId(instanceId);
    setDropdownOpen(false);
  };

  // Fun√ß√£o para obter o nome da inst√¢ncia de um contato
  const getContactInstanceName = (contact) => {
    console.log(`[INSTANCE-NAME] üîç Buscando nome da inst√¢ncia para: ${contact.name || contact.push_name}`);
    console.log(`[INSTANCE-NAME] üìä contact.instance_id:`, contact.instance_id);
    console.log(`[INSTANCE-NAME] üìä selectedInstanceId:`, selectedInstanceId);
    console.log(`[INSTANCE-NAME] üìä instances.length:`, instances.length);
    console.log(`[INSTANCE-NAME] üìä contactInstances:`, contactInstances);
    
    // Se j√° temos instance_id (quando filtrado por inst√¢ncia espec√≠fica)
    if (contact.instance_id) {
      const instance = instances.find(inst => inst.id === contact.instance_id);
      const result = instance?.agent_name || instance?.instance_name || null;
      console.log(`[INSTANCE-NAME] ‚úÖ Usando instance_id direto: ${result}`);
      return result;
    }
    
    // Se estamos vendo "todas as inst√¢ncias", usar o mapa de contatos
    if (selectedInstanceId === 'all' && instances.length > 1) {
      const instanceId = contactInstances[contact.remote_jid];
      console.log(`[INSTANCE-NAME] üìä instanceId do mapa:`, instanceId);
      
      if (instanceId) {
        const instance = instances.find(inst => inst.id === instanceId);
        const instanceName = instance?.agent_name || instance?.instance_name || null;
        
        console.log(`[INSTANCE-NAME] ‚úÖ Nome da inst√¢ncia encontrado: ${instanceName}`);
        return instanceName;
      } else {
        console.log(`[INSTANCE-NAME] ‚ö†Ô∏è Nenhuma inst√¢ncia mapeada para este contato`);
      }
    }
    
    console.log(`[INSTANCE-NAME] ‚ùå Nenhum nome de inst√¢ncia encontrado`);
    return null;
  };

  // Fun√ß√£o para formatar o nome do contato com inst√¢ncia (quando aplic√°vel)
  const formatContactName = (contact) => {
    const baseName = contact.name || contact.push_name || 'Contato';
    
    // Se "Todas as inst√¢ncias" estiver selecionada, incluir nome da inst√¢ncia
    if (selectedInstanceId === 'all' && instances.length > 1) {
      const instanceName = getContactInstanceName(contact);
      if (instanceName) {
        return { name: baseName, instanceName: instanceName };
      }
    }
    
    return { name: baseName, instanceName: null };
  };

  // Fun√ß√£o para buscar inst√¢ncias dos contatos (SEMPRE executar)
  const fetchContactInstances = async (contacts) => {
    try {
      console.log('[INSTANCES] üîç Iniciando busca de inst√¢ncias para', contacts.length, 'contatos');
      const instanceMap = {};
      
      // Buscar inst√¢ncia para cada contato baseado na √∫ltima mensagem
      const promises = contacts.map(async (contact) => {
        try {
          console.log(`[INSTANCES] üîç Buscando inst√¢ncia para contato: ${contact.name || contact.push_name} (${contact.remote_jid})`);
          
          console.log(`[INSTANCES] üîç URL da API: /api/chat/messages/${contact.remote_jid}/last`);
          const messagesResponse = await fetch(`/api/chat/messages/${contact.remote_jid}/last`, {
            credentials: 'include'
          });
          
          if (messagesResponse.ok) {
            const messageData = await messagesResponse.json();
            console.log(`[INSTANCES] üìä Resposta da API para ${contact.name || contact.push_name}:`, messageData);
            
            if (messageData.success && messageData.message?.instance_id) {
              instanceMap[contact.remote_jid] = messageData.message.instance_id;
              console.log(`[INSTANCES] ‚úÖ Contato ${contact.name || contact.push_name} -> Inst√¢ncia: ${messageData.message.instance_id}`);
            } else {
              // ‚úÖ SOLU√á√ÉO: Usar instance_id diretamente do contato quando n√£o h√° mensagens
              if (contact.instance_id) {
                instanceMap[contact.remote_jid] = contact.instance_id;
                console.log(`[INSTANCES] ‚úÖ Contato ${contact.name || contact.push_name} -> Inst√¢ncia do contato: ${contact.instance_id} (fallback)`);
              } else {
                console.log(`[INSTANCES] ‚ö†Ô∏è Contato ${contact.name || contact.push_name} -> Sem inst√¢ncia na √∫ltima mensagem nem no contato`);
                console.log(`[INSTANCES] üìä messageData:`, messageData);
              }
            }
          } else {
            console.log(`[INSTANCES] ‚ùå Erro ao buscar mensagem para ${contact.name || contact.push_name}: ${messagesResponse.status}`);
            const errorData = await messagesResponse.text();
            console.log(`[INSTANCES] ‚ùå Detalhes do erro:`, errorData);
            
            // ‚úÖ SOLU√á√ÉO: Usar instance_id do contato mesmo em caso de erro na API
            if (contact.instance_id) {
              instanceMap[contact.remote_jid] = contact.instance_id;
              console.log(`[INSTANCES] ‚úÖ Contato ${contact.name || contact.push_name} -> Inst√¢ncia do contato (erro API): ${contact.instance_id}`);
            }
          }
        } catch (error) {
          console.log(`[INSTANCES] ‚ùå Erro ao buscar inst√¢ncia para ${contact.name || contact.push_name}:`, error.message);
          
          // ‚úÖ SOLU√á√ÉO: Usar instance_id do contato mesmo em caso de erro
          if (contact.instance_id) {
            instanceMap[contact.remote_jid] = contact.instance_id;
            console.log(`[INSTANCES] ‚úÖ Contato ${contact.name || contact.push_name} -> Inst√¢ncia do contato (erro): ${contact.instance_id}`);
          }
        }
      });
      
      await Promise.all(promises);
      
      console.log('[INSTANCES] üìä Mapa de inst√¢ncias:', instanceMap);
      
      // Verificar se h√° inst√¢ncias diferentes
      const uniqueInstances = [...new Set(Object.values(instanceMap))];
      
      if (uniqueInstances.length > 1) {
        console.log(`[INSTANCES] ‚úÖ ${Object.keys(instanceMap).length} contatos em ${uniqueInstances.length} inst√¢ncias`);
        // Se ainda n√£o estava em "all", mudar automaticamente
        if (selectedInstanceId !== 'all') {
          setSelectedInstanceId('all');
        }
      } else {
        console.log(`[INSTANCES] ‚ÑπÔ∏è Todos os contatos est√£o na mesma inst√¢ncia ou sem inst√¢ncia mapeada`);
      }
      
      setContactInstances(instanceMap);
      
    } catch (error) {
      console.error('[INSTANCES] Erro ao buscar inst√¢ncias dos contatos:', error);
    }
  };

  // Fun√ß√£o para buscar inst√¢ncias do usu√°rio
  const fetchInstances = async () => {
    console.log('[DEBUG] üöÄ fetchInstances iniciada');
    console.log('[DEBUG] üîç Verificando se currentUser existe:', !!currentUser);
    console.log('[DEBUG] üîç currentUser ID:', currentUser?.id);
    
    try {
      setIsLoadingInstances(true);
      
      const response = await fetch('/api/whatsapp-credentials', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response?.ok) {
        if (response?.status === 401) {
          navigate('/login?error=session_expired&message=Sua sess√£o expirou. Por favor, fa√ßa login novamente.');
      return;
        }
        throw new Error(`Erro ${response?.status || 'desconhecido'} ao buscar inst√¢ncias`);
      }
      
      const data = await response.json();
      
      console.log('[DEBUG] üìä Resposta da API /api/whatsapp-credentials:', {
        success: data.success,
        totalInstances: data.data?.length || 0,
        instances: data.data?.map(i => ({
          id: i.id,
          name: i.agent_name || i.instance_name,
          status: i.status,
          connection_type: i.connection_type
        })) || []
      });
      
      if (data.success && data.data) {
        // Log tempor√°rio para debug - remover depois
        console.log('[DEBUG] Todas as inst√¢ncias retornadas pela API:', data.data.map(i => ({
          id: i.id,
          name: i.agent_name || i.instance_name,
          status: i.status,
          connection_type: i.connection_type
        })));
        
        // ‚úÖ Filtrar inst√¢ncias ativas (incluindo mais status v√°lidos)
        const activeInstances = data.data.filter(instance => {
          // Considerar inst√¢ncias com status v√°lidos para uso
          const validStatuses = ['connected', 'open', 'pending', 'ready'];
          const isActive = validStatuses.includes(instance.status);
          
          console.log(`[DEBUG] Inst√¢ncia ${instance.connection_type} ${instance.id}: status=${instance.status}, ativa=${isActive}`);
          
          return isActive;
        });
        
        console.log('[DEBUG] üìù Definindo inst√¢ncias no estado:', activeInstances.length);
        setInstances(activeInstances);
        
        // Log tempor√°rio para debug - remover depois
        console.log('[DEBUG] Inst√¢ncias ativas ap√≥s filtro:', activeInstances.map(i => ({
          id: i.id,
          name: i.agent_name || i.instance_name,
          status: i.status,
          connection_type: i.connection_type
        })));
        
        if (activeInstances.length > 0) {
          console.log(`‚úÖ ${activeInstances.length} inst√¢ncia(s) WhatsApp encontrada(s)`);
        } else {
          setInstances([]);
        }
      } else {
        setInstances([]);
      }
    } catch (error) {
      console.error('[INSTANCES] Erro ao buscar inst√¢ncias:', error);
      setInstances([]);
      // N√£o mostrar erro para n√£o interferir na UX se n√£o houver inst√¢ncias
    } finally {
      setIsLoadingInstances(false);
    }
  };

  // Fun√ß√£o otimizada para buscar contatos com pagina√ß√£o
  const fetchContacts = async (instanceId = null, page = 1, reset = true) => {
    try {
      if (reset) {
        setIsLoading(true);
        setError(null);
        setContactsPage(1);
        setHasMoreContacts(true);
      } else {
        setIsLoadingMoreContacts(true);
      }
      
      const instanceFilter = instanceId && instanceId !== 'all' ? instanceId : null;
      console.log(`[CONTACTS] Buscando p√°gina ${page} (${CONTACTS_PER_PAGE} contatos)${instanceFilter ? ` - inst√¢ncia: ${instanceFilter}` : ' - todas'}`);
      
      // Construir URL da API com pagina√ß√£o e filtro de inst√¢ncia
      let apiUrl = `/api/contacts?page=${page}&limit=${CONTACTS_PER_PAGE}`;
      if (instanceFilter) {
        apiUrl += `&instance=${instanceFilter}`;
        const instanceName = instances.find(i => i.id === instanceFilter)?.agent_name || 'Desconhecida';
        console.log(`[CONTACTS] üîç Filtrando por inst√¢ncia: ${instanceName} (${instanceFilter})`);
      }
      
        const startTime = Date.now();
      const response = await fetch(apiUrl, {
          credentials: 'include'
        });
        
        if (!response.ok) {
          if (response.status === 401) {
            navigate('/login?error=session_expired&message=Sua sess√£o expirou. Por favor, fa√ßa login novamente.');
            return;
          }
          
          const errorData = await response.json();
          if (response.status === 500 && instanceFilter) {
            console.error(`[CONTACTS] ‚ùå Erro 500 para inst√¢ncia ${instanceFilter}: ${errorData.message}`);
            throw new Error(`Erro ao filtrar por inst√¢ncia "${instanceFilter}": ${errorData.message}`);
          }
          throw new Error(errorData.message || `Erro ${response.status} ao buscar contatos`);
        }
        
        const data = await response.json();
        const duration = Date.now() - startTime;
        
              // P√°gina carregada com sucesso
        
        if (!data.success) {
          throw new Error(data.message || 'Erro ao buscar contatos');
        }
        
        const contactsList = data.contacts || [];
        // ‚úÖ Sanitizar contatos para corrigir dados inconsistentes
        const sanitizedContacts = contactsList.map(sanitizeContact).filter(Boolean);
        const hasMore = data.hasMore || sanitizedContacts.length === CONTACTS_PER_PAGE;
      
        if (sanitizedContacts.length > 0) {
          // Buscar √∫ltima mensagem para exibi√ß√£o (n√£o para ordena√ß√£o)
        const contactsWithLastMessagePromises = sanitizedContacts.map(async (contact) => {
          try {
            const messagesResponse = await fetch(`/api/chat/messages/${contact.remote_jid}/last`, {
              credentials: 'include'
            });
            
            if (messagesResponse.ok) {
              const messageData = await messagesResponse.json();
              if (messageData.success && messageData.message) {
                return {
                  ...contact,
                  last_message_time: messageData.message.timestamp || messageData.message.created_at,
                  last_message: messageData.message.content
                };
              }
            }
          } catch (error) {
              // Silenciar erros individuais
          }
          return contact;
        });
        
        const contactsWithLastMessages = await Promise.all(contactsWithLastMessagePromises);
        
          // Backend j√° ordena por update_at - manter ordem original
          const sortedContacts = contactsWithLastMessages;
          
          console.log(`[ORDER] üìã Contatos com √∫ltima mensagem (ordem do backend):`, sortedContacts.slice(0, 3).map(c => ({
            name: c.push_name || c.name,
            update_at: c.update_at,
            last_message: c.last_message?.substring(0, 30) + '...'
          })));
        
        if (reset) {
          // Primeira carga - substituir lista
          setContacts(sortedContacts);
          setDisplayContacts(sortedContacts);
          
          // Buscar inst√¢ncias apenas da primeira p√°gina
          console.log(`[CONTACTS] üìä Inst√¢ncias dispon√≠veis: ${instances.length}`);
          if (instances.length > 0) {
            console.log(`[CONTACTS] ‚úÖ Buscando inst√¢ncias para ${sortedContacts.length} contatos`);
            fetchContactInstances(sortedContacts);
          } else {
            console.log(`[CONTACTS] ‚è∏Ô∏è Aguardando inst√¢ncias serem carregadas antes de buscar mapeamento`);
          }
          
          // ‚úÖ PROTE√á√ÉO CR√çTICA: N√£o sobrescrever contato durante carregamento inicial
          if (!isMobileView && sortedContacts.length > 0 && !isInitialLoad && !currentContact) {
            setCurrentContact(sortedContacts[0]);
            console.log('[CONTACTS] ‚úÖ Contato auto-selecionado:', sortedContacts[0].push_name || sortedContacts[0].name);
          } else if (isInitialLoad) {
            console.log('[CONTACTS] ‚ö†Ô∏è Bloqueada auto-sele√ß√£o durante carregamento inicial');
          } else if (currentContact) {
            console.log('[CONTACTS] ‚ö†Ô∏è Bloqueada auto-sele√ß√£o - contato j√° selecionado:', currentContact.push_name || currentContact.name);
          }
        } else {
          // Carregamento adicional - anexar √† lista existente (backend j√° ordena)
          setContacts(prevContacts => {
            const newContacts = [...prevContacts, ...sortedContacts];
            const uniqueContacts = newContacts.filter((contact, index, self) => 
              index === self.findIndex(c => c.remote_jid === contact.remote_jid)
            );
            return uniqueContacts; // Backend j√° ordena por update_at
          });
          
          setDisplayContacts(prevContacts => {
            const newContacts = [...prevContacts, ...sortedContacts];
            const uniqueContacts = newContacts.filter((contact, index, self) => 
              index === self.findIndex(c => c.remote_jid === contact.remote_jid)
            );
            return uniqueContacts; // Backend j√° ordena por update_at
          });
          
          // Buscar inst√¢ncias dos novos contatos
          if (instances.length > 0) {
            console.log(`[CONTACTS] ‚úÖ Buscando inst√¢ncias para novos contatos: ${sortedContacts.length}`);
            fetchContactInstances(sortedContacts);
          } else {
            console.log(`[CONTACTS] ‚è∏Ô∏è Aguardando inst√¢ncias serem carregadas para novos contatos`);
          }
        }
        
        setHasMoreContacts(hasMore);
        setContactsPage(page);
        
                } else {
        if (reset) {
          if (instanceFilter) {
            console.log(`[CONTACTS] ‚úÖ Nenhum contato encontrado para a inst√¢ncia "${instanceFilter}"`);
            console.log(`[CONTACTS] üí° Esta inst√¢ncia n√£o possui conversas ativas ainda`);
          } else {
            console.log('[CONTACTS] Nenhum contato encontrado');
          }
          setContacts([]);
          setDisplayContacts([]);
        }
        setHasMoreContacts(false);
        }
      } catch (error) {
      console.error('[CONTACTS] Erro ao buscar contatos:', error);
        // ‚úÖ Usar tratamento robusto de erro
        handleNetworkError(error, 'buscar contatos');
      } finally {
        setIsLoading(false);
      setIsLoadingMoreContacts(false);
    }
  };

  // Buscar inst√¢ncias quando o usu√°rio estiver dispon√≠vel
  useEffect(() => {
    console.log('[DEBUG] üîÑ useEffect fetchInstances - currentUser:', !!currentUser);
    if (currentUser) {
      console.log('[DEBUG] üéØ Chamando fetchInstances...');
      fetchInstances();
    }
  }, [currentUser]);

  // Recarregar contatos quando a inst√¢ncia selecionada mudar
  useEffect(() => {
    if (currentUser) {
      // ‚úÖ PROTE√á√ÉO: N√£o interferir durante carregamento inicial
      if (isInitialLoad) {
        console.log('[INSTANCES] ‚è∏Ô∏è Adiando fetchContacts - carregamento inicial em andamento');
        return;
      }
      
      // Limpar mapa de inst√¢ncias apenas quando N√ÉO for "todas as inst√¢ncias"
      if (selectedInstanceId !== 'all') {
        setContactInstances({});
      }
      // Reset pagination states
      setContactsPage(1);
      setHasMoreContacts(true);
      
      // ‚úÖ Delay para evitar conflito com ancoragem
      const delayedFetchTimeoutId = setTimeout(() => {
        fetchContacts(selectedInstanceId === 'all' ? null : selectedInstanceId, 1, true);
      }, 200); // 200ms de delay
      timeoutsRef.current.push(delayedFetchTimeoutId);
    }
  }, [selectedInstanceId, currentUser]);

  // Buscar inst√¢ncias dos contatos quando as inst√¢ncias forem carregadas
  useEffect(() => {
    if (instances.length > 0 && contacts.length > 0 && Object.keys(contactInstances).length === 0) {
      console.log('[INSTANCES] üîÑ Inst√¢ncias carregadas, buscando mapeamento para contatos existentes');
      fetchContactInstances(contacts);
    }
  }, [instances, contacts]);



  // Buscar inst√¢ncias dos contatos quando as inst√¢ncias do usu√°rio forem carregadas
  useEffect(() => {
    if (instances.length > 0 && contacts.length > 0) {
      
      // ‚úÖ Delay para evitar conflito com ancoragem
      const delayedInstancesFetchTimeoutId = setTimeout(() => {
        fetchContactInstances(contacts);
      }, 300); // 300ms de delay
      timeoutsRef.current.push(delayedInstancesFetchTimeoutId);
    }
  }, [instances, contacts]);

  // ‚úÖ Handler de scroll para contatos com debounce
  const handleContactsScrollImmediate = (e) => {
    const container = e.target;
    const { scrollTop, scrollHeight, clientHeight } = container;
    
    // ‚úÖ Detectar quando est√° pr√≥ximo do final (100px do bottom)
    const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;
    
    if (isNearBottom && hasMoreContacts && !isLoadingMoreContacts && currentUser) {
      console.log('[CONTACTS] üîÑ Pr√≥ximo ao final da lista - carregando mais contatos');
      loadMoreContacts();
    }
  };
  
  const handleContactsScrollDebounced = (e) => {
    // ‚úÖ A√ß√µes pesadas com debounce se necess√°rio
    // Por enquanto n√£o h√° a√ß√µes pesadas para contatos
  };
  
  const handleContactsScroll = (e) => {
    // ‚úÖ Executar a√ß√µes imediatas
    handleContactsScrollImmediate(e);
    
    // ‚úÖ Debounce para a√ß√µes pesadas (150ms)
    if (contactsScrollTimeoutRef.current) {
      clearTimeout(contactsScrollTimeoutRef.current);
    }
    
    contactsScrollTimeoutRef.current = setTimeout(() => {
      handleContactsScrollDebounced(e);
    }, 150);
  };

  // Fun√ß√£o para carregar mais contatos (scroll infinito)
  const loadMoreContacts = () => {
    if (!isLoadingMoreContacts && hasMoreContacts && currentUser) {
      const nextPage = contactsPage + 1;
      console.log(`[CONTACTS] üìÑ Carregando mais contatos - p√°gina ${nextPage}`);
      fetchContacts(selectedInstanceId === 'all' ? null : selectedInstanceId, nextPage, false);
    }
  };

  // Fun√ß√£o para carregar mensagens antigas (scroll infinito)
  const loadMoreMessages = () => {
    if (!isLoadingMoreMessages && hasMoreMessages && currentContact) {
      setIsLoadingMoreMessages(true);
      const nextPage = messagesPage + 1;
      console.log(`[MESSAGES] üìÑ Carregando mensagens antigas - p√°gina ${nextPage}`);
      fetchMessages(currentContact.remote_jid, nextPage, false);
    }
  };

  // ‚úÖ Fun√ß√£o para scroll INSTANT√ÇNEO para o final (mensagens recentes)
  const scrollToBottom = () => {
    // ‚úÖ N√£o interferir durante carregamento inicial
    if (isInitialLoad) return;
    
    const container = messagesContainerRef.current;
    if (container) {
      // ‚úÖ Scroll instant√¢neo sem anima√ß√£o
      container.scrollTop = container.scrollHeight;
      setIsAtBottom(true);
      setUnreadCount(0);
    }
  };

  // ‚úÖ Fun√ß√£o DEFINITIVA para for√ßar ancoragem no final
  const forceScrollToEnd = () => {
    const container = messagesContainerRef.current;
    if (!container) return;
    
    const scrollToEnd = () => {
      const maxScroll = container.scrollHeight - container.clientHeight;
      container.scrollTop = maxScroll;
      console.log('[SCROLL] üéØ Scroll for√ßado:', container.scrollTop, '/', maxScroll);
    };
    
    // ‚úÖ Scroll imediato SEM delays
    scrollToEnd();
    
    return scrollToEnd;
  };

  // ‚úÖ SEGURAN√áA: Fun√ß√£o utilit√°ria para sanitizar mensagens do banco (corrige dados inconsistentes)
  const sanitizeMessage = (msg) => {
    if (!msg || typeof msg !== 'object') return null;
    
    // ‚úÖ Corrigir role NULL ou inv√°lido (Bug encontrado: 5 mensagens com role NULL)
    let role = msg.role;
    if (!role || !['ME', 'AI', 'USER'].includes(role)) {
      // Determinar role baseado em sender_id vs recipient_id
      role = msg.sender_id === currentUser?.id ? 'ME' : 'USER';
      console.warn(`[SANITIZE] Mensagem ${msg.id} tinha role inv√°lido "${msg.role}", corrigido para "${role}"`);
    }
    
    // ‚úÖ SEGURAN√áA: Sanitizar conte√∫do da mensagem
    const sanitizedContent = sanitizeContent(msg.content || '');
    
    // ‚úÖ Garantir que propriedades essenciais existam
    return {
      ...msg,
      id: msg.id || `temp-${Date.now()}-${Math.random()}`,
      role: role,
      content: sanitizedContent,
      created_at: msg.created_at || msg.timestamp || new Date().toISOString(),
      is_read: msg.is_read ?? false,
      temp: msg.temp || false
    };
  };

  // ‚úÖ Fun√ß√£o utilit√°ria para sanitizar contatos
  const sanitizeContact = (contact) => {
    if (!contact || typeof contact !== 'object') return null;
    
    return {
      ...contact,
      remote_jid: contact.remote_jid || contact.id || '',
      name: contact.name || contact.push_name || 'Contato',
      phone: contact.phone || (contact.remote_jid || '').split('@')[0] || '',
      instance_id: contact.instance_id || null,
      lead_id: contact.lead_id || null
    };
  };

  // ‚úÖ SEGURAN√áA: Fun√ß√£o utilit√°ria para validar entrada do usu√°rio (usando a vers√£o global)
  const validateUserInputLocal = (input, type = 'message') => {
    return validateUserInput(input, type);
  };

  // ‚úÖ SEGURAN√áA: Fun√ß√£o para tratamento robusto de erros de rede
  const handleNetworkError = (error, context = 'opera√ß√£o') => {
    console.error(`[NETWORK ERROR] ${context}:`, error);
    
    // ‚úÖ SEGURAN√áA: Verificar se √© erro de autentica√ß√£o
    if (error.message?.includes('401') || error.message?.includes('403')) {
      setError('Sess√£o expirada. Redirecionando para login...');
      setTimeout(() => {
        window.location.href = '/login?error=session_expired';
      }, 2000);
      return;
    }
    
    if (!navigator.onLine) {
      setError('Sem conex√£o com a internet. Verifique sua conex√£o.');
      return;
    }
    
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      setError('Erro de conex√£o com o servidor. Tente novamente.');
      return;
    }
    
    if (error.message.includes('JSON')) {
      setError('Resposta inv√°lida do servidor. Tente atualizar a p√°gina.');
      return;
    }
    
    // ‚úÖ SEGURAN√áA: N√£o expor detalhes internos do erro
    const userFriendlyMessage = error.message?.includes('security') || error.message?.includes('validation') 
      ? 'Dados inv√°lidos ou n√£o permitidos'
      : `Erro na ${context}. Tente novamente.`;
    
    setError(userFriendlyMessage);
  };

  // ‚úÖ Detectar posi√ß√£o do scroll com debounce otimizado para performance
  
  const handleScrollImmediate = (e) => {
    const container = e.target;
    const { scrollTop, scrollHeight, clientHeight } = container;
    
    // ‚úÖ A√ß√µes IMEDIATAS (n√£o podem ter delay)
    const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;
    setIsAtBottom(isNearBottom); // Estado cr√≠tico - sem delay
    
    // Resetar contador imediatamente se no final
    if (isNearBottom) {
      setUnreadCount(0);
    }
  };
  
  const handleScrollDebounced = (e) => {
    const container = e.target;
    const { scrollTop } = container;
    
    // ‚úÖ A√ß√µes PESADAS com debounce (podem ter delay)
    // Carregar mensagens antigas s√≥ ap√≥s parar de rolar
    // ‚úÖ M√öLTIPLAS PROTE√á√ïES: Evitar conflitos com ancoragem
    if (scrollTop < 100 && 
        hasMoreMessages && 
        !isLoadingMoreMessages && 
        allowInfiniteScroll && 
        !isInitialLoad &&
        currentContact?.remote_jid) {
      
      console.log('[SCROLL] üîù Carregando mensagens antigas (todas prote√ß√µes OK)');
      loadMoreMessages();
    } else if (scrollTop < 100) {
      console.log('[SCROLL] ‚è∏Ô∏è Scroll infinito bloqueado:', {
        hasMoreMessages,
        isLoadingMoreMessages,
        allowInfiniteScroll,
        isInitialLoad,
        hasContact: !!currentContact?.remote_jid
      });
    }
  };
  
  const handleScroll = (e) => {
    // ‚úÖ Executar a√ß√µes imediatas
    handleScrollImmediate(e);
    
    // ‚úÖ Debounce para a√ß√µes pesadas (150ms)
    if (scrollTimeoutRef.current) {
      clearTimeout(scrollTimeoutRef.current);
    }
    
    scrollTimeoutRef.current = setTimeout(() => {
      handleScrollDebounced(e);
    }, 150);
  };

  // Fun√ß√£o para verificar se deve mostrar separador de data
  const shouldShowDateSeparator = (currentMsg, previousMsg) => {
    if (!previousMsg) return true; // Primeira mensagem sempre mostra data
    
    const currentDate = new Date(currentMsg.created_at).toDateString();
    const previousDate = new Date(previousMsg.created_at).toDateString();
    return currentDate !== previousDate;
  };

  // Fun√ß√£o para formatar data do separador
  const formatDateSeparator = (dateString) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    if (date.toDateString() === today.toDateString()) {
      return 'Hoje';
    } else if (date.toDateString() === yesterday.toDateString()) {
      return 'Ontem';
    } else {
      return date.toLocaleDateString('pt-BR', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    }
  };

  // Fun√ß√£o aprimorada para buscar mensagens com scroll infinito
  const fetchMessages = async (contactId, page = 1, reset = true) => {
    if (!contactId) return;
    
    console.log(`[MESSAGES] üì© Carregando mensagens para: ${contactId}`);
    
    try {
      if (reset) {
        // ‚úÖ Estados b√°sicos para reset (sem duplica√ß√µes)
        setMessages([]);
        setMessagesPage(1);
        setHasMoreMessages(true);
        setUnreadCount(0);
      }
      
      console.log(`[MESSAGES] üì© Carregando p√°gina ${page} (${MESSAGES_PER_PAGE} mensagens) para ${contactId}`);
      
      const response = await fetch(`/api/chat/messages/${contactId}?page=${page}&limit=${MESSAGES_PER_PAGE}`, {
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error(`Erro ${response.status} ao buscar mensagens`);
      }
      
      const data = await response.json();
      
      if (data.success && data.messages) {
        const newMessages = data.messages;
        const hasMore = data.hasMore || newMessages.length === MESSAGES_PER_PAGE;
        
        // Atualizar estado de pagina√ß√£o
        setHasMoreMessages(hasMore);
        setMessagesPage(page);
        
        if (reset) {
          // Primeira carga - reverter para ordem cronol√≥gica (antigas ‚Üí recentes)
          // para exibir como chat tradicional (mensagens recentes no final da tela)
          const chronologicalMessages = [...newMessages].reverse();
          // ‚úÖ Sanitizar mensagens para corrigir dados inconsistentes do banco
          const sanitizedMessages = chronologicalMessages.map(sanitizeMessage).filter(Boolean);
          setMessages(sanitizedMessages);
          console.log(`[MESSAGES] ‚úÖ ${chronologicalMessages.length} mensagens carregadas para ${contactId} (ordem cronol√≥gica)`);
          
          // ‚úÖ Estados atualizados ANTES da ancoragem
          setIsAtBottom(true);
          
          // ‚úÖ CR√çTICO: Garantir que isLoading seja false ANTES da ancoragem
          setIsLoading(false);
          // Ancoragem programada
          
        } else {
          // Carregamento adicional - inserir mensagens antigas no IN√çCIO
          const container = messagesContainerRef.current;
          const oldScrollHeight = container?.scrollHeight || 0;
          
          setMessages(prevMessages => {
            // ‚úÖ Sanitizar novas mensagens antes de combinar
            const sanitizedNewMessages = newMessages.map(sanitizeMessage).filter(Boolean);
            // newMessages vem em ordem reversa (mais recente primeiro) para inserir no topo
            const combinedMessages = [...sanitizedNewMessages, ...prevMessages];
            // Remover duplicatas baseado no ID
            const uniqueMessages = combinedMessages.filter((msg, index, self) => 
              index === self.findIndex(m => m.id === msg.id)
            );
            return uniqueMessages;
          });
          
          // ‚úÖ Preservar posi√ß√£o do scroll ap√≥s carregar mensagens antigas (com cleanup)
          const preserveScrollTimeoutId = setTimeout(() => {
            if (container) {
              const newScrollHeight = container.scrollHeight;
              container.scrollTop += (newScrollHeight - oldScrollHeight);
            }
          }, 50);
          timeoutsRef.current.push(preserveScrollTimeoutId); // ‚úÖ Gerenciar cleanup
          
          console.log(`[MESSAGES] ‚úÖ ${newMessages.length} mensagens antigas inseridas no topo`);
        }
        
              } else {
          console.log(`[MESSAGES] Nenhuma mensagem encontrada para ${contactId}`);
          if (reset) {
            setMessages([]);
            setHasMoreMessages(false);
            setIsAtBottom(true);
            setIsInitialLoad(false); // ‚úÖ Resetar estado (sem mensagens)
          }
        }
    } catch (error) {
      console.error('[MESSAGES] Erro ao buscar mensagens:', error);
      // ‚úÖ Usar tratamento robusto de erro
      handleNetworkError(error, 'buscar mensagens');
      // ‚úÖ Resetar estado em caso de erro
      if (reset) {
        setIsInitialLoad(false); // ‚úÖ Resetar estado
        }
      } finally {
      setIsLoadingMoreMessages(false);
    }
  };



  // Busca a lista de contatos do usu√°rio quando o usu√°rio √© carregado
  useEffect(() => {
    if (!currentUser?.id) {
      console.log("Usu√°rio n√£o dispon√≠vel para buscar contatos");
      return;
    }
    
    // ‚úÖ PROTE√á√ÉO CR√çTICA: N√£o recarregar contatos durante carregamento inicial
    if (isInitialLoad) {
      console.log('[CONTACTS] ‚è∏Ô∏è Adiando fetchContacts inicial - carregamento em andamento');
      return;
    }
    
    fetchContacts(selectedInstanceId === 'all' ? null : selectedInstanceId, 1, true);
  }, [currentUser, isMobileView, navigate]); // ‚úÖ Removida depend√™ncia isInitialLoad para evitar re-execu√ß√£o

  // Sincroniza√ß√£o inteligente - atualizar contatos a cada 30 segundos
  useEffect(() => {
    if (!currentUser?.id) return;

    console.log('[CHAT] Iniciando sincroniza√ß√£o inteligente...');
    
    const intervalId = setInterval(() => {
      console.log('[CHAT] Sincroniza√ß√£o inteligente - atualizando contatos...');
      syncContacts();
    }, 30000); // 30 segundos
      
    return () => {
      console.log('[CHAT] Parando sincroniza√ß√£o inteligente...');
      clearInterval(intervalId);
    };
  }, []); // Remover depend√™ncia currentUser para evitar m√∫ltiplas execu√ß√µes



  // Removido: useEffect de limpeza desnecess√°rio que interferia com auto scroll

  // Busca as mensagens para o contato selecionado (otimizado com pagina√ß√£o)
  useEffect(() => {
    if (!currentContact || !currentUser?.id) return;
    
    let isMounted = true;
    
    // NOTA: fetchMessages agora √© chamado diretamente no handleSelectContact
    // Este useEffect agora foca apenas no polling de novas mensagens
    console.log('[MESSAGES] üîÑ Configurando polling para:', currentContact?.remote_jid);
    
    console.log('[MESSAGES] üîÑ Iniciando polling para:', currentContact?.remote_jid);
    
    // ‚úÖ POLLING ADAPTATIVO CORRIGIDO
    let intervalId;
    
    const getAdaptiveInterval = () => {
      // Determinar intervalo baseado na atividade
      if (document.hidden) {
        return 60000; // 1 minuto quando aba oculta
      } else if (isAtBottom) {
        return 15000; // 15 segundos quando no final (usu√°rio ativo)
      } else {
        return 30000; // 30 segundos padr√£o
      }
    };
    
    const pollMessages = async () => {
      try {
        // S√≥ fazer polling se a p√°gina estiver vis√≠vel e o componente montado
        if (!document.hidden && isMounted) {
          // Buscar apenas mensagens novas (n√£o todas)
          const response = await fetch(`/api/chat/messages/${currentContact.remote_jid}/last`, {
          credentials: 'include'
        });
        
          if (response.ok && isMounted) {
        const data = await response.json();
            if (data.success && data.message) {
              // Verificar se √© uma mensagem nova
              const lastMessageId = messages.length > 0 ? messages[messages.length - 1].id : null;
              if (data.message.id !== lastMessageId) {
                // Nova mensagem detectada - adicionando incrementalmente
                
                // ‚úÖ Sanitizar nova mensagem antes de adicionar
                const sanitizedMessage = sanitizeMessage(data.message);
                if (sanitizedMessage) {
                  // Adicionar apenas a nova mensagem sem recarregar tudo
                  setMessages(prevMessages => {
                    // Verificar se a mensagem j√° existe
                    const messageExists = prevMessages.some(msg => msg.id === sanitizedMessage.id);
                    if (!messageExists) {
                      return [...prevMessages, sanitizedMessage];
                    }
                    return prevMessages;
                  });
                }
                
                // Se n√£o estiver no final, incrementar contador de n√£o lidas
                if (!isAtBottom) {
                  setUnreadCount(prev => prev + 1);
    } else {
                  // ‚úÖ Se estiver no final, scroll INSTANT√ÇNEO para mostrar nova mensagem
                  // ‚úÖ N√£o interferir durante carregamento inicial
                  if (!isInitialLoad) {
                    const container = messagesContainerRef.current;
                    if (container) {
                      // ‚úÖ Scroll IMEDIATO sem requestAnimationFrame
                      container.scrollTop = container.scrollHeight;
                    }
                  }
                }
              }
            }
          }
        }
      } catch (error) {
        console.error('[MESSAGES] Erro no polling:', error);
      }
    };
    
    // ‚úÖ Sistema de polling reativo
    const scheduleNextPoll = () => {
      if (!isMounted) return;
      
      const newInterval = getAdaptiveInterval();
      currentIntervalRef.current = newInterval;
      
              // Log de polling apenas quando necess√°rio (debug)
        if (newInterval > 30000) { // S√≥ log se interval for longo (aba oculta)
          console.log(`[POLLING] ‚è∏Ô∏è Reduzindo frequ√™ncia - aba oculta`);
        }
      
      intervalId = setTimeout(() => {
        if (isMounted) {
          pollMessages().finally(() => {
            scheduleNextPoll(); // ‚úÖ Reagenda com novo intervalo
          });
        }
      }, newInterval);
    };
    
    // Iniciar polling reativo
    scheduleNextPoll();
    
    // ‚úÖ Listener para mudan√ßas de visibilidade (reagenda imediatamente)
    const handleVisibilityChange = () => {
      if (intervalId) {
        clearTimeout(intervalId);
        scheduleNextPoll(); // Reagenda com novo intervalo
      }
    };
    
    document.addEventListener('visibilitychange', handleVisibilityChange);
      
    return () => {
      console.log('[MESSAGES] ‚èπÔ∏è Parando polling para:', currentContact?.remote_jid);
      isMounted = false;
      clearTimeout(intervalId); // ‚úÖ Corrigido: clearTimeout em vez de clearInterval
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [currentContact?.remote_jid, currentUser?.id, isAtBottom]); // ‚úÖ Depend√™ncias corretas para polling adaptativo

  // ‚úÖ useEffect para garantir ancoragem INSTANT√ÇNEA ap√≥s carregamento de mensagens
  useEffect(() => {
    if (messages.length > 0 && isInitialLoad && messagesContainerRef.current) {
      // Aplicando ancoragem
      
      // ‚úÖ PROTE√á√ÉO EXTRA: Verificar se ainda √© o mesmo contato
      const firstMessageContactId = messages[0]?.remote_jid;
      const currentContactId = currentContact?.remote_jid;
      
      if (firstMessageContactId && currentContactId && firstMessageContactId !== currentContactId) {
        console.log('[SCROLL] ‚ö†Ô∏è Contato mudou durante carregamento - resetando:', {
          expected: currentContactId,
          found: firstMessageContactId
        });
        setIsInitialLoad(false);
        return;
      }
      
      // ‚úÖ Aguardar COMPLETAMENTE o DOM ser renderizado (DUPLO rAF)
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          // ‚úÖ For√ßar rec√°lculo de layout ANTES do scroll
          if (messagesContainerRef.current) {
            messagesContainerRef.current.offsetHeight; // Trigger reflow
            
            const container = messagesContainerRef.current;
            // Layout verificado, aplicando scroll
            
            const scrollFunction = forceScrollToEnd();
            scrollFunction();
            
            // ‚úÖ Verifica√ß√£o final e fallback robusto
            setTimeout(() => {
              const isAtEnd = Math.abs(container.scrollTop - (container.scrollHeight - container.clientHeight)) < 5;
              // Verifica√ß√£o final do scroll
              if (!isAtEnd) {
                container.scrollTop = container.scrollHeight;
              }
            }, 10);
          }
          
          // ‚úÖ CR√çTICO: S√≥ resetar isInitialLoad AP√ìS toda verifica√ß√£o
          setIsInitialLoad(false);
          // Ancoragem conclu√≠da
        });
      });
    }
  }, [messages.length, isInitialLoad, currentContact?.remote_jid]); // ‚úÖ Adicionada depend√™ncia currentContact









  // Fun√ß√£o otimizada para sincroniza√ß√£o inteligente
  const syncContacts = async () => {
    if (!currentUser?.id) return;
    
    try {
      setIsSyncing(true);
      console.log('[SYNC] üîÑ Sincroniza√ß√£o inteligente iniciada...');
      
      // Sincronizar apenas a primeira p√°gina de contatos (otimizado)
      const contactsResponse = await fetch(`/api/contacts?page=1&limit=${CONTACTS_PER_PAGE}`, {
        credentials: 'include'
      });
      
      if (!contactsResponse.ok) {
        throw new Error(`Erro ${contactsResponse.status} ao buscar contatos`);
      }
      
      const contactsData = await contactsResponse.json();
      
      if (!contactsData.success) {
        throw new Error(contactsData.message || 'Erro ao buscar contatos');
      }
      
      const contactsList = contactsData.contacts || [];
      
      if (contactsList.length > 0) {
        // Buscar √∫ltima mensagem dos primeiros contatos para exibi√ß√£o (otimizado)
        const contactsWithLastMessagePromises = contactsList.slice(0, 5).map(async (contact) => {
          try {
            const messagesResponse = await fetch(`/api/chat/messages/${contact.remote_jid}/last`, {
              credentials: 'include'
            });
            
            if (messagesResponse.ok) {
              const messageData = await messagesResponse.json();
              if (messageData.success && messageData.message) {
                return {
                  ...contact,
                  last_message_time: messageData.message.timestamp || messageData.message.created_at,
                  last_message: messageData.message.content
                };
              }
            }
          } catch (error) {
            // Silenciar erros
          }
          return contact;
        });
        
        const updatedContacts = await Promise.all(contactsWithLastMessagePromises);
        
        // Atualizar apenas os contatos que mudaram
        setContacts(prevContacts => {
          const newContacts = [...prevContacts];
          
          updatedContacts.forEach(updatedContact => {
            const existingIndex = newContacts.findIndex(c => c.remote_jid === updatedContact.remote_jid);
            if (existingIndex >= 0) {
              // Verificar se houve mudan√ßa real
              const existing = newContacts[existingIndex];
              if (existing.last_message_time !== updatedContact.last_message_time ||
                  existing.last_message !== updatedContact.last_message) {
                newContacts[existingIndex] = updatedContact;
              }
            } else {
              // Novo contato
              newContacts.unshift(updatedContact);
            }
          });
          
          // Backend j√° ordena por update_at (sincronizado)
          return newContacts;
        });
        
        setDisplayContacts(prevContacts => {
          const newContacts = [...prevContacts];
          
          updatedContacts.forEach(updatedContact => {
            const existingIndex = newContacts.findIndex(c => c.remote_jid === updatedContact.remote_jid);
            if (existingIndex >= 0) {
              const existing = newContacts[existingIndex];
              if (existing.last_message_time !== updatedContact.last_message_time ||
                  existing.last_message !== updatedContact.last_message) {
                newContacts[existingIndex] = updatedContact;
              }
            } else {
              newContacts.unshift(updatedContact);
            }
          });
          
          // Backend j√° ordena por update_at (sincronizado)
          return newContacts;
        });
        
        // üîß CORRE√á√ÉO: Buscar inst√¢ncias dos contatos atualizados
        if (instances.length > 0 && updatedContacts.length > 0) {
          console.log('[SYNC] üîç Buscando inst√¢ncias dos contatos atualizados...');
          fetchContactInstances(updatedContacts);
        }
        
        // Manter o contato atual se ainda existir
        if (currentContact) {
          const updatedCurrentContact = contactsList.find(c => c.remote_jid === currentContact.remote_jid);
          if (updatedCurrentContact) {
            setCurrentContact(updatedCurrentContact);
          }
        }
      }
      
      setLastSyncTime(new Date());
      console.log('[SYNC] ‚úÖ Sincroniza√ß√£o conclu√≠da');
      
    } catch (error) {
      console.error('[SYNC] ‚ùå Erro na sincroniza√ß√£o:', error);
    } finally {
      setIsSyncing(false);
    }
  };

  // Fun√ß√£o para recarregar dados
  const handleRefresh = async () => {
    setIsRefreshing(true);
    setError(null);
    
    try {
      // Buscar usu√°rio novamente
      const userData = await fetchUserFromApi();
      
      if (!userData || !userData.id) {
        throw new Error('N√£o foi poss√≠vel obter dados do usu√°rio');
      }
      
      setCurrentUser(userData);
      
      // Buscar contatos novamente
      const contactsResponse = await fetch('/api/contacts', {
        credentials: 'include'
      });
      
      if (!contactsResponse.ok) {
        throw new Error(`Erro ${contactsResponse.status} ao buscar contatos`);
      }
      
      const contactsData = await contactsResponse.json();
      
      if (!contactsData.success) {
        throw new Error(contactsData.message || 'Erro ao buscar contatos');
      }
      
      // Extrair a lista de contatos do objeto de resposta
      const contactsList = contactsData.contacts || [];
      
      if (contactsList.length > 0) {
        setContacts(contactsList);
        
        // Backend j√° ordena por update_at (sincronizado com √∫ltima mensagem)
        const sortedContacts = contactsList;
        setDisplayContacts(sortedContacts);
        
        // ‚úÖ PROTE√á√ÉO CR√çTICA: N√£o sobrescrever contato durante carregamento inicial
        if (!isMobileView && !currentContact && !isInitialLoad && contactsList.length > 0) {
          setCurrentContact(sortedContacts[0]);
          console.log('[REFRESH] ‚úÖ Contato auto-selecionado:', sortedContacts[0].push_name || sortedContacts[0].name);
        } else if (isInitialLoad) {
          console.log('[REFRESH] ‚ö†Ô∏è Bloqueada auto-sele√ß√£o durante carregamento inicial');
        }
      }
      
      setConnectionStatus({
        connected: true,
        timestamp: new Date().toISOString(),
        refreshed: true
      });
      
      console.log('Dados recarregados com sucesso');
    } catch (error) {
      console.error('Erro ao recarregar dados:', error);
      setError(`Erro ao recarregar dados: ${error.message}. Por favor, tente novamente.`);
    } finally {
      setIsRefreshing(false);
    }
  };

  // Fun√ß√£o para alternar a resposta autom√°tica para um contato
  const toggleAutoResponse = async (contactId, e) => {
    e.stopPropagation(); // Evita que o clique ative a sele√ß√£o do contato
    
    // Log para depura√ß√£o
    console.log(`Alterando estado do agente para contato ID: ${contactId}`);
    
    // Encontrar o contato na lista
    const contactIndex = contacts.findIndex(c => {
      const cId = c.id || c.remote_jid;
      return cId === contactId;
    });
    
    if (contactIndex === -1) {
      console.error(`Contato n√£o encontrado com ID: ${contactId}`);
      return;
    }
    
    const contact = contacts[contactIndex];
    console.log("Contato encontrado:", contact);
    
    // Determinar o estado atual e o novo estado (considerar estado padr√£o se n√£o existir)
    const currentState = contact.agent_state === 'ai';
    const newAgentState = currentState ? 'human' : 'ai';
    
    console.log(`Estado atual: ${contact.agent_state || 'undefined'}, Novo estado: ${newAgentState}`);
    
    // Atualiza localmente primeiro (para feedback imediato)
    const newContacts = [...contacts];
    newContacts[contactIndex] = {
      ...contact,
      agent_state: newAgentState
    };
    setContacts(newContacts);
    
    // Atualizar tamb√©m o estado de exibi√ß√£o para manter sincronizado
    setDisplayContacts(prev => {
      const displayIndex = prev.findIndex(c => {
        const cId = c.id || c.remote_jid;
        return cId === contactId;
      });
      
      if (displayIndex === -1) return prev;
      
      const newDisplay = [...prev];
      newDisplay[displayIndex] = {
        ...prev[displayIndex],
        agent_state: newAgentState
      };
      
      return newDisplay;
    });
    
    // Se for o contato atual, atualize-o tamb√©m
    if (currentContact && (currentContact.id === contactId || currentContact.remote_jid === contactId)) {
      const updatedCurrentContact = {
        ...currentContact,
        agent_state: newAgentState
      };
      setCurrentContact(updatedCurrentContact);
    }
    
    // For√ßar re-renderiza√ß√£o
    
    
    try {
      // Extrair o remote_jid correto para a chamada de API
      const remoteJid = contact.remote_jid || contactId;
      
      // Chamar a API para persistir a altera√ß√£o
      console.log(`Enviando requisi√ß√£o para API: POST /api/contacts/${remoteJid}/state`);
      console.log(`Payload: { agent_state: "${newAgentState}" }`);
      
      const response = await fetch(`/api/contacts/${remoteJid}/state`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({
          agent_state: newAgentState
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Erro na resposta da API (${response.status}):`, errorText);
        
        try {
          const errorData = JSON.parse(errorText);
          throw new Error(errorData.error || `Erro ${response.status} ao atualizar estado do agente`);
        } catch (e) {
          throw new Error(`Erro ${response.status} ao atualizar estado do agente: ${errorText}`);
        }
      }
      
      const data = await response.json();
      console.log('Resposta da API:', data);
      
      if (!data.success) {
        throw new Error(data.error || 'Erro ao atualizar estado do agente');
      }
      
      console.log(`Estado do agente atualizado com sucesso para: ${newAgentState}`);
      
    } catch (error) {
      console.error('Erro ao atualizar estado do agente na API:', error);
      
      // Em caso de erro na API, reverte a mudan√ßa local
      const revertedContacts = [...contacts];
      revertedContacts[contactIndex] = {
        ...contact,
        agent_state: currentState ? 'ai' : 'human'
      };
      setContacts(revertedContacts);
      
      // Reverter tamb√©m no estado de exibi√ß√£o
      setDisplayContacts(prev => {
        const displayIndex = prev.findIndex(c => {
          const cId = c.id || c.remote_jid;
          return cId === contactId;
        });
        
        if (displayIndex === -1) return prev;
        
        const newDisplay = [...prev];
        newDisplay[displayIndex] = {
          ...prev[displayIndex],
          agent_state: currentState ? 'ai' : 'human'
        };
        
        return newDisplay;
      });
      
      // Se for o contato atual, reverta-o tamb√©m
      if (currentContact && (currentContact.id === contactId || currentContact.remote_jid === contactId)) {
        setCurrentContact({
          ...currentContact,
          agent_state: currentState ? 'ai' : 'human'
        });
      }
      
      // For√ßar re-renderiza√ß√£o novamente ap√≥s reverter
      
      
      // Notificar o usu√°rio sobre o erro
      setError(`Erro ao atualizar estado do agente: ${error.message}`);
    }
  };

  // ‚úÖ SEGURAN√áA: Fun√ß√£o processadora de envio de mensagens - separada para poder aplicar debounce
  const processSendMessage = async (messageContent, messageId) => {
    // ‚úÖ SEGURAN√áA: Verificar sess√£o antes de enviar
    const sessionValid = await checkSession();
    if (!sessionValid) {
      setError('Sess√£o expirada. Redirecionando para login...');
      return;
    }
    
    // ‚úÖ SEGURAN√áA: Valida√ß√£o robusta de entrada
    const validation = validateUserInput(messageContent, 'message');
    if (!validation.valid) {
      setError(validation.error);
      return;
    }
    
    if (!currentContact || !currentUser) {
      setError('Dados de usu√°rio ou contato indispon√≠veis');
      return;
    }
    
    const sanitizedContent = validation.value;
    
    // ‚úÖ SEGURAN√áA: Verificar se √© a mesma mensagem sendo enviada novamente em um curto per√≠odo
    if (lastMessageIdRef.current === messageId) {
      console.log('Ignorando envio duplicado com mesmo ID:', messageId);
      return;
    }
    
    // ‚úÖ SEGURAN√áA: Rate limiting mais rigoroso
    const now = Date.now();
    if (now - lastMessageTimestamp < SECURITY_CONFIG.RATE_LIMIT_DELAY) {
      console.log('Ignorando clique r√°pido:', now - lastMessageTimestamp, 'ms desde o √∫ltimo envio');
      setError('Aguarde um momento antes de enviar outra mensagem');
      return;
    }
    
    try {
      setIsSendingMessage(true);
      // Atualizar timestamp e ID da √∫ltima mensagem
      setLastMessageTimestamp(now);
      lastMessageIdRef.current = messageId;
      
      // ‚úÖ Adicionar mensagem sanitizada temporariamente ao estado local para feedback imediato
      const tempMsg = {
        id: messageId,
        content: sanitizedContent, // ‚úÖ Usar conte√∫do sanitizado
        sender_id: currentUser.id,
        receiver_id: currentContact?.phone || currentContact?.remote_jid,
        created_at: new Date().toISOString(),
        is_read: false,
        from_me: true,
        role: 'ME',
        temp: true // Marcar como tempor√°ria
      };
      
      // Adicionar a mensagem tempor√°ria imediatamente ao estado
      setMessages(prev => [...prev, tempMsg]);
      
      // Indica que deve rolar para o final ap√≥s enviar
              // Removido: setShouldScrollToBottom n√£o √© mais usado
      
      const payload = {
        conversationId: currentContact.remote_jid,
        content: sanitizedContent, // ‚úÖ Usar conte√∫do sanitizado
        recipientId: currentContact.phone,
        role: 'ME',
        messageId: messageId // Enviar ID √∫nico para backend
      };
      
      console.log('Enviando nova mensagem:', payload);
      
      // ‚úÖ SEGURAN√áA: Adicionar token CSRF
      const csrfToken = getCSRFToken();
      const headers = {
        'Content-Type': 'application/json'
      };
      
      if (csrfToken) {
        headers['X-CSRF-Token'] = csrfToken;
      }
      
      const response = await fetch('/api/messages', {
        method: 'POST',
        headers,
        credentials: 'include',
        body: JSON.stringify(payload)
      });
      
      console.log('Status da resposta:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        
        // Remover a mensagem tempor√°ria em caso de erro
        setMessages(prev => prev.filter(msg => msg.id !== messageId));
        
        throw new Error(errorData.message || `Erro ${response.status} ao enviar mensagem`);
      }
      
      const data = await response.json();
      console.log('Resposta completa do envio de mensagem:', data);
      
      if (!data.success) {
        // Remover a mensagem tempor√°ria em caso de erro
        setMessages(prev => prev.filter(msg => msg.id !== messageId));
        
        throw new Error(data.message || 'Erro ao enviar mensagem');
      }
      
      // Extrair a mensagem da resposta da API
      const newMsg = data.message;
      if (newMsg) {
        // Remover a mensagem tempor√°ria e substituir pela mensagem real
        setMessages(prev => {
          const withoutTemp = prev.filter(msg => msg.id !== messageId);
          
          // Adicionar a mensagem confirmada pela API
        const processedMsg = {
          ...newMsg,
          from_me: true,
            role: newMsg.role || 'ME'
          };
          
          return [...withoutTemp, processedMsg];
        });
      }
      
      console.log(`Mensagem enviada com sucesso. Agent state: ${currentContact?.agent_state || 'indefinido'}`);
      
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
      setError('Erro ao enviar mensagem. Por favor, tente novamente.');
    } finally {
      // Garantir ao menos 500ms de "cooldown" entre envios
      const timeoutId = setTimeout(() => {
        setIsSendingMessage(false);
      }, 500);
      
      // Limpar timeout se o componente for desmontado
      return () => clearTimeout(timeoutId);
    }
  };
  
  // Aplicando debounce na fun√ß√£o de processamento
  const debouncedSendMessage = useRef(
    debounce(processSendMessage, 300) // 300ms de debounce
  ).current;
  
  const handleSendMessage = (e) => {
    e.preventDefault();
    console.log("handleSendMessage chamado");
    
    // Verifica√ß√£o simples e clara
    if (!newMessage.trim()) {
      console.log("Mensagem vazia, n√£o enviando");
      return;
    }
    
    if (isSendingMessage) {
      console.log("J√° existe uma mensagem sendo enviada");
      return;
    }
    
    // Gerar ID √∫nico para esta tentativa de envio
    const messageId = generateMessageId();
    const messageContent = newMessage;
    
    // Limpar o campo de mensagem imediatamente
    setNewMessage('');
    
    // Chamar a fun√ß√£o diretamente, sem debounce
    processSendMessage(messageContent, messageId);
  };

  const handleCreateContact = async () => {
    if (!currentUser) {
      setError('Voc√™ precisa estar logado para criar contatos');
      return;
    }
    
    const name = prompt('Digite o nome do contato:');
    if (!name) return;
    
    const phone = prompt('Digite o n√∫mero de telefone (com DDD, ex: 5527999999999):');
    if (!phone) return;
    
    try {
      const payload = {
        name,
        phone
      };
      
      console.log('Criando novo contato:', payload);
      
      const response = await fetch('/api/contacts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(payload)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `Erro ${response.status} ao criar contato`);
      }
      
      const data = await response.json();
      console.log('Resposta completa da cria√ß√£o de contato:', data);
      
      if (!data.success) {
        throw new Error(data.message || 'Erro ao criar contato');
      }
      
      // Extrair o contato da resposta da API
      const newContact = data.contact;
      
      if (!newContact) {
        console.warn('API retornou sucesso mas sem objeto de contato');
        // Criar um contato tempor√°rio com os dados fornecidos
        const tempContact = {
          id: `temp-${Date.now()}`,
        name: name,
        phone: phone,
          remote_jid: `${currentUser.id}_${phone}`,
        last_message: '',
          last_message_time: new Date().toISOString(),
        unread_count: 0,
          online: false
        };
        
        setContacts(prev => [tempContact, ...prev]);
        setCurrentContact(tempContact);
      } else {
        console.log('Contato criado com sucesso:', newContact);
        
        // Adicionar contato √† lista e selecion√°-lo
        setContacts(prev => [newContact, ...prev]);
        setCurrentContact(newContact);
      }
    } catch (error) {
      console.error('Erro ao criar contato:', error);
      setError('Erro ao criar contato. Por favor, tente novamente.');
    }
  };

  // Formata√ß√£o de data
  // Fun√ß√£o para formatar hor√°rio da √∫ltima sincroniza√ß√£o
  const formatLastSyncTime = (date) => {
    if (!date) return null;
    return date.toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit',
      second: '2-digit'
    });
  };

  const formatDate = (dateString) => {
    if (!dateString) return '';
    try {
      const messageDate = new Date(dateString);
      
      // Verificar se a data √© v√°lida
      if (isNaN(messageDate.getTime())) {
        console.error(`Data inv√°lida: ${dateString}`);
        return '';
      }
      
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      
      // Apenas hora para mensagens de hoje
      if (messageDate >= today) {
        return messageDate.toLocaleTimeString('pt-BR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
      } 
      // "Ontem" para mensagens de ontem
      else if (messageDate >= yesterday) {
        return `Ontem ${messageDate.toLocaleTimeString('pt-BR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        })}`;
      } 
      // "dd/mm" para mensagens de dias anteriores
      else {
        const formattedDate = messageDate.toLocaleDateString('pt-BR', {
          day: '2-digit',
          month: '2-digit'
        });
        const formattedTime = messageDate.toLocaleTimeString('pt-BR', {
          hour: '2-digit',
          minute: '2-digit'
        });
        return `${formattedDate} ${formattedTime}`;
      }
    } catch (error) {
      console.error(`Erro ao formatar data ${dateString}:`, error);
      return '';
    }
  };

  // Fun√ß√£o para selecionar contato
  const handleSelectContact = (contact) => {
    // Selecionando contato
    
    // ‚úÖ PROTE√á√ÉO: Bloquear apenas scroll infinito
    setAllowInfiniteScroll(false);
    setIsInitialLoad(true); // Marca como carregamento inicial
    
    // ‚úÖ Limpar timeouts existentes para evitar conflitos
    timeoutsRef.current.forEach(timeoutId => clearTimeout(timeoutId));
    timeoutsRef.current = [];
    
    // Simples: definir contato e carregar mensagens
    setCurrentContact(contact);
    
    if (contact?.remote_jid) {
      // Carregando mensagens do contato
      fetchMessages(contact.remote_jid, 1, true);
      
      // ‚úÖ PROTE√á√ÉO: Habilitar sistemas ap√≥s ancoragem (delay m√≠nimo para n√£o interferir)
      const enableSystemsTimeoutId = setTimeout(() => {
        // Sistemas habilitados
        setAllowInfiniteScroll(true);
      }, 1000); // 1 segundo apenas para garantir estabilidade
      timeoutsRef.current.push(enableSystemsTimeoutId);
    } else {
      console.log('[CONTACT] ‚ùå Contato sem remote_jid!');
      setIsInitialLoad(false);
    }
  };

  // Fun√ß√£o para voltar para a lista de contatos (mobile)
  const handleBackToContacts = () => {
    setCurrentContact(null);
    
    // Manter ordem atual (backend j√° ordena por update_at)
    const sortedContacts = [...contacts];
    
    setDisplayContacts(sortedContacts);
    console.log('Reordenando contatos ao voltar para a lista');
  };



  // ‚úÖ Efeito para atualizar √∫ltima mensagem - CORRIGIDO para evitar loops  
  useEffect(() => {
    // S√≥ executar se houver mensagens
    if (!messages.length || !currentContact) return;
    
    // Obter a √∫ltima mensagem
    const lastMessage = messages[messages.length - 1];
    
    // ‚úÖ Evitar updates desnecess√°rios - verificar se realmente mudou
    if (lastMessageRef.current?.id === lastMessage.id) return;
    lastMessageRef.current = lastMessage;
    
    // ‚úÖ Usar callback mais espec√≠fico para evitar depend√™ncia circular
    setContacts(prevContacts => {
      const shouldUpdate = prevContacts.some(contact => {
        const isCurrentContact = (contact.id || contact.remote_jid) === (currentContact.id || currentContact.remote_jid);
        return isCurrentContact && (
          contact.last_message !== lastMessage.content ||
          contact.last_message_time !== lastMessage.created_at
        );
      });
      
      if (!shouldUpdate) return prevContacts; // ‚úÖ Evitar re-render desnecess√°rio
      
      return prevContacts.map(contact => {
        if ((contact.id || contact.remote_jid) === (currentContact.id || currentContact.remote_jid)) {
          return {
            ...contact,
            last_message: lastMessage.content,
            last_message_time: lastMessage.created_at || new Date().toISOString()
          };
        }
        return contact;
      });
    });
  }, [currentContact?.id, currentContact?.remote_jid]); // ‚úÖ Removido 'messages' das depend√™ncias
  
  // ‚úÖ Efeito separado para detectar nova mensagem (sem modificar contacts)
  useEffect(() => {
    if (!messages.length || !currentContact) return;
    
    const lastMessage = messages[messages.length - 1];
    
    // S√≥ atualizar a ref quando mensagem realmente mudar
    if (lastMessageRef.current?.id !== lastMessage.id) {
      lastMessageRef.current = lastMessage;
      // Trigger da atualiza√ß√£o ser√° pelo useEffect acima
    }
  }, [messages.length]); // ‚úÖ Usar apenas length para evitar loops
  
  // Efeito para manter o displayContacts atualizado quando contacts mudar
  // mas n√£o durante a intera√ß√£o com um contato espec√≠fico
  useEffect(() => {
    // N√£o reordenar imediatamente se um contato estiver selecionado
    // Isso evita mudan√ßas confusas na UI
    if (!currentContact) {
      const sortedContacts = [...contacts]; // Backend j√° ordena por update_at
      
      setDisplayContacts(sortedContacts);
      console.log('Atualizando ordem de exibi√ß√£o dos contatos (sem contato selecionado)');
    }
  }, [contacts, currentContact]);

  // Buscar dados do contato quando um contato √© selecionado
  useEffect(() => {
    if (!currentContact || !currentUser?.id) return;
    
    async function fetchContactData() {
      try {
        console.log(`Buscando dados detalhados para contato: ${currentContact.remote_jid}`, {
          contact: currentContact,
          hasLeadId: Boolean(currentContact.lead_id)
        });
        
        // N√£o limpar dados anteriores durante o carregamento
        // Em vez disso, definimos apenas uma flag de carregamento
        // que vai ser usada para mostrar o spinner
        setIsLoading(true);
        
        // Buscar dados do contato de forma otimizada
        const fetchContactData = async () => {
          try {
            const directResponse = await fetch(`/api/dev/direct-data?contactId=${currentContact.remote_jid}`, {
              credentials: 'include'
            });
            
            if (!directResponse.ok) {
              throw new Error(`Erro ao acessar dados: ${directResponse.status}`);
            }
            
            const directData = await directResponse.json();
            
            if (directData.success) {
              // Converter explicitamente para n√∫mero
              let saldo = null;
              let simulado = null;
              let valorProposta = null;
              
              if (directData.balance !== null && directData.balance !== undefined) {
                saldo = Number(directData.balance);
                console.log(`Saldo direto recebido: ${directData.balance} -> convertido para ${saldo}`);
              }
              
              if (directData.simulation !== null && directData.simulation !== undefined) {
                simulado = Number(directData.simulation);
                console.log(`Simulado direto recebido: ${directData.simulation} -> convertido para ${simulado}`);
              }
              
              // Processar valor da proposta - verificando todos os poss√≠veis campos
              const valorPropostaRaw = directData.proposal_amount || directData.valor_proposta;
              if (valorPropostaRaw !== null && valorPropostaRaw !== undefined) {
                valorProposta = Number(valorPropostaRaw);
                console.log(`Valor da proposta recebido: ${valorPropostaRaw} -> convertido para ${valorProposta}`);
              }
              
              // Verificar v√°rios campos poss√≠veis para link e pix
              const linkFormalizacao = directData.formalization_link || directData.link_formalizacao;
              const chavePix = directData.pix_key || directData.chave_pix;
              
              return {
                success: true,
                saldo,
                simulado,
                proposta: directData.proposal_id,
                erroProposta: null,
                statusProposta: directData.proposal_status,
                descricaoStatus: directData.proposal_status && `Status da proposta: ${directData.proposal_status}`,
                valorProposta: valorProposta,
                linkFormalizacao: linkFormalizacao || null,
                chavePix: chavePix || null
              };
            }
            return null;
          } catch (error) {
            console.error('Erro ao buscar dados diretos:', error);
            return null;
          }
        };
        
        // Fun√ß√£o espec√≠fica para buscar detalhes da proposta do Supabase
        const fetchProposalData = async (proposalId) => {
          if (!proposalId) return null;
          
          try {
            // Buscando dados da proposta
            const response = await fetch(`/api/proposals/${proposalId}`, {
              credentials: 'include'
            });
            
            if (!response.ok) {
              throw new Error(`Erro ao buscar dados da proposta: ${response.status}`);
            }
            
            const data = await response.json();
            // Dados da proposta obtidos
            
            if (data.success && data.proposal) {
              return {
                valorProposta: data.proposal.amount || data.proposal.valor || null,
                linkFormalizacao: data.proposal.formalization_link || data.proposal.link_formalizacao || null,
                chavePix: data.proposal.pix_key || data.proposal.chave_pix || null,
                statusDetalhado: data.proposal.status_detail || data.proposal.status_detalhado || null
              };
            }
            return null;
          } catch (error) {
            console.error('Erro ao buscar dados da proposta do Supabase:', error);
            return null;
          }
        };
        
        // Usar o endpoint da API para obter dados reais do cliente
        const response = await fetch(`/api/contacts/${currentContact.remote_jid}/data`, {
          credentials: 'include'
        });
        
        // API response received
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            
            // Melhorar a convers√£o e valida√ß√£o dos dados num√©ricos
            let saldo = null;
            let simulado = null;
            let valorProposta = null;
            
            // Verificar se saldo existe e convert√™-lo para n√∫mero se for string
            if (data.saldo !== null && data.saldo !== undefined) {
              if (typeof data.saldo === 'string') {
                // Tentar converter para n√∫mero se for string
                try {
                  saldo = parseFloat(data.saldo);
                  console.log(`Convertido saldo de string para n√∫mero: ${saldo}`);
                } catch (e) {
                  console.error(`Erro ao converter saldo: ${e.message}`);
                  saldo = null;
                }
              } else {
                // Se j√° for n√∫mero, usar diretamente
                saldo = data.saldo;
              }
              
              // Verificar validade ap√≥s convers√£o
              if (isNaN(saldo)) {
                console.warn(`Saldo convertido n√£o √© um n√∫mero v√°lido: ${saldo}`);
                saldo = null;
              }
            }
            
            // Mesmo tratamento para valor simulado
            if (data.simulado !== null && data.simulado !== undefined) {
              if (typeof data.simulado === 'string') {
                try {
                  simulado = parseFloat(data.simulado);
                  console.log(`Convertido simulado de string para n√∫mero: ${simulado}`);
                } catch (e) {
                  console.error(`Erro ao converter simulado: ${e.message}`);
                  simulado = null;
                }
              } else {
                simulado = data.simulado;
              }
              
              if (isNaN(simulado)) {
                console.warn(`Simulado convertido n√£o √© um n√∫mero v√°lido: ${simulado}`);
                simulado = null;
              }
            }
            
            // Processar valor da proposta da mesma forma
            if (data.valor_proposta !== null && data.valor_proposta !== undefined) {
              if (typeof data.valor_proposta === 'string') {
                try {
                  valorProposta = parseFloat(data.valor_proposta);
                  console.log(`Convertido valor da proposta de string para n√∫mero: ${valorProposta}`);
                } catch (e) {
                  console.error(`Erro ao converter valor da proposta: ${e.message}`);
                  valorProposta = null;
                }
              } else {
                valorProposta = data.valor_proposta;
              }
              
              if (isNaN(valorProposta)) {
                console.warn(`Valor da proposta convertido n√£o √© um n√∫mero v√°lido: ${valorProposta}`);
                valorProposta = null;
              }
            }
            
            // Extrair os dados do contato da resposta e verificar cada campo
            // Mapear nomes das propriedades da API para o formato esperado pelo componente com valida√ß√£o apropriada
            let novosDados = {
              saldo: saldo, // Valor j√° convertido e validado
              simulado: simulado, // Valor j√° convertido e validado
              erroConsulta: data.erro_consulta,
              proposta: data.proposta,
              erroProposta: data.erro_proposta,
              statusProposta: data.status_proposta,
              descricaoStatus: data.descricao_status,
              valorProposta: valorProposta,
              linkFormalizacao: data.link_formalizacao || null,
              chavePix: data.chave_pix || null
            };
            
            // Verificar se temos um ID de proposta para buscar dados adicionais no Supabase
            if (data.proposta) {
              try {
                const proposalData = await fetchProposalData(data.proposta);
                if (proposalData) {
                  // Dados adicionais obtidos
                  
                  // Combinar os dados da API com os dados do Supabase
                  novosDados = {
                    ...novosDados,
                    // Preferir valores do Supabase, mas manter valores da API como fallback
                    valorProposta: proposalData.valorProposta !== null ? proposalData.valorProposta : novosDados.valorProposta,
                    linkFormalizacao: proposalData.linkFormalizacao || novosDados.linkFormalizacao,
                    chavePix: proposalData.chavePix || novosDados.chavePix,
                    // Adicionar detalhes extras do status se dispon√≠veis
                    descricaoStatus: proposalData.statusDetalhado || novosDados.descricaoStatus
                  };
                  
                  // Dados combinados
                }
              } catch (error) {
                console.error('Erro ao buscar/combinar dados adicionais da proposta:', error);
              }
            }
            
            // Buscar CPF do lead se houver lead_id
            if (currentContact.lead_id) {
              try {
                const resp = await fetch(`/api/admin/leads/${currentContact.lead_id}/cpf`, { credentials: 'include' });
                if (resp.ok) {
                  const data = await resp.json();
                  if (data.success && data.cpf) {
                    novosDados.cpf = data.cpf;
                  }
                }
              } catch (err) {
                console.error('Erro ao buscar CPF do lead (admin):', err);
              }
            }
            
            // Estado sendo atualizado com dados processados
            
            setContactData(novosDados);
          } else {
            console.log('API indica falha:', data);
            
            // Se a API retornar erro, tentar obter dados diretos
            console.log('Tentando obter dados diretos devido a erro da API...');
            const dadosDiretos = await fetchContactData();
            
            if (dadosDiretos) {
              console.log('Usando dados diretos:', dadosDiretos);
              setContactData(dadosDiretos);
            } else {
              setContactData({
                saldo: null,
                simulado: null,
                erroConsulta: data.message || 'Erro desconhecido ao buscar dados',
                proposta: null,
                erroProposta: null,
                statusProposta: null,
                descricaoStatus: null,
                valorProposta: null,
                linkFormalizacao: null,
                chavePix: null
              });
            }
          }
        } else {
          console.error(`Erro HTTP ${response.status} ao buscar dados do contato`);
          
          // Tentar obter dados diretos em caso de erro HTTP
          console.log('Tentando obter dados diretos devido a erro HTTP...');
          const dadosDiretos = await fetchContactData();
          
          if (dadosDiretos) {
            console.log('Usando dados diretos ap√≥s erro HTTP:', dadosDiretos);
            setContactData(dadosDiretos);
          } else {
            setContactData({
              saldo: null,
              simulado: null,
              erroConsulta: `Erro ${response.status} ao buscar dados`,
              proposta: null,
              erroProposta: null,
              statusProposta: null,
              descricaoStatus: null,
              valorProposta: null,
              linkFormalizacao: null,
              chavePix: null
            });
          }
        }
      } catch (error) {
        console.error('Erro ao buscar dados do contato:', error);
        setContactData({
          saldo: null,
          simulado: null,
          erroConsulta: `Erro: ${error.message}`,
          proposta: null,
          erroProposta: null,
          statusProposta: null,
          descricaoStatus: null,
          valorProposta: null,
          linkFormalizacao: null,
          chavePix: null
        });
      } finally {
        // Independente do resultado, desativar o carregamento
        setIsLoading(false);
      }
    }
    
    fetchContactData();
  }, [currentContact, currentUser?.id]);



  // Renderizar painel de dados do contato
  const renderContactDataPanel = () => {
    if (!currentContact) return null;
    
  
    
    // Valores formatados com nossa fun√ß√£o robusta
    const saldoFormatado = formataMoeda(contactData.saldo);
    const simuladoFormatado = formataMoeda(contactData.simulado);
    const valorPropostaFormatado = formataMoeda(contactData.valorProposta);
    

    
    // Mapeamento de status para vers√µes mais leg√≠veis
    const getStatusLabel = (status) => {
      const statusMap = {
        'aprovada': 'Aprovada',
        'em_analise': 'Em An√°lise',
        'rejeitada': 'Rejeitada',
        'pendente': 'Pendente',
        'paid': 'Paga',
        'processing': 'Processando',
        'canceled': 'Cancelada',
        'failed': 'Falhou'
      };
      return statusMap[status] || status || 'Pendente';
    };
    
    // Mapeamento de status para classes de estilo
    const getStatusClass = (status) => {
      const classMap = {
        'aprovada': 'bg-emerald-600/50 text-emerald-200',
        'em_analise': 'bg-amber-600/50 text-amber-200',
        'rejeitada': 'bg-red-600/50 text-red-200',
        'pendente': 'bg-blue-600/50 text-blue-200',
        'paid': 'bg-emerald-600/50 text-emerald-200',
        'processing': 'bg-amber-600/50 text-amber-200',
        'canceled': 'bg-red-600/50 text-red-200',
        'failed': 'bg-red-600/50 text-red-200'
      };
      return classMap[status] || 'bg-blue-600/50 text-blue-200';
    };
    
    // Verificar se estamos em carregamento inicial
    const isLoading = contactData.saldo === null && contactData.simulado === null && !contactData.erroConsulta;
    

    
    return (
      <div className="min-w-0 flex-1 h-full flex flex-col border-l border-cyan-800/50 flex-shrink-0 overflow-y-auto bg-white/5 backdrop-blur-sm">
        <div className="p-3 border-b border-cyan-800/50 flex justify-between items-center">
          <h3 className="text-lg font-semibold text-cyan-100">Dados do Cliente</h3>
        </div>
        {/* Caixa de CPF */}
        <div className="p-3 pt-4 pb-0">
          <div className="bg-white/10 rounded-lg p-3 border border-cyan-800/50 flex items-center mb-2">
            <FaIdCard className="text-cyan-300 mr-2" />
            <div>
              <h4 className="text-sm font-semibold text-cyan-100">CPF</h4>
              <p className="text-base font-mono text-cyan-200 break-all">
                {contactData.cpf || currentContact.cpf || currentContact.lead_cpf || 'N√£o informado'}
              </p>
            </div>
          </div>
        </div>
        
        <div className="p-3 space-y-4">
          {/* Se√ß√£o de Saldo */}
          <div className="bg-white/10 rounded-lg p-3 border border-cyan-800/50">
            <div className="flex items-center mb-2">
              <FaWallet className="text-cyan-300 mr-2" />
              <h4 className="text-sm font-semibold text-cyan-100">Saldo FGTS</h4>
            </div>
            
            {isLoading && contactData.saldo === null && contactData.erroConsulta === null ? (
              <div className="flex justify-center items-center py-2">
                <FaSpinner className="animate-spin text-cyan-400" />
              </div>
            ) : saldoFormatado ? (
              <p className="text-lg font-bold text-white">
                {saldoFormatado}
              </p>
            ) : null}
          </div>
          
          {/* Se√ß√£o de Simula√ß√£o */}
          <div className="bg-white/10 rounded-lg p-3 border border-cyan-800/50">
            <div className="flex items-center mb-2">
              <FaCalculator className="text-cyan-300 mr-2" />
              <h4 className="text-sm font-semibold text-cyan-100">Simula√ß√£o</h4>
            </div>
            
            {isLoading && contactData.simulado === null && contactData.erroConsulta === null ? (
              <div className="flex justify-center items-center py-2">
                <FaSpinner className="animate-spin text-cyan-400" />
              </div>
            ) : simuladoFormatado ? (
              <p className="text-lg font-bold text-white">
                {simuladoFormatado}
              </p>
            ) : null}
        </div>
        
          {/* Se√ß√£o de Proposta */}
          <div className="bg-white/10 rounded-lg p-3 border border-cyan-800/50">
            <div className="flex items-center mb-2">
              <FaFileAlt className="text-cyan-300 mr-2" />
              <h4 className="text-sm font-semibold text-cyan-100 flex items-center gap-2">
                Proposta
                {contactData.statusProposta && (
                  <span className={`px-3 py-1 rounded-full text-xs font-medium ml-2 ${getStatusClass(contactData.statusProposta)}`}>
                    {getStatusLabel(contactData.statusProposta)}
                  </span>
                )}
              </h4>
            </div>
            {isLoading && contactData.proposta === null && contactData.erroConsulta === null ? (
              <div className="flex justify-center items-center py-2">
                <FaSpinner className="animate-spin text-cyan-400" />
              </div>
            ) : contactData.proposta ? (
              <>
                {/* Linha com ID e bot√£o de copiar */}
                <div className="mb-2 flex items-center">
                  <div className="flex items-center gap-2 bg-gray-800/50 px-3 py-1 rounded border border-gray-700/50 w-full">
                    <span className="text-xs text-gray-300">Id</span>
                    <span className="text-xs font-mono text-white break-all">
                      {contactData.proposta}
                    </span>
              <button 
                      onClick={() => {
                        navigator.clipboard.writeText(contactData.proposta);
                        setCopiedId(true);
                        // ‚úÖ Timeout com cleanup gerenciado
                        const copiedIdTimeoutId = setTimeout(() => setCopiedId(false), 1500);
                        timeoutsRef.current.push(copiedIdTimeoutId);
                      }}
                      className="ml-1 text-cyan-200 hover:text-cyan-100 p-1"
                      title="Copiar Id da proposta"
                      aria-label="Copiar ID da proposta"
                    >
                      <FaRegCopy />
              </button>
                    {copiedId && <span className="text-xs text-emerald-300 ml-1">Copiado!</span>}
                  </div>
                </div>
                {/* Linha horizontal: Caixa PIX e Valor */}
                <div className="cards-proposta-responsive">
                  {/* Card PIX */}
                  {contactData.chavePix && (
                    <div className="bg-emerald-900/30 p-2 rounded-md border border-emerald-700/50 flex flex-col justify-between">
                      <div className="flex items-center mb-1">
                        <FaWallet className="text-emerald-400 mr-2 mt-0.5 flex-shrink-0" />
                        <span className="text-xs font-semibold text-emerald-200 mr-2">Chave PIX</span>
              <button 
                          onClick={() => {
                            navigator.clipboard.writeText(contactData.chavePix);
                            setCopiedPix(true);
                            // ‚úÖ Timeout com cleanup gerenciado
                            const copiedPixTimeoutId = setTimeout(() => setCopiedPix(false), 1500);
                            timeoutsRef.current.push(copiedPixTimeoutId);
                          }}
                          className="ml-1 text-emerald-200 hover:text-emerald-100 p-1"
                          title="Copiar chave PIX"
                          aria-label="Copiar chave PIX"
                        >
                          <FaRegCopy />
              </button>
                        {copiedPix && <span className="text-xs text-emerald-300 ml-1">Copiado!</span>}
                      </div>
                      <span className="text-xs text-emerald-300 break-all font-mono">
                        {contactData.chavePix || 'N√£o informado'}
                      </span>
                    </div>
                  )}
                  {/* Card Valor */}
                  {valorPropostaFormatado && (
                    <div className="bg-blue-900/30 p-2 rounded-md border border-blue-700/50 flex flex-col justify-between" >
                      <span className="text-xs font-semibold text-blue-200 mb-1">Valor</span>
                      <span className="text-lg font-bold text-blue-300">{valorPropostaFormatado}</span>
                    </div>
                  )}
                </div>
                {/* Link de Formaliza√ß√£o com bot√£o de copiar */}
                {contactData.linkFormalizacao && (
                  <div className="mb-2 bg-blue-900/30 p-2 rounded-md border border-blue-700/50 flex items-center">
                    <FaFileAlt className="text-blue-400 mr-2 mt-0.5 flex-shrink-0" />
                    <div className="flex-1 min-w-0">
                      <p className="text-xs font-semibold text-blue-200 mb-1">Link de Formaliza√ß√£o</p>
                      <a
                        href={contactData.linkFormalizacao}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-xs text-blue-300 underline hover:text-blue-200 break-all"
                      >
                        {contactData.linkFormalizacao}
                      </a>
            </div>
              <button 
                      onClick={() => {
                        navigator.clipboard.writeText(contactData.linkFormalizacao);
                        setCopiedLink(true);
                        // ‚úÖ Timeout com cleanup gerenciado
                        const copiedLinkTimeoutId = setTimeout(() => setCopiedLink(false), 1500);
                        timeoutsRef.current.push(copiedLinkTimeoutId);
                      }}
                      className="ml-2 text-blue-200 hover:text-blue-100 p-1"
                      title="Copiar link de formaliza√ß√£o"
                      aria-label="Copiar link de formaliza√ß√£o"
                    >
                      <FaRegCopy />
              </button>
                    {copiedLink && <span className="text-xs text-emerald-300 ml-1">Copiado!</span>}
                  </div>
                )}
                {/* Descri√ß√£o do Status */}
                {contactData.descricaoStatus && !/^Status da proposta:/i.test(contactData.descricaoStatus) && (
                  <div className="mt-2 bg-cyan-900/30 p-2 rounded-md border border-cyan-700/50">
                    <div className="flex items-start">
                      <FaInfoCircle className="text-cyan-400 mr-2 mt-0.5 flex-shrink-0" />
                      <p className="text-xs text-cyan-200">{contactData.descricaoStatus}</p>
            </div>
          </div>
        )}
                {/* Erro da Proposta */}
                {contactData.erroProposta && (
                  <div className="mt-2 bg-red-900/30 p-2 rounded-md border border-red-600/50">
                    <div className="flex items-start">
                      <FaTimesCircle className="text-red-400 mr-2 mt-0.5 flex-shrink-0" />
                      <p className="text-xs text-red-200">{contactData.erroProposta}</p>
                    </div>
                  </div>
                )}
              </>
            ) : null}
          </div>
        </div>
      </div>
    );
  };

  // Fun√ß√£o para renderizar o cabe√ßalho do chat com responsividade melhorada
  const renderChatHeader = () => {
    if (!currentContact) return null;
    
    return (
      <div className="p-2 border-b border-cyan-800/50 bg-white/5 flex items-center">
        {isMobileView && (
          <button
            className="mr-2 text-cyan-300 hover:text-cyan-100 p-2"
            onClick={handleBackToContacts}
            aria-label="Voltar para lista de contatos"
          >
            <FaArrowLeft className="text-lg" />
          </button>
        )}
        
        <div className="flex items-center flex-1 min-w-0">
          <div className="relative flex-shrink-0">
            <div className="w-10 h-10 bg-gradient-to-br from-cyan-600 to-blue-600 rounded-full flex items-center justify-center text-white font-bold shadow-md">
              {(currentContact.name || currentContact.push_name || 'C').substring(0, 2).toUpperCase()}
            </div>
            {currentContact.online && (
              <div className="absolute bottom-0 right-0 w-2.5 h-2.5 bg-emerald-500 rounded-full border-2 border-emerald-950"></div>
            )}
          </div>
          
          <div className="ml-2 overflow-hidden">
            <h3 className="font-semibold text-cyan-100 truncate">{currentContact.name || currentContact.push_name || 'Contato'}</h3>
            <div className="flex items-center gap-2">
            <p className="text-xs text-cyan-300 truncate">
              {currentContact.phone || (currentContact.remote_jid || '').split('@')[0] || ''}
            </p>
              {instances.length > 1 && currentContact.instance_id && (
                <span className="text-xs text-cyan-400 bg-cyan-900/30 px-1.5 py-0.5 rounded-full font-medium">
                  {getContactInstanceName(currentContact)}
                </span>
              )}
            </div>
          </div>
        </div>
        
        <div className="flex space-x-3 ml-2">
          {isUpdating && (
            <div className="flex items-center gap-1 text-cyan-300 text-xs">
              <FaSpinner className="w-3 h-3 animate-spin" />
              <span>Atualizando...</span>
            </div>
          )}
          <button className="text-cyan-300 hover:text-cyan-100 p-2" aria-label="Ligar">
            <FaPhone className={screenWidth < 360 ? "text-sm" : "text-lg"} />
          </button>
          <button className="text-cyan-300 hover:text-cyan-100 p-2" aria-label="Chamada de v√≠deo">
            <FaVideo className={screenWidth < 360 ? "text-sm" : "text-lg"} />
          </button>
          <button className="text-cyan-300 hover:text-cyan-100 p-2" aria-label="Mais op√ß√µes">
            <FaEllipsisV className={screenWidth < 360 ? "text-sm" : "text-lg"} />
          </button>
        </div>
      </div>
    );
  };

  // Renderizar tela de erro
  if (error && !contacts.length) {
    return (
      <div className="min-h-screen flex flex-col" style={mobileStyles.pageContainer}>
        <Navbar />
        <div className="container mx-auto flex-1 flex flex-col" style={mobileStyles.contentContainer}>
          <div className="max-w-4xl mx-auto bg-red-900/30 border border-red-700 rounded-lg p-4 text-center">
            <FaExclamationTriangle className="text-4xl text-red-500 mx-auto mb-2" />
            <p className="text-lg font-semibold text-red-200">{error}</p>
            <button 
              className="mt-4 px-4 py-2 bg-red-700 hover:bg-red-600 rounded-lg text-white"
              onClick={handleRefresh}
            >
              Tentar novamente
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen h-screen max-h-screen flex flex-col overflow-hidden w-full" style={mobileStyles.pageContainer}>
      <Navbar />
      <div className="container-fluid mx-auto flex-1 flex flex-col overflow-hidden w-full" style={mobileStyles.contentContainer}>
        {error ? (
          <div className="max-w-4xl mx-auto bg-red-900/30 border border-red-700 rounded-lg p-4 text-center">
            <FaExclamationTriangle className="text-4xl text-red-500 mx-auto mb-2" />
            <p className="text-lg font-semibold text-red-200">{error}</p>
            <button 
              className="mt-4 px-4 py-2 bg-red-700 hover:bg-red-600 rounded-lg text-white"
              onClick={handleRefresh}
            >
              Tentar novamente
            </button>
          </div>
        ) : (
          <div className="w-full h-full flex flex-col overflow-hidden" style={{margin: 0, padding: 0}}>
            <div className="flex flex-col md:flex-row border border-cyan-800/50 rounded-lg shadow-2xl bg-white/5 backdrop-blur-sm overflow-hidden flex-1 w-full" style={mobileStyles.mainContainer}>
              {/* Lista de contatos - oculta no modo mobile quando um contato est√° selecionado */}
              {(!isMobileView || !currentContact) && (
                <div className="flex-shrink-0 flex-grow-0 min-w-0 w-full md:basis-1/4 md:max-w-[25%] border-r border-cyan-800/50 flex flex-col h-full p-0">
                  <div className="p-2 border-b border-cyan-800/50">
                    <div className="flex justify-between items-center mb-2">
                      <div className="flex items-center gap-2">
                        <h2 className="text-lg font-semibold text-cyan-100">Conversas</h2>
                        {isSyncing && (
                          <div className="flex items-center gap-1 text-cyan-300 text-xs">
                            <FaSpinner className="w-3 h-3 animate-spin" />
                            <span>Sincronizando...</span>
                          </div>
                        )}
                        {lastSyncTime && !isSyncing && (
                          <div className="text-cyan-300 text-xs">
                            √öltima: {formatLastSyncTime(lastSyncTime)}
                          </div>
                        )}
                        {connectionStatus && (
                          <div className={`flex items-center gap-1 text-xs ${
                            connectionStatus.connected ? 'text-emerald-300' : 'text-red-300'
                          }`}>
                            <div className={`w-2 h-2 rounded-full ${
                              connectionStatus.connected ? 'bg-emerald-500' : 'bg-red-500'
                            }`}></div>
                            <span>{connectionStatus.connected ? 'Conectado' : 'Desconectado'}</span>
                          </div>
                        )}
                      </div>
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => syncContacts()}
                          className="p-1.5 rounded-lg bg-cyan-600 hover:bg-cyan-700 transition-colors"
                          title="Sincronizar contatos"
                        >
                          <FaSpinner className={`w-3 h-3 text-white ${isSyncing ? 'animate-spin' : ''}`} />
                        </button>
                        <button 
                          className="bg-gradient-to-r from-cyan-600 to-blue-600 text-white rounded-full p-2 hover:from-cyan-500 hover:to-blue-500 transition shadow-lg"
                          onClick={handleCreateContact}
                        >
                          <FaPlus />
                        </button>
                      </div>
                    </div>
                    
                    {/* Seletor de Inst√¢ncias Customizado */}
                    {(() => {
                      const shouldShow = instances.length > 0 || isLoadingInstances;
                      console.log(`[DEBUG] Seletor - Inst√¢ncias: ${instances.length}, Loading: ${isLoadingInstances}, ShouldShow: ${shouldShow}`);
                      return shouldShow && (
                      <div className="mb-3 relative" ref={dropdownRef}>
                        <button
                          type="button"
                          onClick={() => !isLoadingInstances && setDropdownOpen(!dropdownOpen)}
                          disabled={isLoadingInstances}
                          className="w-full py-2 px-3 bg-white/10 text-cyan-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400/60 border border-cyan-800/50 transition-colors duration-200 hover:bg-white/15 flex items-center justify-between cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <span className="text-left">
                            {getSelectedInstanceText()}
                          </span>
                          <FaChevronDown 
                            className={`w-3 h-3 text-cyan-300 transition-transform duration-200 ${
                              dropdownOpen ? 'rotate-180' : ''
                            }`}
                          />
                        </button>

                        {/* Dropdown Options */}
                        {dropdownOpen && !isLoadingInstances && (
                          <div className="absolute z-50 w-full mt-1 bg-gradient-to-br from-emerald-950/95 via-cyan-950/95 to-blue-950/95 backdrop-blur-sm border border-cyan-800/50 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                            {/* Op√ß√£o "Todas as inst√¢ncias" */}
                            <button
                              type="button"
                              onClick={() => handleInstanceSelect('all')}
                              className={`w-full px-3 py-2 text-left hover:bg-white/10 transition-colors duration-200 flex items-center justify-between ${
                                selectedInstanceId === 'all' ? 'bg-white/20 text-cyan-100' : 'text-cyan-200'
                              } first:rounded-t-lg border-b border-cyan-800/30 last:border-b-0`}
                            >
                              <span>Todas as inst√¢ncias</span>
                              {selectedInstanceId === 'all' && (
                                <FaCheck className="w-3 h-3 text-cyan-400" />
                              )}
                            </button>

                            {/* Inst√¢ncias individuais */}
                            {instances.map((instance) => (
                              <button
                                key={instance.id}
                                type="button"
                                onClick={() => handleInstanceSelect(instance.id)}
                                className={`w-full px-3 py-2 text-left hover:bg-white/10 transition-colors duration-200 flex items-center justify-between ${
                                  selectedInstanceId === instance.id ? 'bg-white/20 text-cyan-100' : 'text-cyan-200'
                                } border-b border-cyan-800/30 last:border-b-0 last:rounded-b-lg`}
                              >
                                <span>
                                  {instance.agent_name || instance.instance_name || `Inst√¢ncia ${instance.id}`}
                                </span>
                                {selectedInstanceId === instance.id && (
                                  <FaCheck className="w-3 h-3 text-cyan-400" />
                                )}
                              </button>
                            ))}
                          </div>
                        )}
                      </div>
                    );
                    })()}
                    
                    <div className="relative">
                      <input
                        type="text"
                        placeholder="Pesquisar conversa"
                        className="w-full py-2 pl-10 pr-4 bg-white/10 text-cyan-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400/60 border border-cyan-800/50 placeholder-cyan-300/70"
                        value={searchTerm}
                        onChange={(e) => {
                          // ‚úÖ SEGURAN√áA: Validar entrada de busca
                          const validation = validateUserInput(e.target.value, 'search');
                          if (validation.valid) {
                            setSearchTerm(validation.value);
                          }
                        }}
                        maxLength={SECURITY_CONFIG.MAX_SEARCH_LENGTH}
                      />
                      <FaSearch className="absolute left-3 top-3 text-cyan-300" />
                    </div>
                  </div>
                  <div 
                    ref={contactsContainerRef}
                    className="overflow-y-auto flex-1"
                    onScroll={handleContactsScroll}
                  >
                    {contacts.length === 0 ? (
                      <div className="p-4 text-center text-cyan-300">
                        Nenhuma conversa encontrada
                      </div>
                    ) : (
                      displayContacts
                        .filter(contact => 
                          contact.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          contact.phone?.includes(searchTerm)
                        )
                        .map(contact => (
                          <div
                            key={contact.id || contact.remote_jid}
                            className={`flex items-center p-2 cursor-pointer border-b border-cyan-800/30 hover:bg-white/5 transition-colors ${
                              currentContact?.id === contact.id || currentContact?.remote_jid === contact.remote_jid ? 'bg-white/10' : ''
                            }`}
                            onClick={() => handleSelectContact(contact)}
                          >
                            <div className="relative">
                              <div className="w-10 h-10 bg-gradient-to-br from-cyan-600 to-blue-600 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-md">
                                {(contact.name || contact.push_name || 'C').substring(0, 2).toUpperCase()}
                              </div>
                              {contact.online && (
                                <div className="absolute bottom-0 right-0 w-3 h-3 bg-emerald-500 rounded-full border-2 border-emerald-950"></div>
                              )}
                            </div>
                            <div className="ml-4 flex-1 min-w-0 overflow-hidden">
                              <div className="flex justify-between">
                                <div className="flex items-center gap-1">
                                  {(() => {
                                    const formattedName = formatContactName(contact);
                                    return (
                                      <>
                                        <h3 className="font-semibold text-cyan-100">{formattedName.name}</h3>
                                        {formattedName.instanceName && (
                                          <span className="text-xs text-cyan-400 bg-cyan-900/30 px-1.5 py-0.5 rounded-full font-medium">
                                            {formattedName.instanceName}
                                          </span>
                                        )}
                                      </>
                                    );
                                  })()}
                                </div>
                                <span className="text-xs text-cyan-300 ml-1 shrink-0 whitespace-nowrap">
                                  {contact.last_message_time && formatDate(contact.last_message_time)}
                                </span>
                              </div>
                              <p className="text-sm text-cyan-300 truncate w-full">
                                {contact.last_message || contact.phone || 'Nenhuma mensagem'}
                              </p>
                            </div>
                            
                            {/* Bot√£o AI para ativar/desativar resposta autom√°tica do agente */}
                            <button 
                              key={`contact-${contact.id || contact.remote_jid}`}
                              onClick={(e) => toggleAutoResponse(contact.id || contact.remote_jid, e)}
                              className={`ml-2 w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold shadow-md transition-all ${
                                isAgentAiActive(contact)
                                  ? 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white' 
                                  : 'bg-gray-600/50 text-gray-300'
                              }`}
                              title={isAgentAiActive(contact) ? "Desativar resposta autom√°tica" : "Ativar resposta autom√°tica"}
                              aria-label={isAgentAiActive(contact) ? "Desativar resposta autom√°tica" : "Ativar resposta autom√°tica"}
                              aria-pressed={isAgentAiActive(contact)}
                            >
                              AI
                            </button>
                            
                            {contact.unread_count > 0 && (
                              <div className="ml-2 bg-cyan-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
                                {contact.unread_count}
                              </div>
                            )}
                          </div>
                        ))
                    )}
                    
                    {/* ‚úÖ Skeleton loading para contatos quando carregando mais */}
                    {isLoadingMoreContacts && (
                      <div className="p-3">
                        {[...Array(3)].map((_, i) => (
                          <div key={i} className="flex items-center p-2 mb-2 animate-pulse">
                            <div className="w-12 h-12 bg-cyan-700/30 rounded-full mr-3"></div>
                            <div className="flex-1">
                              <div className="h-4 bg-cyan-700/30 rounded w-3/4 mb-2"></div>
                              <div className="h-3 bg-cyan-700/20 rounded w-1/2"></div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                    
                    {/* Bot√£o para carregar mais contatos (agora apenas fallback manual) */}
                    {hasMoreContacts && !isLoading && !isLoadingMoreContacts && displayContacts.length > 0 && (
                      <div className="p-3 text-center">
                        <button
                          onClick={loadMoreContacts}
                          className="w-full py-2 px-4 bg-white/10 hover:bg-white/20 text-cyan-100 rounded-lg transition-colors duration-200"
                        >
                          Carregar mais contatos
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              {/* √Årea de mensagens */}
              {currentContact ? (
                <>
                  <div className={`flex-shrink-0 flex-grow-0 min-w-0 w-full ${!isMobileView ? 'md:basis-2/4 md:max-w-[50%]' : ''} flex flex-col h-full p-0`}>
                  {/* Cabe√ßalho do chat */}
                    {renderChatHeader()}
                  
                  {/* √Årea de mensagens */}
                  
                    <div 
                      ref={messagesContainerRef}
                      className="flex-1 overflow-y-auto p-3 bg-gradient-to-br from-emerald-950/20 via-cyan-950/20 to-blue-950/20 relative"
                      style={{ 
                        height: '100%',
                        maxHeight: 'calc(100vh - 12rem)',
                        // ‚úÖ Garantir altura m√≠nima para justify-end funcionar
                        minHeight: '300px',
                        // ‚úÖ Container sempre vis√≠vel para ancoragem funcionar
                        // ‚úÖ For√ßar flex para funcionar
                        display: 'flex',
                        flexDirection: 'column'
                      }}
                      onScroll={handleScroll}
                    >
                    {/* Skeleton loading para mensagens antigas */}
                    {isLoadingMoreMessages && (
                      <div className="flex flex-col space-y-3 p-3">
                        {[...Array(3)].map((_, i) => (
                          <div key={i} className="animate-pulse">
                            <div className="flex space-x-3">
                              <div className="h-8 w-8 bg-cyan-700/30 rounded-full"></div>
                              <div className="flex-1 space-y-2">
                                <div className="h-4 bg-cyan-700/30 rounded w-3/4"></div>
                                <div className="h-3 bg-cyan-700/20 rounded w-1/2"></div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                    
                    {isLoading ? (
                      <div className="flex justify-center items-center h-full">
                        <FaSpinner className="animate-spin text-3xl text-cyan-400" />
                      </div>
                    ) : (
                      <>
                        {isUpdating && (
                          <div className="absolute top-2 right-2 z-10 bg-cyan-800/60 p-1.5 rounded-full shadow-md">
                            <FaSpinner className="animate-spin text-xs text-cyan-100" />
                          </div>
                        )}
                        {messages.length === 0 ? (
                          <div className="flex flex-col items-center justify-center h-full text-cyan-300">
                            <p className="text-lg">Nenhuma mensagem encontrada</p>
                            <p className="text-sm mt-2">Comece uma conversa agora</p>
                          </div>
                        ) : (
                          <>
                            {/* ‚úÖ Spacer para empurrar mensagens para o final */}
                            <div className="flex-grow"></div>
                          <div className="flex flex-col w-full">
                            {messages.map((msg, index) => {
                              const previousMsg = index > 0 ? messages[index - 1] : null;
                              const showDateSeparator = shouldShowDateSeparator(msg, previousMsg);
                              
                              return (
                                <React.Fragment key={msg.id}>
                                  {/* Separador de data */}
                                  {showDateSeparator && (
                                    <div className="flex justify-center my-4">
                                      <div className="bg-cyan-900/30 backdrop-blur-sm text-cyan-100 px-3 py-1 rounded-full text-sm border border-cyan-800/50">
                                        {formatDateSeparator(msg.created_at)}
                                      </div>
                                    </div>
                                  )}
                                  
                                  {(() => {
                              // RENDERIZA√á√ÉO: For√ßar o uso EXCLUSIVO do campo 'role' 
                              // para determinar apar√™ncia e posi√ß√£o
                              
                              // For√ßar um role v√°lido se de alguma forma chegou √† renderiza√ß√£o sem um
                              if (!msg.role || !['ME', 'AI', 'USER'].includes(msg.role)) {
                                console.error(`ERRO CR√çTICO: Mensagem sem role v√°lido chegou √† renderiza√ß√£o: ID=${msg.id}, conte√∫do="${msg.content?.substring(0, 15) || ''}", role="${msg.role || 'undefined'}"`);
                                // Aplicar corre√ß√£o de emerg√™ncia
                                msg.role = 'USER';
                              }
                              
                              // Definir valores de estilo baseado apenas no role
                              let justifyContent = 'flex-start'; // Padr√£o (USER = √† esquerda)
                              let bgColorClass = 'bg-white/10 backdrop-blur-sm text-cyan-100 rounded-tl-lg rounded-tr-lg rounded-br-lg';
                              let borderClass = 'border-cyan-800/30';
                              let textColorClass = 'text-cyan-300/80';
                              
                              // Sobrescrever para ME ou AI
                              if (msg.role === 'ME') {
                                justifyContent = 'flex-end';
                                  bgColorClass = 'bg-gradient-to-r from-cyan-600 to-blue-600 text-white rounded-tl-lg rounded-tr-lg rounded-bl-lg';
                                borderClass = 'border-blue-700/50';
                                textColorClass = 'text-blue-100/80';
                              } 
                              else if (msg.role === 'AI') {
                                justifyContent = 'flex-end';
                                  bgColorClass = 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-tl-lg rounded-tr-lg rounded-bl-lg';
                                borderClass = 'border-indigo-700/50';
                                textColorClass = 'text-indigo-100/80';
                              }
                              
                              // Log para depurar problemas de renderiza√ß√£o
              
                              
                              return (
                                <div 
                                  key={msg.id}
                                  className="mb-3"
                                  style={{ 
                                    width: '100%', 
                                    display: 'flex', 
                                    justifyContent: justifyContent
                                  }}
                                >
                                  <div
                                      className={`max-w-[75%] shadow-lg ${bgColorClass} p-2 border ${borderClass} ${msg.temp ? 'opacity-70' : ''}`}
                                  >
                                    <p dangerouslySetInnerHTML={{ __html: msg.content }}></p>
                                      <div className={`text-xs mt-1 text-right whitespace-nowrap ${textColorClass} flex items-center justify-end`}>
                                      {formatDate(msg.created_at)}
                                        {msg.temp ? (
                                          <span className="ml-1">
                                            <FaSpinner className="animate-spin text-xs ml-1" />
                                          </span>
                                        ) : (msg.role === 'ME' || msg.role === 'AI') && (
                                        <span className="ml-1">
                                          {msg.is_read ? '‚úì‚úì' : '‚úì'}
                                        </span>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              );
                                  })()}
                                </React.Fragment>
                              );
                            })}
                          </div>
                          </>
                        )}
                      </>
                    )}
                    
                    {/* Bot√£o flutuante "ir para mensagens recentes" */}
                    {!isAtBottom && (
                      <button
                        onClick={scrollToBottom}
                        className="fixed bottom-24 right-6 bg-gradient-to-r from-cyan-600 to-blue-600 text-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-300 z-50 flex items-center gap-2"
                        style={{ transform: 'translateY(-50px)' }}
                        aria-label={`Ir para mensagens recentes${unreadCount > 0 ? ` (${unreadCount} n√£o lidas)` : ''}`}
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                        </svg>
                        {unreadCount > 0 && (
                          <span className="bg-red-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center" aria-label={`${unreadCount} mensagens n√£o lidas`}>
                            {unreadCount > 99 ? '99+' : unreadCount}
                          </span>
                        )}
                      </button>
                    )}
                  </div>
                  
                  {/* Formul√°rio de envio de mensagem */}
                    <div className="border-t border-cyan-800/50 bg-white/5 w-full message-input-container flex" style={mobileStyles.messageInputContainer}>
                    <form 
                        className="flex items-center w-full mx-1 my-1"
                      onSubmit={handleSendMessage}
                    >
                        {!isMobileView || screenWidth >= 360 ? (
                          <>
                      <button 
                        type="button"
                              className="text-cyan-300 hover:text-cyan-100 px-1"
                      >
                              <FaSmile className={`${screenWidth < 400 ? 'text-base' : 'text-lg'}`} />
                      </button>
                      <button 
                        type="button"
                              className="text-cyan-300 hover:text-cyan-100 px-1"
                      >
                              <FaPaperclip className={`${screenWidth < 400 ? 'text-base' : 'text-lg'}`} />
                      </button>
                          </>
                        ) : null}
                        <div className={`flex-1 mx-1 py-2`}>
                      <input
                        type="text"
                        placeholder="Digite uma mensagem"
                            className="w-full py-2 px-3 bg-white/10 text-cyan-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400/60 border border-cyan-800/50 placeholder-cyan-300/70"
                        value={newMessage}
                        onChange={(e) => {
                          // ‚úÖ SEGURAN√áA: Validar entrada de mensagem
                          const validation = validateUserInput(e.target.value, 'message');
                          if (validation.valid || e.target.value === '') {
                            setNewMessage(e.target.value);
                          }
                        }}
                        maxLength={SECURITY_CONFIG.MAX_MESSAGE_LENGTH}
                      />
                        </div>
                      
                      {newMessage.trim() ? (
                        <button
                          type="submit"
                            className={`${screenWidth < 360 ? 'px-2 py-2' : 'p-2'} bg-gradient-to-r from-cyan-600 to-blue-600 text-white rounded-full hover:from-cyan-500 hover:to-blue-500 transition shadow-md flex-shrink-0 mx-1`}
                          aria-label="Enviar mensagem"
                          disabled={isSendingMessage}
                        >
                            <IoSend className={`${screenWidth < 400 ? 'text-base' : 'text-lg'}`} />
                        </button>
                      ) : (
                        <button
                          type="button"
                            className={`${screenWidth < 360 ? 'px-2 py-2' : 'p-2'} text-cyan-300 hover:text-cyan-100 flex-shrink-0 mx-1`}
                        >
                            <FaMicrophone className={`${screenWidth < 400 ? 'text-base' : 'text-lg'}`} />
                        </button>
                      )}
                    </form>
                  </div>
                </div>
                  
                  {/* Painel de dados do contato - apenas vis√≠vel em desktop */}
                  {!isMobileView && (
                    <div className="flex-shrink-0 flex-grow-0 min-w-0 md:basis-1/4 md:max-w-[25%] h-full flex flex-col overflow-hidden">
                      <div className="flex-1 min-h-0 h-full overflow-y-auto">
                        {renderContactDataPanel()}
                      </div>
                    </div>
                  )}
                </>
              ) : (
                <div className="hidden md:flex md:w-2/3 items-center justify-center w-full">
                  <div className="text-center">
                    <p className="text-xl mb-2 text-cyan-100">Selecione uma conversa para come√ßar</p>
                    <p className="text-cyan-300">Ou inicie uma nova conversa clicando no bot√£o +</p>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 