const { supabaseAdmin } = require('../config/supabase');
const logger = require('../utils/logger');

/**
 * Script para verificar o status do Supabase Real-time
 */
async function checkRealtimeStatus() {
  try {
    console.log('üîç Verificando status do Supabase Real-time...\n');

    // 1. Verificar se o cliente admin est√° funcionando
    console.log('1Ô∏è‚É£ Testando conex√£o com Supabase...');
    const { data: testData, error: testError } = await supabaseAdmin
      .from('clients')
      .select('count')
      .limit(1);

    if (testError) {
      console.error('‚ùå Erro na conex√£o:', testError.message);
      return;
    }
    console.log('‚úÖ Conex√£o com Supabase OK');

    // 2. Verificar se as tabelas est√£o publicadas
    console.log('\n2Ô∏è‚É£ Verificando publica√ß√£o das tabelas...');
    const { data: publicationData, error: pubError } = await supabaseAdmin
      .rpc('get_publication_tables', { pub_name: 'supabase_realtime' });

    if (pubError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar publica√ß√£o via RPC, usando query direta...');
      
      // Query direta para verificar publica√ß√£o
      const { data: directData, error: directError } = await supabaseAdmin
        .from('pg_publication_tables')
        .select('schemaname, tablename')
        .eq('pubname', 'supabase_realtime')
        .in('tablename', ['balance', 'proposals']);

      if (directError) {
        console.error('‚ùå Erro ao verificar publica√ß√£o:', directError.message);
      } else {
        console.log('üìã Tabelas publicadas:');
        if (directData && directData.length > 0) {
          directData.forEach(table => {
            console.log(`   ‚úÖ ${table.schemaname}.${table.tablename}`);
          });
        } else {
          console.log('   ‚ùå Nenhuma tabela encontrada!');
        }
      }
    } else {
      console.log('üìã Tabelas publicadas:', publicationData);
    }

    // 3. Verificar se h√° dados recentes nas tabelas
    console.log('\n3Ô∏è‚É£ Verificando dados recentes...');
    
    const { data: recentBalance, error: balanceError } = await supabaseAdmin
      .from('balance')
      .select('id, created_at, balance, error_reason')
      .order('created_at', { ascending: false })
      .limit(3);

    if (balanceError) {
      console.error('‚ùå Erro ao buscar dados de balance:', balanceError.message);
    } else {
      console.log('üìä √öltimos registros de balance:');
      recentBalance.forEach(record => {
        const status = record.error_reason ? '‚ùå ERRO' : (record.balance > 0 ? '‚úÖ SUCESSO' : '‚ö†Ô∏è ZERADO');
        console.log(`   ${status} - ${record.id.substring(0, 8)}... - ${record.created_at}`);
      });
    }

    const { data: recentProposals, error: proposalsError } = await supabaseAdmin
      .from('proposals')
      .select('id, created_at, value, status')
      .order('created_at', { ascending: false })
      .limit(3);

    if (proposalsError) {
      console.error('‚ùå Erro ao buscar dados de proposals:', proposalsError.message);
    } else {
      console.log('üìã √öltimos registros de proposals:');
      recentProposals.forEach(record => {
        console.log(`   üìÑ ${record.status.toUpperCase()} - R$ ${Number(record.value || 0).toLocaleString('pt-BR')} - ${record.created_at}`);
      });
    }

    // 4. Testar uma inser√ß√£o simples
    console.log('\n4Ô∏è‚É£ Testando inser√ß√£o de dados...');
    const testClientId = '06987548-fc75-4434-b8f0-ca6370e3bf56'; // Luiz Fiorim
    const testLeadId = 'e1e7185c-dc0f-467a-9013-32fdf25020d7'; // Pedro Nascimento

    const { data: testInsert, error: insertError } = await supabaseAdmin
      .from('balance')
      .insert({
        client_id: testClientId,
        lead_id: testLeadId,
        balance: 9999.99,
        simulation: 5000.00,
        error_reason: null,
        source: 'realtime_status_test_' + Date.now(),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select('*')
      .single();

    if (insertError) {
      console.error('‚ùå Erro ao inserir teste:', insertError.message);
    } else {
      console.log('‚úÖ Teste de inser√ß√£o OK');
      console.log(`   - ID: ${testInsert.id}`);
      console.log(`   - Saldo: R$ ${Number(testInsert.balance).toLocaleString('pt-BR')}`);
      console.log(`   - Timestamp: ${testInsert.created_at}`);
    }

    console.log('\nüéØ DIAGN√ìSTICO:');
    console.log('   Se voc√™ n√£o est√° recebendo notifica√ß√µes, verifique:');
    console.log('   1. ‚úÖ Backend est√° rodando');
    console.log('   2. ‚úÖ Supabase Real-time est√° habilitado');
    console.log('   3. ‚úÖ Tabelas est√£o publicadas');
    console.log('   4. ‚ùì Frontend est√° conectado ao Supabase Real-time');
    console.log('   5. ‚ùì Usu√°rio est√° logado no frontend');
    console.log('   6. ‚ùì Browser permite notifica√ß√µes');

    console.log('\n‚úÖ Verifica√ß√£o de status conclu√≠da');

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error.message);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  checkRealtimeStatus();
}

module.exports = checkRealtimeStatus;
