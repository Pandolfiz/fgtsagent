const { supabaseAdmin } = require('../config/supabase');
const logger = require('../utils/logger');

/**
 * Script para testar notifica√ß√µes de erro na consulta de saldo
 */
async function testErrorNotifications() {
  try {
    console.log('üß™ Testando notifica√ß√µes de erro...\n');

    // 1. Buscar um cliente para teste
    console.log('1Ô∏è‚É£ Buscando cliente para teste...');
    const { data: clients, error: clientsError } = await supabaseAdmin
      .from('clients')
      .select('id, name')
      .limit(1);

    if (clientsError || !clients || clients.length === 0) {
      throw new Error('Nenhum cliente encontrado para teste');
    }

    const testClient = clients[0];
    console.log(`‚úÖ Cliente encontrado: ${testClient.name} (${testClient.id})`);

    // 2. Buscar um lead para teste
    console.log('\n2Ô∏è‚É£ Buscando lead para teste...');
    const { data: leads, error: leadsError } = await supabaseAdmin
      .from('leads')
      .select('id, name, cpf')
      .eq('client_id', testClient.id)
      .limit(1);

    if (leadsError || !leads || leads.length === 0) {
      throw new Error('Nenhum lead encontrado para teste');
    }

    const testLead = leads[0];
    console.log(`‚úÖ Lead encontrado: ${testLead.name} (${testLead.id})`);

    // 3. Testar notifica√ß√£o de erro
    console.log('\n3Ô∏è‚É£ Testando notifica√ß√£o de erro na consulta de saldo...');
    const { data: errorRecord, error: errorInsertError } = await supabaseAdmin
      .from('balance')
      .insert({
        client_id: testClient.id,
        lead_id: testLead.id,
        balance: null,
        simulation: null,
        error_reason: 'Institui√ß√£o Fiduci√°ria n√£o possui autoriza√ß√£o do Trabalhador para Opera√ß√£o Fiduci√°ria.',
        source: 'test_error_notification_script',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select('*')
      .single();

    if (errorInsertError) {
      throw new Error(`Erro ao inserir registro de erro: ${errorInsertError.message}`);
    }

    console.log('‚úÖ Registro de erro inserido com sucesso!');
    console.log(`   - Erro: ${errorRecord.error_reason}`);
    console.log(`   - Lead: ${testLead.name}`);
    console.log(`   - ID: ${errorRecord.id}`);

    console.log('\n‚è≥ Aguardando processamento da notifica√ß√£o de erro...');
    console.log('   (Verifique se a notifica√ß√£o apareceu no frontend)');

    // 4. Testar notifica√ß√£o de saldo zerado
    console.log('\n4Ô∏è‚É£ Testando notifica√ß√£o de saldo zerado...');
    const { data: zeroRecord, error: zeroInsertError } = await supabaseAdmin
      .from('balance')
      .insert({
        client_id: testClient.id,
        lead_id: testLead.id,
        balance: 0,
        simulation: 0,
        error_reason: null,
        source: 'test_zero_notification_script',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select('*')
      .single();

    if (zeroInsertError) {
      throw new Error(`Erro ao inserir registro de saldo zerado: ${zeroInsertError.message}`);
    }

    console.log('‚úÖ Registro de saldo zerado inserido com sucesso!');
    console.log(`   - Saldo: R$ 0,00`);
    console.log(`   - Lead: ${testLead.name}`);
    console.log(`   - ID: ${zeroRecord.id}`);

    console.log('\n‚è≥ Aguardando processamento da notifica√ß√£o de saldo zerado...');

    // 5. Testar notifica√ß√£o de saldo com sucesso
    console.log('\n5Ô∏è‚É£ Testando notifica√ß√£o de saldo com sucesso...');
    const { data: successRecord, error: successInsertError } = await supabaseAdmin
      .from('balance')
      .insert({
        client_id: testClient.id,
        lead_id: testLead.id,
        balance: 25000.50,
        simulation: 15000.75,
        error_reason: null,
        source: 'test_success_notification_script',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select('*')
      .single();

    if (successInsertError) {
      throw new Error(`Erro ao inserir registro de sucesso: ${successInsertError.message}`);
    }

    console.log('‚úÖ Registro de sucesso inserido com sucesso!');
    console.log(`   - Saldo: R$ ${Number(successRecord.balance).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`);
    console.log(`   - Simula√ß√£o: R$ ${Number(successRecord.simulation).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`);
    console.log(`   - Lead: ${testLead.name}`);
    console.log(`   - ID: ${successRecord.id}`);

    console.log('\n‚è≥ Aguardando processamento da notifica√ß√£o de sucesso...');

    console.log('\nüéâ Teste de notifica√ß√µes de erro conclu√≠do com sucesso!');

    console.log('\nüìã Resumo dos testes:');
    console.log('   ‚ùå Notifica√ß√£o de ERRO (sem autoriza√ß√£o)');
    console.log('   ‚ö†Ô∏è  Notifica√ß√£o de SALDO ZERADO');
    console.log('   ‚úÖ Notifica√ß√£o de SUCESSO (com saldo)');

    console.log('\nüí° Pr√≥ximos passos:');
    console.log('   1. Verifique se as 3 notifica√ß√µes apareceram no frontend');
    console.log('   2. Observe as cores diferentes: vermelho (erro), amarelo (zerado), verde (sucesso)');
    console.log('   3. Verifique se os √≠cones est√£o corretos');
    console.log('   4. Teste os filtros por tipo de notifica√ß√£o');

    console.log('\n‚úÖ Script de teste de erro finalizado');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    process.exit(1);
  }
}

// Executar teste se chamado diretamente
if (require.main === module) {
  testErrorNotifications();
}

module.exports = testErrorNotifications;
