#!/usr/bin/env node

const { supabaseAdmin } = require('../config/supabase');
const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');

/**
 * Script para aplicar migra√ß√µes relacionadas ao perfil de usu√°rio
 */
async function applyProfileMigrations() {
  console.log('üîß Aplicando migra√ß√µes do perfil de usu√°rio...\n');

  try {
    // 1. Aplicar migra√ß√£o do campo CPF/CNPJ
    console.log('1Ô∏è‚É£ Aplicando migra√ß√£o do campo CPF/CNPJ...');
    await applyCpfCnpjMigration();

    // 2. Configurar bucket de storage para avatares
    console.log('\n2Ô∏è‚É£ Configurando bucket de storage para avatares...');
    await setupAvatarsBucket();

    // 3. Verificar estrutura da tabela
    console.log('\n3Ô∏è‚É£ Verificando estrutura da tabela user_profiles...');
    await verifyTableStructure();

    console.log('\n‚úÖ Migra√ß√µes aplicadas com sucesso!');
    console.log('\nüìù Resumo das altera√ß√µes:');
    console.log('   ‚úÖ Campo CPF/CNPJ adicionado √† tabela user_profiles');
    console.log('   ‚úÖ Bucket "avatars" configurado no Supabase Storage');
    console.log('   ‚úÖ Pol√≠ticas RLS configuradas para upload de avatares');
    console.log('   ‚úÖ √çndices criados para melhor performance');

  } catch (error) {
    console.error('‚ùå Erro durante a aplica√ß√£o das migra√ß√µes:', error.message);
    logger.error('Erro nas migra√ß√µes do perfil:', error);
    process.exit(1);
  }
}

async function applyCpfCnpjMigration() {
  try {
    const migrationPath = path.join(__dirname, '..', 'sql', 'migrations', 'add_cpf_cnpj_to_user_profiles.sql');
    
    if (!fs.existsSync(migrationPath)) {
      console.log('‚ùå Arquivo de migra√ß√£o n√£o encontrado');
      return;
    }

    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    const { data, error } = await supabaseAdmin.rpc('exec_sql', {
      sql: migrationSQL
    });

    if (error) {
      console.log('‚ö†Ô∏è Erro ao aplicar migra√ß√£o (pode j√° estar aplicada):', error.message);
      
      // Tentar verificar se a coluna j√° existe
      const { data: columns, error: checkError } = await supabaseAdmin
        .from('information_schema.columns')
        .select('column_name')
        .eq('table_name', 'user_profiles')
        .eq('column_name', 'cpf_cnpj');

      if (!checkError && columns && columns.length > 0) {
        console.log('‚úÖ Coluna cpf_cnpj j√° existe na tabela');
      } else {
        console.log('‚ùå Coluna cpf_cnpj n√£o foi criada');
      }
    } else {
      console.log('‚úÖ Migra√ß√£o do CPF/CNPJ aplicada com sucesso');
    }

  } catch (error) {
    console.log('‚ùå Erro ao aplicar migra√ß√£o CPF/CNPJ:', error.message);
  }
}

async function setupAvatarsBucket() {
  try {
    const bucketSQL = path.join(__dirname, '..', 'sql', 'migrations', 'create_avatars_storage_bucket.sql');
    
    if (!fs.existsSync(bucketSQL)) {
      console.log('‚ùå Arquivo de configura√ß√£o do bucket n√£o encontrado');
      return;
    }

    const bucketConfig = fs.readFileSync(bucketSQL, 'utf8');
    
    const { data, error } = await supabaseAdmin.rpc('exec_sql', {
      sql: bucketConfig
    });

    if (error) {
      console.log('‚ö†Ô∏è Erro ao configurar bucket (pode j√° estar configurado):', error.message);
      
      // Verificar se o bucket j√° existe
      const { data: buckets, error: checkError } = await supabaseAdmin
        .storage
        .listBuckets();

      if (!checkError && buckets) {
        const avatarsBucket = buckets.find(bucket => bucket.id === 'avatars');
        if (avatarsBucket) {
          console.log('‚úÖ Bucket "avatars" j√° existe');
        } else {
          console.log('‚ùå Bucket "avatars" n√£o foi criado');
        }
      }
    } else {
      console.log('‚úÖ Bucket de avatares configurado com sucesso');
    }

  } catch (error) {
    console.log('‚ùå Erro ao configurar bucket de avatares:', error.message);
  }
}

async function verifyTableStructure() {
  try {
    // Verificar estrutura da tabela user_profiles
    const { data: columns, error } = await supabaseAdmin
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable')
      .eq('table_name', 'user_profiles')
      .order('ordinal_position');

    if (error) {
      console.log('‚ùå Erro ao verificar estrutura da tabela:', error.message);
      return;
    }

    console.log('üìã Estrutura da tabela user_profiles:');
    columns.forEach(column => {
      const required = column.is_nullable === 'NO' ? ' (obrigat√≥rio)' : '';
      console.log(`   - ${column.column_name}: ${column.data_type}${required}`);
    });

    // Verificar se campos obrigat√≥rios existem
    const requiredFields = ['id', 'first_name', 'last_name', 'email'];
    const existingFields = columns.map(col => col.column_name);
    
    const missingFields = requiredFields.filter(field => !existingFields.includes(field));
    
    if (missingFields.length > 0) {
      console.log('‚ö†Ô∏è Campos obrigat√≥rios ausentes:', missingFields.join(', '));
    } else {
      console.log('‚úÖ Todos os campos obrigat√≥rios est√£o presentes');
    }

  } catch (error) {
    console.log('‚ùå Erro ao verificar estrutura da tabela:', error.message);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  applyProfileMigrations().catch(console.error);
}

module.exports = { applyProfileMigrations }; 

const { supabaseAdmin } = require('../config/supabase');
const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');

/**
 * Script para aplicar migra√ß√µes relacionadas ao perfil de usu√°rio
 */
async function applyProfileMigrations() {
  console.log('üîß Aplicando migra√ß√µes do perfil de usu√°rio...\n');

  try {
    // 1. Aplicar migra√ß√£o do campo CPF/CNPJ
    console.log('1Ô∏è‚É£ Aplicando migra√ß√£o do campo CPF/CNPJ...');
    await applyCpfCnpjMigration();

    // 2. Configurar bucket de storage para avatares
    console.log('\n2Ô∏è‚É£ Configurando bucket de storage para avatares...');
    await setupAvatarsBucket();

    // 3. Verificar estrutura da tabela
    console.log('\n3Ô∏è‚É£ Verificando estrutura da tabela user_profiles...');
    await verifyTableStructure();

    console.log('\n‚úÖ Migra√ß√µes aplicadas com sucesso!');
    console.log('\nüìù Resumo das altera√ß√µes:');
    console.log('   ‚úÖ Campo CPF/CNPJ adicionado √† tabela user_profiles');
    console.log('   ‚úÖ Bucket "avatars" configurado no Supabase Storage');
    console.log('   ‚úÖ Pol√≠ticas RLS configuradas para upload de avatares');
    console.log('   ‚úÖ √çndices criados para melhor performance');

  } catch (error) {
    console.error('‚ùå Erro durante a aplica√ß√£o das migra√ß√µes:', error.message);
    logger.error('Erro nas migra√ß√µes do perfil:', error);
    process.exit(1);
  }
}

async function applyCpfCnpjMigration() {
  try {
    const migrationPath = path.join(__dirname, '..', 'sql', 'migrations', 'add_cpf_cnpj_to_user_profiles.sql');
    
    if (!fs.existsSync(migrationPath)) {
      console.log('‚ùå Arquivo de migra√ß√£o n√£o encontrado');
      return;
    }

    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    const { data, error } = await supabaseAdmin.rpc('exec_sql', {
      sql: migrationSQL
    });

    if (error) {
      console.log('‚ö†Ô∏è Erro ao aplicar migra√ß√£o (pode j√° estar aplicada):', error.message);
      
      // Tentar verificar se a coluna j√° existe
      const { data: columns, error: checkError } = await supabaseAdmin
        .from('information_schema.columns')
        .select('column_name')
        .eq('table_name', 'user_profiles')
        .eq('column_name', 'cpf_cnpj');

      if (!checkError && columns && columns.length > 0) {
        console.log('‚úÖ Coluna cpf_cnpj j√° existe na tabela');
      } else {
        console.log('‚ùå Coluna cpf_cnpj n√£o foi criada');
      }
    } else {
      console.log('‚úÖ Migra√ß√£o do CPF/CNPJ aplicada com sucesso');
    }

  } catch (error) {
    console.log('‚ùå Erro ao aplicar migra√ß√£o CPF/CNPJ:', error.message);
  }
}

async function setupAvatarsBucket() {
  try {
    const bucketSQL = path.join(__dirname, '..', 'sql', 'migrations', 'create_avatars_storage_bucket.sql');
    
    if (!fs.existsSync(bucketSQL)) {
      console.log('‚ùå Arquivo de configura√ß√£o do bucket n√£o encontrado');
      return;
    }

    const bucketConfig = fs.readFileSync(bucketSQL, 'utf8');
    
    const { data, error } = await supabaseAdmin.rpc('exec_sql', {
      sql: bucketConfig
    });

    if (error) {
      console.log('‚ö†Ô∏è Erro ao configurar bucket (pode j√° estar configurado):', error.message);
      
      // Verificar se o bucket j√° existe
      const { data: buckets, error: checkError } = await supabaseAdmin
        .storage
        .listBuckets();

      if (!checkError && buckets) {
        const avatarsBucket = buckets.find(bucket => bucket.id === 'avatars');
        if (avatarsBucket) {
          console.log('‚úÖ Bucket "avatars" j√° existe');
        } else {
          console.log('‚ùå Bucket "avatars" n√£o foi criado');
        }
      }
    } else {
      console.log('‚úÖ Bucket de avatares configurado com sucesso');
    }

  } catch (error) {
    console.log('‚ùå Erro ao configurar bucket de avatares:', error.message);
  }
}

async function verifyTableStructure() {
  try {
    // Verificar estrutura da tabela user_profiles
    const { data: columns, error } = await supabaseAdmin
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable')
      .eq('table_name', 'user_profiles')
      .order('ordinal_position');

    if (error) {
      console.log('‚ùå Erro ao verificar estrutura da tabela:', error.message);
      return;
    }

    console.log('üìã Estrutura da tabela user_profiles:');
    columns.forEach(column => {
      const required = column.is_nullable === 'NO' ? ' (obrigat√≥rio)' : '';
      console.log(`   - ${column.column_name}: ${column.data_type}${required}`);
    });

    // Verificar se campos obrigat√≥rios existem
    const requiredFields = ['id', 'first_name', 'last_name', 'email'];
    const existingFields = columns.map(col => col.column_name);
    
    const missingFields = requiredFields.filter(field => !existingFields.includes(field));
    
    if (missingFields.length > 0) {
      console.log('‚ö†Ô∏è Campos obrigat√≥rios ausentes:', missingFields.join(', '));
    } else {
      console.log('‚úÖ Todos os campos obrigat√≥rios est√£o presentes');
    }

  } catch (error) {
    console.log('‚ùå Erro ao verificar estrutura da tabela:', error.message);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  applyProfileMigrations().catch(console.error);
}

module.exports = { applyProfileMigrations }; 