const { supabase, supabaseAdmin } = require('../config/supabase');
const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');

/**
 * Script para diagnosticar e corrigir problemas identificados nos logs do terminal
 */
async function diagnoseTerminalErrors() {
  console.log('üîç Iniciando diagn√≥stico dos erros do terminal...\n');

  // 1. Verificar configura√ß√£o do Supabase
  console.log('1Ô∏è‚É£ Verificando configura√ß√£o do Supabase...');
  await checkSupabaseConfiguration();

  // 2. Verificar vers√µes das depend√™ncias
  console.log('\n2Ô∏è‚É£ Verificando vers√µes das depend√™ncias...');
  await checkDependencies();

  // 3. Verificar problemas de autentica√ß√£o
  console.log('\n3Ô∏è‚É£ Verificando problemas de autentica√ß√£o...');
  await checkAuthenticationIssues();

  // 4. Verificar excesso de requisi√ß√µes
  console.log('\n4Ô∏è‚É£ Verificando excesso de requisi√ß√µes...');
  await checkRequestOverload();

  // 5. Verificar logs de erro
  console.log('\n5Ô∏è‚É£ Analisando logs de erro...');
  await analyzeErrorLogs();

  console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
}

async function checkSupabaseConfiguration() {
  try {
    if (!supabase) {
      console.log('‚ùå Cliente Supabase n√£o est√° configurado');
      return;
    }

    if (!supabaseAdmin) {
      console.log('‚ùå Cliente Supabase Admin n√£o est√° configurado');
      return;
    }

    // Testar conex√£o
    const { data, error } = await supabase.from('user_profiles').select('count').limit(1);
    
    if (error) {
      console.log(`‚ùå Erro na conex√£o com Supabase: ${error.message}`);
    } else {
      console.log('‚úÖ Conex√£o com Supabase funcionando');
    }

    // Verificar se createUserSession est√° dispon√≠vel
    if (typeof supabaseAdmin.auth.admin.createUserSession === 'function') {
      console.log('‚úÖ createUserSession est√° dispon√≠vel');
    } else {
      console.log('‚ùå createUserSession n√£o est√° dispon√≠vel - vers√£o do Supabase pode estar desatualizada');
    }

  } catch (error) {
    console.log(`‚ùå Erro ao verificar configura√ß√£o: ${error.message}`);
  }
}

async function checkDependencies() {
  try {
    const packageJsonPath = path.join(__dirname, '..', 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

    const supabaseVersion = packageJson.dependencies['@supabase/supabase-js'];
    console.log(`üì¶ Vers√£o do Supabase: ${supabaseVersion}`);

    // Verificar se a vers√£o √© recente
    const versionNumber = supabaseVersion.replace('^', '').replace('~', '');
    const majorVersion = parseInt(versionNumber.split('.')[0]);
    const minorVersion = parseInt(versionNumber.split('.')[1]);

    if (majorVersion >= 2 && minorVersion >= 49) {
      console.log('‚úÖ Vers√£o do Supabase √© recente (2.49+)');
    } else {
      console.log('‚ö†Ô∏è Vers√£o do Supabase pode estar desatualizada');
    }

  } catch (error) {
    console.log(`‚ùå Erro ao verificar depend√™ncias: ${error.message}`);
  }
}

async function checkAuthenticationIssues() {
  try {
    // Verificar se h√° tokens expirados no cache
    const cacheDir = path.join(__dirname, '..', 'temp');
    if (fs.existsSync(cacheDir)) {
      const cacheFiles = fs.readdirSync(cacheDir).filter(file => file.includes('token'));
      if (cacheFiles.length > 0) {
        console.log(`‚ö†Ô∏è Encontrados ${cacheFiles.length} arquivos de cache de token`);
        
        // Limpar cache antigo
        cacheFiles.forEach(file => {
          const filePath = path.join(cacheDir, file);
          const stats = fs.statSync(filePath);
          const ageInHours = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60);
          
          if (ageInHours > 24) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è Removido cache antigo: ${file}`);
          }
        });
      }
    }

    // Verificar configura√ß√£o de JWT
    const config = require('../config');
    if (!config.supabase.jwtSecret && !process.env.SUPABASE_JWT_SECRET) {
      console.log('‚ö†Ô∏è SUPABASE_JWT_SECRET n√£o configurado');
    } else {
      console.log('‚úÖ JWT Secret configurado');
    }

  } catch (error) {
    console.log(`‚ùå Erro ao verificar autentica√ß√£o: ${error.message}`);
  }
}

async function checkRequestOverload() {
  try {
    // Verificar se h√° muitas requisi√ß√µes simult√¢neas
    const logsPath = path.join(__dirname, '..', 'logs', 'combined.log');
    
    if (fs.existsSync(logsPath)) {
      const logContent = fs.readFileSync(logsPath, 'utf8');
      const lines = logContent.split('\n');
      
      // Contar requisi√ß√µes de perfil nos √∫ltimos 1000 logs
      const recentLines = lines.slice(-1000);
      const profileRequests = recentLines.filter(line => 
        line.includes('ensureUserProfile') || line.includes('requireAuth')
      ).length;
      
      console.log(`üìä Requisi√ß√µes de perfil nos √∫ltimos logs: ${profileRequests}`);
      
      if (profileRequests > 100) {
        console.log('‚ö†Ô∏è Alto volume de requisi√ß√µes de perfil detectado');
      } else {
        console.log('‚úÖ Volume de requisi√ß√µes normal');
      }
    }

  } catch (error) {
    console.log(`‚ùå Erro ao verificar sobrecarga: ${error.message}`);
  }
}

async function analyzeErrorLogs() {
  try {
    const errorLogPath = path.join(__dirname, '..', 'logs', 'error.log');
    
    if (fs.existsSync(errorLogPath)) {
      const errorContent = fs.readFileSync(errorLogPath, 'utf8');
      const lines = errorContent.split('\n');
      
      // Analisar erros mais comuns
      const createSessionErrors = lines.filter(line => 
        line.includes('createSession is not a function')
      ).length;
      
      const tokenErrors = lines.filter(line => 
        line.includes('Token expirado') || line.includes('Formato de token inv√°lido')
      ).length;
      
      const evolutionErrors = lines.filter(line => 
        line.includes('Request failed with status code 404')
      ).length;
      
      console.log(`üî¥ Erros de createSession: ${createSessionErrors}`);
      console.log(`üî¥ Erros de token: ${tokenErrors}`);
      console.log(`üî¥ Erros de Evolution API: ${evolutionErrors}`);
      
      if (createSessionErrors > 0) {
        console.log('üí° Solu√ß√£o: Atualizar vers√£o do Supabase ou usar m√©todo alternativo');
      }
      
      if (tokenErrors > 0) {
        console.log('üí° Solu√ß√£o: Implementar renova√ß√£o autom√°tica de tokens');
      }
      
      if (evolutionErrors > 0) {
        console.log('üí° Solu√ß√£o: Verificar conectividade com Evolution API');
      }
    }

  } catch (error) {
    console.log(`‚ùå Erro ao analisar logs: ${error.message}`);
  }
}

// Executar diagn√≥stico
if (require.main === module) {
  diagnoseTerminalErrors().catch(console.error);
}

module.exports = { diagnoseTerminalErrors }; 
const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');

/**
 * Script para diagnosticar e corrigir problemas identificados nos logs do terminal
 */
async function diagnoseTerminalErrors() {
  console.log('üîç Iniciando diagn√≥stico dos erros do terminal...\n');

  // 1. Verificar configura√ß√£o do Supabase
  console.log('1Ô∏è‚É£ Verificando configura√ß√£o do Supabase...');
  await checkSupabaseConfiguration();

  // 2. Verificar vers√µes das depend√™ncias
  console.log('\n2Ô∏è‚É£ Verificando vers√µes das depend√™ncias...');
  await checkDependencies();

  // 3. Verificar problemas de autentica√ß√£o
  console.log('\n3Ô∏è‚É£ Verificando problemas de autentica√ß√£o...');
  await checkAuthenticationIssues();

  // 4. Verificar excesso de requisi√ß√µes
  console.log('\n4Ô∏è‚É£ Verificando excesso de requisi√ß√µes...');
  await checkRequestOverload();

  // 5. Verificar logs de erro
  console.log('\n5Ô∏è‚É£ Analisando logs de erro...');
  await analyzeErrorLogs();

  console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
}

async function checkSupabaseConfiguration() {
  try {
    if (!supabase) {
      console.log('‚ùå Cliente Supabase n√£o est√° configurado');
      return;
    }

    if (!supabaseAdmin) {
      console.log('‚ùå Cliente Supabase Admin n√£o est√° configurado');
      return;
    }

    // Testar conex√£o
    const { data, error } = await supabase.from('user_profiles').select('count').limit(1);
    
    if (error) {
      console.log(`‚ùå Erro na conex√£o com Supabase: ${error.message}`);
    } else {
      console.log('‚úÖ Conex√£o com Supabase funcionando');
    }

    // Verificar se createUserSession est√° dispon√≠vel
    if (typeof supabaseAdmin.auth.admin.createUserSession === 'function') {
      console.log('‚úÖ createUserSession est√° dispon√≠vel');
    } else {
      console.log('‚ùå createUserSession n√£o est√° dispon√≠vel - vers√£o do Supabase pode estar desatualizada');
    }

  } catch (error) {
    console.log(`‚ùå Erro ao verificar configura√ß√£o: ${error.message}`);
  }
}

async function checkDependencies() {
  try {
    const packageJsonPath = path.join(__dirname, '..', 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

    const supabaseVersion = packageJson.dependencies['@supabase/supabase-js'];
    console.log(`üì¶ Vers√£o do Supabase: ${supabaseVersion}`);

    // Verificar se a vers√£o √© recente
    const versionNumber = supabaseVersion.replace('^', '').replace('~', '');
    const majorVersion = parseInt(versionNumber.split('.')[0]);
    const minorVersion = parseInt(versionNumber.split('.')[1]);

    if (majorVersion >= 2 && minorVersion >= 49) {
      console.log('‚úÖ Vers√£o do Supabase √© recente (2.49+)');
    } else {
      console.log('‚ö†Ô∏è Vers√£o do Supabase pode estar desatualizada');
    }

  } catch (error) {
    console.log(`‚ùå Erro ao verificar depend√™ncias: ${error.message}`);
  }
}

async function checkAuthenticationIssues() {
  try {
    // Verificar se h√° tokens expirados no cache
    const cacheDir = path.join(__dirname, '..', 'temp');
    if (fs.existsSync(cacheDir)) {
      const cacheFiles = fs.readdirSync(cacheDir).filter(file => file.includes('token'));
      if (cacheFiles.length > 0) {
        console.log(`‚ö†Ô∏è Encontrados ${cacheFiles.length} arquivos de cache de token`);
        
        // Limpar cache antigo
        cacheFiles.forEach(file => {
          const filePath = path.join(cacheDir, file);
          const stats = fs.statSync(filePath);
          const ageInHours = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60);
          
          if (ageInHours > 24) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è Removido cache antigo: ${file}`);
          }
        });
      }
    }

    // Verificar configura√ß√£o de JWT
    const config = require('../config');
    if (!config.supabase.jwtSecret && !process.env.SUPABASE_JWT_SECRET) {
      console.log('‚ö†Ô∏è SUPABASE_JWT_SECRET n√£o configurado');
    } else {
      console.log('‚úÖ JWT Secret configurado');
    }

  } catch (error) {
    console.log(`‚ùå Erro ao verificar autentica√ß√£o: ${error.message}`);
  }
}

async function checkRequestOverload() {
  try {
    // Verificar se h√° muitas requisi√ß√µes simult√¢neas
    const logsPath = path.join(__dirname, '..', 'logs', 'combined.log');
    
    if (fs.existsSync(logsPath)) {
      const logContent = fs.readFileSync(logsPath, 'utf8');
      const lines = logContent.split('\n');
      
      // Contar requisi√ß√µes de perfil nos √∫ltimos 1000 logs
      const recentLines = lines.slice(-1000);
      const profileRequests = recentLines.filter(line => 
        line.includes('ensureUserProfile') || line.includes('requireAuth')
      ).length;
      
      console.log(`üìä Requisi√ß√µes de perfil nos √∫ltimos logs: ${profileRequests}`);
      
      if (profileRequests > 100) {
        console.log('‚ö†Ô∏è Alto volume de requisi√ß√µes de perfil detectado');
      } else {
        console.log('‚úÖ Volume de requisi√ß√µes normal');
      }
    }

  } catch (error) {
    console.log(`‚ùå Erro ao verificar sobrecarga: ${error.message}`);
  }
}

async function analyzeErrorLogs() {
  try {
    const errorLogPath = path.join(__dirname, '..', 'logs', 'error.log');
    
    if (fs.existsSync(errorLogPath)) {
      const errorContent = fs.readFileSync(errorLogPath, 'utf8');
      const lines = errorContent.split('\n');
      
      // Analisar erros mais comuns
      const createSessionErrors = lines.filter(line => 
        line.includes('createSession is not a function')
      ).length;
      
      const tokenErrors = lines.filter(line => 
        line.includes('Token expirado') || line.includes('Formato de token inv√°lido')
      ).length;
      
      const evolutionErrors = lines.filter(line => 
        line.includes('Request failed with status code 404')
      ).length;
      
      console.log(`üî¥ Erros de createSession: ${createSessionErrors}`);
      console.log(`üî¥ Erros de token: ${tokenErrors}`);
      console.log(`üî¥ Erros de Evolution API: ${evolutionErrors}`);
      
      if (createSessionErrors > 0) {
        console.log('üí° Solu√ß√£o: Atualizar vers√£o do Supabase ou usar m√©todo alternativo');
      }
      
      if (tokenErrors > 0) {
        console.log('üí° Solu√ß√£o: Implementar renova√ß√£o autom√°tica de tokens');
      }
      
      if (evolutionErrors > 0) {
        console.log('üí° Solu√ß√£o: Verificar conectividade com Evolution API');
      }
    }

  } catch (error) {
    console.log(`‚ùå Erro ao analisar logs: ${error.message}`);
  }
}

// Executar diagn√≥stico
if (require.main === module) {
  diagnoseTerminalErrors().catch(console.error);
}

module.exports = { diagnoseTerminalErrors }; 