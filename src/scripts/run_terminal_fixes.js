#!/usr/bin/env node

const { diagnoseTerminalErrors } = require('./diagnose_terminal_errors');
const { fixTerminalErrors } = require('./fix_terminal_errors');
const logger = require('../utils/logger');

/**
 * Script principal para diagnosticar e corrigir erros do terminal
 */
async function runTerminalFixes() {
  console.log('üöÄ Iniciando diagn√≥stico e corre√ß√£o dos erros do terminal...\n');

  try {
    // 1. Executar diagn√≥stico
    console.log('üìã === DIAGN√ìSTICO ===');
    await diagnoseTerminalErrors();

    console.log('\n' + '='.repeat(50) + '\n');

    // 2. Aplicar corre√ß√µes
    console.log('üîß === APLICANDO CORRE√á√ïES ===');
    await fixTerminalErrors();

    console.log('\n' + '='.repeat(50) + '\n');

    // 3. Verificar se o servidor est√° rodando
    console.log('üîç === VERIFICANDO SERVIDOR ===');
    await checkServerStatus();

    console.log('\n' + '='.repeat(50) + '\n');

    // 4. Executar diagn√≥stico final
    console.log('‚úÖ === DIAGN√ìSTICO FINAL ===');
    await diagnoseTerminalErrors();

    console.log('\nüéâ Processo conclu√≠do!');
    console.log('\nüìù Resumo das a√ß√µes:');
    console.log('   ‚úÖ Diagn√≥stico executado');
    console.log('   ‚úÖ Corre√ß√µes aplicadas');
    console.log('   ‚úÖ Middleware de renova√ß√£o de tokens implementado');
    console.log('   ‚úÖ Cache e logs limpos');
    console.log('   ‚úÖ Verifica√ß√µes de conectividade realizadas');

  } catch (error) {
    console.error('‚ùå Erro durante o processo:', error.message);
    logger.error('Erro no script de corre√ß√£o:', error);
    process.exit(1);
  }
}

async function checkServerStatus() {
  try {
    const axios = require('axios');
    
    // Verificar se o servidor est√° respondendo
    try {
      const response = await axios.get('http://localhost:3000/api/health', {
        timeout: 5000
      });
      
      if (response.status === 200) {
        console.log('‚úÖ Servidor est√° respondendo na porta 3000');
      } else {
        console.log('‚ö†Ô∏è Servidor respondeu com status inesperado:', response.status);
      }
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log('‚ùå Servidor n√£o est√° rodando na porta 3000');
        console.log('üí° Execute: npm run dev:all');
      } else {
        console.log('‚ö†Ô∏è Erro ao conectar com servidor:', error.message);
      }
    }

    // Verificar se o frontend est√° respondendo
    try {
      const response = await axios.get('http://localhost:5173', {
        timeout: 5000
      });
      
      if (response.status === 200) {
        console.log('‚úÖ Frontend est√° respondendo na porta 5173');
      } else {
        console.log('‚ö†Ô∏è Frontend respondeu com status inesperado:', response.status);
      }
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log('‚ùå Frontend n√£o est√° rodando na porta 5173');
        console.log('üí° Execute: npm run dev:all');
      } else {
        console.log('‚ö†Ô∏è Erro ao conectar com frontend:', error.message);
      }
    }

  } catch (error) {
    console.log('‚ùå Erro ao verificar status do servidor:', error.message);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runTerminalFixes().catch(console.error);
}

module.exports = { runTerminalFixes }; 

const { diagnoseTerminalErrors } = require('./diagnose_terminal_errors');
const { fixTerminalErrors } = require('./fix_terminal_errors');
const logger = require('../utils/logger');

/**
 * Script principal para diagnosticar e corrigir erros do terminal
 */
async function runTerminalFixes() {
  console.log('üöÄ Iniciando diagn√≥stico e corre√ß√£o dos erros do terminal...\n');

  try {
    // 1. Executar diagn√≥stico
    console.log('üìã === DIAGN√ìSTICO ===');
    await diagnoseTerminalErrors();

    console.log('\n' + '='.repeat(50) + '\n');

    // 2. Aplicar corre√ß√µes
    console.log('üîß === APLICANDO CORRE√á√ïES ===');
    await fixTerminalErrors();

    console.log('\n' + '='.repeat(50) + '\n');

    // 3. Verificar se o servidor est√° rodando
    console.log('üîç === VERIFICANDO SERVIDOR ===');
    await checkServerStatus();

    console.log('\n' + '='.repeat(50) + '\n');

    // 4. Executar diagn√≥stico final
    console.log('‚úÖ === DIAGN√ìSTICO FINAL ===');
    await diagnoseTerminalErrors();

    console.log('\nüéâ Processo conclu√≠do!');
    console.log('\nüìù Resumo das a√ß√µes:');
    console.log('   ‚úÖ Diagn√≥stico executado');
    console.log('   ‚úÖ Corre√ß√µes aplicadas');
    console.log('   ‚úÖ Middleware de renova√ß√£o de tokens implementado');
    console.log('   ‚úÖ Cache e logs limpos');
    console.log('   ‚úÖ Verifica√ß√µes de conectividade realizadas');

  } catch (error) {
    console.error('‚ùå Erro durante o processo:', error.message);
    logger.error('Erro no script de corre√ß√£o:', error);
    process.exit(1);
  }
}

async function checkServerStatus() {
  try {
    const axios = require('axios');
    
    // Verificar se o servidor est√° respondendo
    try {
      const response = await axios.get('http://localhost:3000/api/health', {
        timeout: 5000
      });
      
      if (response.status === 200) {
        console.log('‚úÖ Servidor est√° respondendo na porta 3000');
      } else {
        console.log('‚ö†Ô∏è Servidor respondeu com status inesperado:', response.status);
      }
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log('‚ùå Servidor n√£o est√° rodando na porta 3000');
        console.log('üí° Execute: npm run dev:all');
      } else {
        console.log('‚ö†Ô∏è Erro ao conectar com servidor:', error.message);
      }
    }

    // Verificar se o frontend est√° respondendo
    try {
      const response = await axios.get('http://localhost:5173', {
        timeout: 5000
      });
      
      if (response.status === 200) {
        console.log('‚úÖ Frontend est√° respondendo na porta 5173');
      } else {
        console.log('‚ö†Ô∏è Frontend respondeu com status inesperado:', response.status);
      }
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log('‚ùå Frontend n√£o est√° rodando na porta 5173');
        console.log('üí° Execute: npm run dev:all');
      } else {
        console.log('‚ö†Ô∏è Erro ao conectar com frontend:', error.message);
      }
    }

  } catch (error) {
    console.log('‚ùå Erro ao verificar status do servidor:', error.message);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runTerminalFixes().catch(console.error);
}

module.exports = { runTerminalFixes }; 