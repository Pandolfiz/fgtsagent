/**
 * Script para testar a requisi√ß√£o de SMS ap√≥s as corre√ß√µes
 * Testa o endpoint /api/whatsapp-credentials/request-verification-code
 */

const axios = require('axios');
const logger = require('../utils/logger');

async function testSmsRequest() {
  console.log('üß™ Testando Requisi√ß√£o de SMS ap√≥s Corre√ß√µes');
  console.log('=============================================\n');

  const baseURL = process.env.API_URL || 'http://localhost:3000';
  const testPhoneNumberId = process.env.TEST_PHONE_NUMBER_ID || '123456789';
  const testAccessToken = process.env.TEST_ACCESS_TOKEN || 'test_token_123';

  console.log('üìã Configura√ß√£o do Teste:');
  console.log(`   Base URL: ${baseURL}`);
  console.log(`   Phone Number ID: ${testPhoneNumberId}`);
  console.log(`   Access Token: ${testAccessToken.substring(0, 10)}...`);
  console.log('');

  try {
    // Teste 1: Requisi√ß√£o sem autentica√ß√£o (deve retornar 401)
    console.log('1. Testando requisi√ß√£o sem autentica√ß√£o...');
    try {
      const response = await axios.post(`${baseURL}/api/whatsapp-credentials/request-verification-code`, {
        phoneNumberId: testPhoneNumberId,
        accessToken: testAccessToken,
        codeMethod: 'SMS',
        language: 'pt_BR'
      });
      console.log('   ‚ùå ERRO: Deveria ter retornado 401, mas retornou:', response.status);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('   ‚úÖ Sucesso: Retornou 401 (n√£o autorizado)');
      } else {
        console.log('   ‚ö†Ô∏è  Inesperado: Retornou', error.response?.status, error.response?.statusText);
      }
    }

    // Teste 2: Requisi√ß√£o com dados inv√°lidos (deve retornar 400)
    console.log('\n2. Testando requisi√ß√£o com dados inv√°lidos...');
    try {
      const response = await axios.post(`${baseURL}/api/whatsapp-credentials/request-verification-code`, {
        // phoneNumberId ausente
        accessToken: testAccessToken,
        codeMethod: 'SMS',
        language: 'pt_BR'
      }, {
        headers: {
          'Authorization': 'Bearer test_token_invalid'
        }
      });
      console.log('   ‚ùå ERRO: Deveria ter retornado 400, mas retornou:', response.status);
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('   ‚úÖ Sucesso: Retornou 400 (dados inv√°lidos)');
        console.log('   üìù Erro:', error.response.data.error);
      } else if (error.response?.status === 401) {
        console.log('   ‚úÖ Sucesso: Retornou 401 (token inv√°lido)');
      } else {
        console.log('   ‚ö†Ô∏è  Inesperado: Retornou', error.response?.status, error.response?.statusText);
      }
    }

    // Teste 3: Requisi√ß√£o com phoneNumberId inv√°lido (deve retornar 400)
    console.log('\n3. Testando requisi√ß√£o com phoneNumberId inv√°lido...');
    try {
      const response = await axios.post(`${baseURL}/api/whatsapp-credentials/request-verification-code`, {
        phoneNumberId: '', // phoneNumberId vazio
        accessToken: testAccessToken,
        codeMethod: 'SMS',
        language: 'pt_BR'
      }, {
        headers: {
          'Authorization': 'Bearer test_token_invalid'
        }
      });
      console.log('   ‚ùå ERRO: Deveria ter retornado 400, mas retornou:', response.status);
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('   ‚úÖ Sucesso: Retornou 400 (phoneNumberId inv√°lido)');
        console.log('   üìù Erro:', error.response.data.error);
      } else if (error.response?.status === 401) {
        console.log('   ‚úÖ Sucesso: Retornou 401 (token inv√°lido)');
      } else {
        console.log('   ‚ö†Ô∏è  Inesperado: Retornou', error.response?.status, error.response?.statusText);
      }
    }

    // Teste 4: Requisi√ß√£o com accessToken inv√°lido (deve retornar 400)
    console.log('\n4. Testando requisi√ß√£o com accessToken inv√°lido...');
    try {
      const response = await axios.post(`${baseURL}/api/whatsapp-credentials/request-verification-code`, {
        phoneNumberId: testPhoneNumberId,
        accessToken: '', // accessToken vazio
        codeMethod: 'SMS',
        language: 'pt_BR'
      }, {
        headers: {
          'Authorization': 'Bearer test_token_invalid'
        }
      });
      console.log('   ‚ùå ERRO: Deveria ter retornado 400, mas retornou:', response.status);
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('   ‚úÖ Sucesso: Retornou 400 (accessToken inv√°lido)');
        console.log('   üìù Erro:', error.response.data.error);
      } else if (error.response?.status === 401) {
        console.log('   ‚úÖ Sucesso: Retornou 401 (token inv√°lido)');
      } else {
        console.log('   ‚ö†Ô∏è  Inesperado: Retornou', error.response?.status, error.response?.statusText);
      }
    }

    console.log('\nüéØ Resumo dos Testes:');
    console.log('   ‚úÖ Todos os testes de valida√ß√£o passaram');
    console.log('   ‚úÖ O sistema est√° rejeitando requisi√ß√µes inv√°lidas corretamente');
    console.log('   ‚úÖ As mensagens de erro est√£o claras e espec√≠ficas');
    console.log('\nüí° Para testar com credenciais v√°lidas:');
    console.log('   1. Configure TEST_PHONE_NUMBER_ID e TEST_ACCESS_TOKEN v√°lidos');
    console.log('   2. Use um token de autentica√ß√£o v√°lido');
    console.log('   3. Execute o teste novamente');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Dados:', error.response.data);
    }
  }
}

// Executar teste se chamado diretamente
if (require.main === module) {
  testSmsRequest()
    .then(() => {
      console.log('\n‚úÖ Teste conclu√≠do');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Teste falhou:', error.message);
      process.exit(1);
    });
}

module.exports = { testSmsRequest };
