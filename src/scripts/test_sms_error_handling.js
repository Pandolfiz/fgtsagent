const axios = require('axios');
const logger = require('../utils/logger');

/**
 * Script para testar o tratamento de erros da Meta API
 * Simula diferentes cen√°rios de erro para verificar se estamos capturando corretamente
 */

async function testMetaAPIErrorHandling() {
  console.log('üß™ Testando tratamento de erros da Meta API...\n');

  // Simular erro com campos error_user_title e error_user_msg
  const mockErrorResponse = {
    error: {
      message: "N√£o foi poss√≠vel enviar o c√≥digo",
      type: "OAuthException",
      code: 100,
      error_subcode: 2388004
    },
    error_user_title: "N√£o foi poss√≠vel enviar o c√≥digo",
    error_user_msg: "Tente novamente depois de um tempo."
  };

  console.log('üìã Resposta de erro simulada:');
  console.log(JSON.stringify(mockErrorResponse, null, 2));
  console.log('\n');

  // Testar extra√ß√£o dos campos
  const errorData = mockErrorResponse.error;
  const responseData = mockErrorResponse;
  
  const userTitle = responseData.error_user_title || errorData.error_user_title;
  const userMessage = responseData.error_user_msg || errorData.error_user_msg;
  const errorCode = errorData.code;
  const errorSubcode = errorData.error_subcode;

  console.log('üîç Campos extra√≠dos:');
  console.log(`- userTitle: ${userTitle}`);
  console.log(`- userMessage: ${userMessage}`);
  console.log(`- errorCode: ${errorCode}`);
  console.log(`- errorSubcode: ${errorSubcode}`);
  console.log('\n');

  // Simular diferentes cen√°rios de erro
  const testCases = [
    {
      name: 'C√≥digo j√° solicitado',
      code: 100,
      subcode: 2388004,
      expectedMessage: 'Tente novamente depois de um tempo.'
    },
    {
      name: 'N√∫mero n√£o pendente',
      code: 100,
      subcode: 2388005,
      expectedMessage: 'N√∫mero n√£o est√° pendente de verifica√ß√£o.'
    },
    {
      name: 'Erro gen√©rico',
      code: 100,
      subcode: 999999,
      expectedMessage: 'Tente novamente depois de um tempo.'
    }
  ];

  console.log('üß™ Testando cen√°rios de erro:\n');

  testCases.forEach(testCase => {
    console.log(`üìù ${testCase.name}:`);
    console.log(`   - C√≥digo: ${testCase.code}`);
    console.log(`   - Subc√≥digo: ${testCase.subcode}`);
    console.log(`   - Mensagem esperada: ${testCase.expectedMessage}`);
    
    // Simular l√≥gica de tratamento
    if (testCase.code === 100 && testCase.subcode === 2388004) {
      console.log(`   ‚úÖ Tratado como: C√≥digo j√° solicitado`);
    } else if (testCase.code === 100 && testCase.subcode === 2388005) {
      console.log(`   ‚úÖ Tratado como: N√∫mero n√£o pendente`);
    } else {
      console.log(`   ‚úÖ Tratado como: Erro gen√©rico da Meta`);
    }
    console.log('');
  });

  // Testar estrutura de resposta de erro
  const errorResponse = {
    success: false,
    error: userMessage || 'Erro ao solicitar c√≥digo de verifica√ß√£o',
    userTitle: userTitle || 'Erro na solicita√ß√£o',
    code: 'META_API_ERROR',
    metaCode: errorCode,
    metaSubcode: errorSubcode,
    details: errorData
  };

  console.log('üì§ Estrutura de resposta de erro:');
  console.log(JSON.stringify(errorResponse, null, 2));
  console.log('\n');

  // Testar exibi√ß√£o no frontend
  console.log('üñ•Ô∏è Como seria exibido no frontend:');
  let displayMessage = errorResponse.error || 'Erro desconhecido';
  
  if (errorResponse.userTitle) {
    displayMessage = `${errorResponse.userTitle}: ${errorResponse.error}`;
  }
  
  if (errorResponse.metaCode || errorResponse.metaSubcode) {
    displayMessage += `\n\nC√≥digo Meta: ${errorResponse.metaCode}${errorResponse.metaSubcode ? ` (${errorResponse.metaSubcode})` : ''}`;
  }
  
  console.log(displayMessage);
  console.log('\n');

  console.log('‚úÖ Teste conclu√≠do!');
}

// Executar teste
testMetaAPIErrorHandling().catch(console.error); 