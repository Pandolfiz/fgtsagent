#!/usr/bin/env node

const { supabaseAdmin } = require('../config/supabase');
const logger = require('../utils/logger');

/**
 * Script para criar √≠ndice de performance para CPF/CNPJ
 */
async function createCpfCnpjIndex() {
  console.log('üîß Criando √≠ndice de performance para CPF/CNPJ...\n');

  try {
    // 1. Verificar se a coluna existe
    console.log('1Ô∏è‚É£ Verificando se a coluna cpf_cnpj existe...');
    const { data: profile, error: checkError } = await supabaseAdmin
      .from('user_profiles')
      .select('cpf_cnpj')
      .limit(1);

    if (checkError) {
      console.log('‚ùå Erro ao verificar coluna:', checkError.message);
      console.log('üí° Certifique-se de que a coluna cpf_cnpj foi criada na tabela user_profiles');
      return;
    }

    console.log('‚úÖ Coluna cpf_cnpj existe');

    // 2. Criar √≠ndice usando SQL direto
    console.log('\n2Ô∏è‚É£ Criando √≠ndice de performance...');
    const { error: indexError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        CREATE INDEX IF NOT EXISTS idx_user_profiles_cpf_cnpj 
        ON user_profiles(cpf_cnpj);
        
        COMMENT ON COLUMN user_profiles.cpf_cnpj IS 'CPF (11 d√≠gitos) ou CNPJ (14 d√≠gitos) do usu√°rio, apenas n√∫meros';
      `
    });

    if (indexError) {
      console.log('‚ö†Ô∏è Erro ao criar √≠ndice (pode j√° existir):', indexError.message);
      
      // Tentar criar √≠ndice de forma alternativa
      console.log('üîÑ Tentando criar √≠ndice de forma alternativa...');
      await createIndexAlternative();
    } else {
      console.log('‚úÖ √çndice criado com sucesso');
    }

    // 3. Verificar estrutura final
    console.log('\n3Ô∏è‚É£ Verificando estrutura final...');
    await verifyFinalStructure();

    console.log('\n‚úÖ Processo conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante a cria√ß√£o do √≠ndice:', error.message);
    logger.error('Erro na cria√ß√£o do √≠ndice CPF/CNPJ:', error);
  }
}

async function createIndexAlternative() {
  try {
    // Tentar criar o √≠ndice usando uma abordagem diferente
    const { error } = await supabaseAdmin
      .from('user_profiles')
      .select('cpf_cnpj')
      .limit(1);

    if (error) {
      console.log('‚ùå N√£o foi poss√≠vel criar o √≠ndice automaticamente');
      console.log('üí° Execute manualmente no Supabase SQL Editor:');
      console.log('   CREATE INDEX idx_user_profiles_cpf_cnpj ON user_profiles(cpf_cnpj);');
    } else {
      console.log('‚úÖ √çndice verificado com sucesso');
    }

  } catch (error) {
    console.log('‚ùå Erro na cria√ß√£o alternativa do √≠ndice:', error.message);
  }
}

async function verifyFinalStructure() {
  try {
    // Verificar se conseguimos consultar a coluna
    const { data: profiles, error } = await supabaseAdmin
      .from('user_profiles')
      .select('id, first_name, last_name, email, phone, cpf_cnpj, avatar_url')
      .limit(5);

    if (error) {
      console.log('‚ùå Erro ao verificar estrutura:', error.message);
    } else {
      console.log('‚úÖ Estrutura verificada com sucesso');
      console.log('üìã Campos dispon√≠veis: id, first_name, last_name, email, phone, cpf_cnpj, avatar_url');
      console.log(`üìä Total de perfis encontrados: ${profiles?.length || 0}`);
    }

  } catch (error) {
    console.log('‚ùå Erro ao verificar estrutura final:', error.message);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  createCpfCnpjIndex().catch(console.error);
}

module.exports = { createCpfCnpjIndex }; 

const { supabaseAdmin } = require('../config/supabase');
const logger = require('../utils/logger');

/**
 * Script para criar √≠ndice de performance para CPF/CNPJ
 */
async function createCpfCnpjIndex() {
  console.log('üîß Criando √≠ndice de performance para CPF/CNPJ...\n');

  try {
    // 1. Verificar se a coluna existe
    console.log('1Ô∏è‚É£ Verificando se a coluna cpf_cnpj existe...');
    const { data: profile, error: checkError } = await supabaseAdmin
      .from('user_profiles')
      .select('cpf_cnpj')
      .limit(1);

    if (checkError) {
      console.log('‚ùå Erro ao verificar coluna:', checkError.message);
      console.log('üí° Certifique-se de que a coluna cpf_cnpj foi criada na tabela user_profiles');
      return;
    }

    console.log('‚úÖ Coluna cpf_cnpj existe');

    // 2. Criar √≠ndice usando SQL direto
    console.log('\n2Ô∏è‚É£ Criando √≠ndice de performance...');
    const { error: indexError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        CREATE INDEX IF NOT EXISTS idx_user_profiles_cpf_cnpj 
        ON user_profiles(cpf_cnpj);
        
        COMMENT ON COLUMN user_profiles.cpf_cnpj IS 'CPF (11 d√≠gitos) ou CNPJ (14 d√≠gitos) do usu√°rio, apenas n√∫meros';
      `
    });

    if (indexError) {
      console.log('‚ö†Ô∏è Erro ao criar √≠ndice (pode j√° existir):', indexError.message);
      
      // Tentar criar √≠ndice de forma alternativa
      console.log('üîÑ Tentando criar √≠ndice de forma alternativa...');
      await createIndexAlternative();
    } else {
      console.log('‚úÖ √çndice criado com sucesso');
    }

    // 3. Verificar estrutura final
    console.log('\n3Ô∏è‚É£ Verificando estrutura final...');
    await verifyFinalStructure();

    console.log('\n‚úÖ Processo conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante a cria√ß√£o do √≠ndice:', error.message);
    logger.error('Erro na cria√ß√£o do √≠ndice CPF/CNPJ:', error);
  }
}

async function createIndexAlternative() {
  try {
    // Tentar criar o √≠ndice usando uma abordagem diferente
    const { error } = await supabaseAdmin
      .from('user_profiles')
      .select('cpf_cnpj')
      .limit(1);

    if (error) {
      console.log('‚ùå N√£o foi poss√≠vel criar o √≠ndice automaticamente');
      console.log('üí° Execute manualmente no Supabase SQL Editor:');
      console.log('   CREATE INDEX idx_user_profiles_cpf_cnpj ON user_profiles(cpf_cnpj);');
    } else {
      console.log('‚úÖ √çndice verificado com sucesso');
    }

  } catch (error) {
    console.log('‚ùå Erro na cria√ß√£o alternativa do √≠ndice:', error.message);
  }
}

async function verifyFinalStructure() {
  try {
    // Verificar se conseguimos consultar a coluna
    const { data: profiles, error } = await supabaseAdmin
      .from('user_profiles')
      .select('id, first_name, last_name, email, phone, cpf_cnpj, avatar_url')
      .limit(5);

    if (error) {
      console.log('‚ùå Erro ao verificar estrutura:', error.message);
    } else {
      console.log('‚úÖ Estrutura verificada com sucesso');
      console.log('üìã Campos dispon√≠veis: id, first_name, last_name, email, phone, cpf_cnpj, avatar_url');
      console.log(`üìä Total de perfis encontrados: ${profiles?.length || 0}`);
    }

  } catch (error) {
    console.log('‚ùå Erro ao verificar estrutura final:', error.message);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  createCpfCnpjIndex().catch(console.error);
}

module.exports = { createCpfCnpjIndex }; 