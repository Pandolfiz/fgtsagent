// Carregar vari√°veis de ambiente do arquivo .env no diret√≥rio src/
require('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });

// Validar se a chave do Stripe est√° dispon√≠vel
if (!process.env.STRIPE_SECRET_KEY) {
  throw new Error('STRIPE_SECRET_KEY n√£o est√° configurada no arquivo .env do diret√≥rio src/');
}

const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const logger = require('../utils/logger');
const stripeProductService = require('./stripeProductService');

// ‚úÖ CONFIGURA√á√ÉO DIN√ÇMICA - SEM HARDCODING
// Os produtos e pre√ßos s√£o buscados dinamicamente do Stripe
const getPlanConfig = async (planType, interval = 'monthly') => {
  try {
    const price = await stripeProductService.getPriceByPlanAndInterval(planType, interval);
    
    return {
      name: `${planType.charAt(0).toUpperCase() + planType.slice(1)}`,
      description: `Plano ${planType} com funcionalidades ${planType === 'basic' ? 'essenciais' : planType === 'pro' ? 'avan√ßadas' : 'completas'}`,
      priceId: price.id,
      amount: price.amount,
      currency: price.currency,
      interval: price.interval
    };
  } catch (error) {
    console.error(`‚ùå Erro ao buscar configura√ß√£o do plano ${planType}:`, error);
    throw error;
  }
};

class StripeService {
  /**
   * Cria um cliente no Stripe
   */
  async createCustomer(email, name, metadata = {}) {
    try {
      const customer = await stripe.customers.create({
        email,
        name,
        metadata: {
          source: 'fgts_agent',
          ...metadata
        }
      });

      logger.info(`Cliente Stripe criado: ${customer.id} para ${email}`);
      return customer;
    } catch (error) {
      logger.error('Erro ao criar cliente no Stripe:', error);
      throw new Error(`Falha ao criar cliente: ${error.message}`);
    }
  }

  /**
   * Cria um link de pagamento para um plano espec√≠fico
   */
  async createPaymentLink(planType, customerEmail, metadata = {}) {
    try {
      // ‚úÖ BUSCAR CONFIGURA√á√ÉO DINAMICAMENTE DO STRIPE (mensal como padr√£o)
      const defaultPrice = await getPlanConfig(planType, 'monthly');
      if (!defaultPrice) {
        throw new Error(`Configura√ß√£o n√£o encontrada para o plano ${planType}`);
      }

      const paymentLink = await stripe.paymentLinks.create({
        line_items: [{
          price: defaultPrice.priceId,
          quantity: 1,
        }],
        customer_creation: 'always',
        metadata: {
          plan: planType,
          customerEmail,
          ...metadata
        },
        after_completion: {
          type: 'redirect',
          redirect: {
            url: this.getSuccessUrl(planType)
          }
        }
      });

      logger.info(`Link de pagamento criado: ${paymentLink.id} para plano ${planType}`);
      return paymentLink;
    } catch (error) {
      logger.error('Erro ao criar link de pagamento:', error);
      throw new Error(`Falha ao criar link de pagamento: ${error.message}`);
    }
  }

  /**
   * Cria um Payment Intent para checkout nativo
   */
  async createPaymentIntent(planType, customerEmail, metadata = {}, interval = 'monthly') {
    try {
      // ‚úÖ BUSCAR CONFIGURA√á√ÉO DINAMICAMENTE DO STRIPE
      const priceConfig = await getPlanConfig(planType, interval);
      if (!priceConfig) {
        throw new Error(`Configura√ß√£o n√£o encontrada para o plano ${planType} - ${interval}`);
      }

      // ‚úÖ VERIFICAR: Se o pre√ßo existe no Stripe
      try {
        console.log('üîç Verificando se o pre√ßo existe no Stripe:', priceConfig.priceId);
        const price = await stripe.prices.retrieve(priceConfig.priceId);
        console.log('‚úÖ Pre√ßo encontrado no Stripe:', {
          id: price.id,
          active: price.active,
          type: price.type,
          recurring: price.recurring,
          unit_amount: price.unit_amount,
          currency: price.currency
        });
        
        // ‚úÖ VERIFICAR: Se o pre√ßo √© recorrente
        if (price.type !== 'recurring') {
          throw new Error(`Pre√ßo ${priceConfig.priceId} n√£o √© recorrente`);
        }
        
        // ‚úÖ VERIFICAR: Se o pre√ßo est√° ativo
        if (!price.active) {
          throw new Error(`Pre√ßo ${priceConfig.priceId} n√£o est√° ativo`);
        }
        
      } catch (error) {
        console.error('‚ùå Erro ao verificar pre√ßo no Stripe:', error);
        throw new Error(`Erro ao verificar pre√ßo ${priceConfig.priceId}: ${error.message}`);
      }

      // ‚úÖ CONFIGURA√á√ÉO LIMPA: Apenas par√¢metros v√°lidos e necess√°rios
      const paymentIntentData = {
        amount: priceConfig.amount,
        currency: 'brl',
        capture_method: 'automatic',
        metadata: {
          plan: planType,
          interval: interval,
          customerEmail,
          source: 'web_checkout',
          user_agent: 'fgtsagent_web',
          ...metadata
        },
        description: `Assinatura ${planType} - ${interval}`,
        receipt_email: customerEmail
        // ‚úÖ NOTA: confirm e return_url ser√£o configurados na confirma√ß√£o
        // quando o frontend enviar o PaymentMethod ID real
      };

      console.log('üîç Criando PaymentIntent com configura√ß√£o anti-fraude:', paymentIntentData);

      const paymentIntent = await stripe.paymentIntents.create(paymentIntentData);

      logger.info(`Payment Intent criado: ${paymentIntent.id} para plano ${planType} (${interval})`);
      
      return {
        id: paymentIntent.id,
        client_secret: paymentIntent.client_secret,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency,
        status: paymentIntent.status,
        requiresAction: paymentIntent.status === 'requires_action',
        // ‚úÖ CORRE√á√ÉO: nextAction s√≥ deve existir quando h√° a√ß√£o pendente
        nextAction: paymentIntent.status === 'requires_action' ? paymentIntent.next_action : null
      };
    } catch (error) {
      logger.error('Erro ao criar Payment Intent:', error);
      throw new Error(`Falha ao criar Payment Intent: ${error.message}`);
    }
  }

  /**
   * Cria um PaymentIntent para checkout nativo (sem confirmar)
   * Ideal para confirmCardPayment no frontend
   */
  async createPaymentIntentOnly(planType, customerEmail, metadata = {}, interval = 'monthly') {
    try {
      // ‚úÖ BUSCAR CONFIGURA√á√ÉO DINAMICAMENTE DO STRIPE
      const priceConfig = await getPlanConfig(planType, interval);
      if (!priceConfig) {
        throw new Error(`Configura√ß√£o n√£o encontrada para o plano ${planType} - ${interval}`);
      }

      // ‚úÖ CONFIGURA√á√ÉO PARA CHECKOUT NATIVO: Sem confirm, apenas criar
      const paymentIntentData = {
        amount: priceConfig.amount,
        currency: 'brl',
        capture_method: 'automatic',
        metadata: {
          plan: planType,
          interval: interval,
          customerEmail,
          source: 'signup_native', // ‚úÖ IDENTIFICADOR: Checkout nativo
          user_agent: 'fgtsagent_native',
          ...metadata
        },
        description: `Assinatura ${planType} - ${interval} (Checkout Nativo)`,
        receipt_email: customerEmail
        // ‚úÖ NOTA: N√£o incluir confirm ou return_url - ser√° confirmado via confirmCardPayment
      };

      console.log('üîç Criando PaymentIntent para checkout nativo:', paymentIntentData);

      const paymentIntent = await stripe.paymentIntents.create(paymentIntentData);

      logger.info(`Payment Intent nativo criado: ${paymentIntent.id} para plano ${planType} (${interval})`);
      
      return {
        id: paymentIntent.id,
        client_secret: paymentIntent.client_secret,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency,
        status: paymentIntent.status,
        requiresAction: paymentIntent.status === 'requires_action',
        // ‚úÖ CORRE√á√ÉO: nextAction s√≥ deve existir quando h√° a√ß√£o pendente
        nextAction: paymentIntent.status === 'requires_action' ? paymentIntent.next_action : null
      };
    } catch (error) {
      logger.error('Erro ao criar Payment Intent nativo:', error);
      throw new Error(`Falha ao criar Payment Intent nativo: ${error.message}`);
    }
  }

  /**
   * Captura um Payment Intent confirmado
   */
  async capturePaymentIntent(paymentIntentId) {
    try {
      const paymentIntent = await stripe.paymentIntents.capture(paymentIntentId);
      
      logger.info(`Payment Intent capturado: ${paymentIntent.id}`);
      
      return {
        id: paymentIntent.id,
        status: paymentIntent.status,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency,
        customer_email: paymentIntent.customer_email,
        metadata: paymentIntent.metadata
      };
    } catch (error) {
      logger.error('Erro ao capturar Payment Intent:', error);
      throw new Error(`Falha ao capturar pagamento: ${error.message}`);
    }
  }

  /**
   * Obt√©m detalhes de um Payment Intent
   */
  async getPaymentIntent(paymentIntentId) {
    try {
      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);
      
      // ‚úÖ ENRIQUECER: Dados com informa√ß√µes √∫teis para o frontend
      return {
        id: paymentIntent.id,
        status: paymentIntent.status,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency,
        customerEmail: paymentIntent.customer_email || paymentIntent.receipt_email,
        metadata: paymentIntent.metadata,
        client_secret: paymentIntent.client_secret,
        // ‚úÖ DADOS ADICIONAIS: Para melhor experi√™ncia do usu√°rio
        created: paymentIntent.created,
        last_payment_error: paymentIntent.last_payment_error,
        next_action: paymentIntent.next_action,
        payment_method: paymentIntent.payment_method,
        // ‚úÖ METADADOS ENRIQUECIDOS: Garantir que todos os campos estejam dispon√≠veis
        planType: paymentIntent.metadata?.planType || paymentIntent.metadata?.plan || 'basic',
        interval: paymentIntent.metadata?.interval || 'monthly',
        firstName: paymentIntent.metadata?.firstName || paymentIntent.metadata?.first_name || '',
        lastName: paymentIntent.metadata?.lastName || paymentIntent.metadata?.last_name || '',
        fullName: paymentIntent.metadata?.fullName || paymentIntent.metadata?.full_name || '',
        phone: paymentIntent.metadata?.phone || ''
      };
    } catch (error) {
      logger.error('Erro ao obter Payment Intent:', error);
      throw new Error(`Falha ao obter pagamento: ${error.message}`);
    }
  }

  /**
   * Cria uma sess√£o de checkout no Stripe
   */
  async createCheckoutSession(planType, customerEmail, successUrl, cancelUrl, metadata = {}, interval = 'monthly', usePopup = false) {
    try {
      // ‚úÖ VALIDA√á√ÉO B√ÅSICA
      if (!customerEmail || !successUrl || !cancelUrl) {
        throw new Error('Email, successUrl e cancelUrl s√£o obrigat√≥rios');
      }

      // ‚úÖ BUSCAR CONFIGURA√á√ÉO DINAMICAMENTE DO STRIPE
      const priceConfig = await getPlanConfig(planType, interval);
      if (!priceConfig) {
        throw new Error(`Configura√ß√£o n√£o encontrada para o plano ${planType} - ${interval}`);
      }

      console.log('üìã Criando Checkout Session com 3DS:', { planType, interval, priceId: priceConfig.priceId });

      // ‚úÖ CONFIGURA√á√ÉO OFICIALMENTE SUPORTADA PELA STRIPE
      const sessionConfig = {
        payment_method_types: ['card'],
        customer_email: customerEmail,
        locale: 'pt-BR',
        mode: 'subscription',
        line_items: [{
          price: priceConfig.priceId,
          quantity: 1,
        }],
        subscription_data: {
          trial_period_days: 7, // ‚úÖ FREE TRIAL DE 7 DIAS
          trial_settings: {
            end_behavior: {
              missing_payment_method: 'cancel' // ‚úÖ CANCELAR se n√£o houver m√©todo de pagamento
            }
          },
          metadata: {
            plan: planType,
            interval: interval,
            customerEmail: customerEmail
          }
        },
        // ‚úÖ NOVO: CONFIGURA√á√ÉO 3DS AUTOM√ÅTICA (OFICIALMENTE SUPORTADA)
        payment_method_options: {
          card: {
            request_three_d_secure: 'automatic' // ‚úÖ 3DS AUTOM√ÅTICO para m√°xima seguran√ßa
          }
        },
        success_url: successUrl,
        cancel_url: cancelUrl,
        billing_address_collection: 'required', // ‚úÖ COLETAR endere√ßo para 3DS
        allow_promotion_codes: true,
        metadata: {
          plan: planType,
          interval: interval,
          customerEmail: customerEmail,
          ...metadata
        }
      };

      console.log('üîß Configura√ß√£o da sess√£o com 3DS:', sessionConfig);

      // ‚úÖ CRIAR SESS√ÉO
      const session = await stripe.checkout.sessions.create(sessionConfig);

      console.log('‚úÖ Sess√£o criada com 3DS:', {
        id: session.id,
        url: session.url ? 'PRESENTE' : 'AUSENTE',
        mode: session.mode,
        has3DS: !!sessionConfig.payment_method_options?.card?.request_three_d_secure,
        trialPeriod: sessionConfig.subscription_data.trial_period_days
      });

      // ‚úÖ VERIFICAR URL
      if (!session.url) {
        throw new Error('Sess√£o criada sem URL de checkout');
      }

      // ‚úÖ RETORNAR
      return {
        sessionId: session.id,
        url: session.url,
        subscription: session.subscription,
        mode: session.mode,
        paymentStatus: session.payment_status,
        customerEmail: session.customer_email
      };

    } catch (error) {
      logger.error('Erro ao criar sess√£o de checkout com 3DS:', error);
      throw new Error(`Falha ao criar sess√£o com 3DS: ${error.message}`);
    }
  }

  /**
   * Verifica o status de um pagamento
   */
  async getPaymentStatus(sessionId) {
    try {
      const session = await stripe.checkout.sessions.retrieve(sessionId);
      
      // ‚úÖ ENRIQUECER: Dados com informa√ß√µes √∫teis para o frontend
      return {
        status: session.payment_status,
        customerEmail: session.customer_email,
        metadata: session.metadata,
        paymentIntent: session.payment_intent,
        // ‚úÖ DADOS ADICIONAIS: Para melhor experi√™ncia do usu√°rio
        id: session.id,
        amount: session.amount_total,
        currency: session.currency,
        created: session.created,
        // ‚úÖ METADADOS ENRIQUECIDOS: Garantir que todos os campos estejam dispon√≠veis
        planType: session.metadata?.planType || session.metadata?.plan || 'basic',
        interval: session.metadata?.interval || 'monthly',
        firstName: session.metadata?.firstName || session.metadata?.first_name || '',
        lastName: session.metadata?.lastName || session.metadata?.last_name || '',
        fullName: session.metadata?.fullName || session.metadata?.full_name || '',
        phone: session.metadata?.phone || ''
      };
    } catch (error) {
      logger.error('Erro ao verificar status do pagamento:', error);
      throw new Error(`Falha ao verificar pagamento: ${error.message}`);
    }
  }

  /**
   * Processa webhook do Stripe
   */
  async processWebhook(body, signature) {
    try {
      const event = stripe.webhooks.constructEvent(
        body,
        signature,
        process.env.STRIPE_WEBHOOK_SECRET
      );

      logger.info(`Webhook recebido: ${event.type}`);

      switch (event.type) {
        case 'checkout.session.completed':
          await this.handleCheckoutCompleted(event.data.object);
          break;
        case 'payment_intent.succeeded':
          await this.handlePaymentSucceeded(event.data.object);
          break;
        case 'payment_intent.payment_failed':
          await this.handlePaymentFailed(event.data.object);
          break;
        case 'payment_intent.requires_action':
          await this.handlePaymentRequiresAction(event.data.object);
          break;
        case 'payment_intent.processing':
          await this.handlePaymentProcessing(event.data.object);
          break;
        case 'customer.subscription.created':
          await this.handleSubscriptionCreated(event.data.object);
          break;
        case 'customer.subscription.updated':
          await this.handleSubscriptionUpdated(event.data.object);
          break;
        case 'customer.subscription.deleted':
          await this.handleSubscriptionDeleted(event.data.object);
          break;
        case 'invoice.payment_succeeded':
          await this.handleInvoicePaymentSucceeded(event.data.object);
          break;
        case 'invoice.payment_failed':
          await this.handleInvoicePaymentFailed(event.data.object);
          break;
        case 'customer.created':
          await this.handleCustomerCreated(event.data.object);
          break;
        case 'setup_intent.succeeded':
          await this.handleSetupIntentSucceeded(event.data.object);
          break;
        default:
          logger.info(`Evento n√£o tratado: ${event.type}`);
      }

      return { received: true };
    } catch (error) {
      logger.error('Erro ao processar webhook:', error);
      throw new Error(`Falha no webhook: ${error.message}`);
    }
  }

  /**
   * Trata checkout completado
   */
  async handleCheckoutCompleted(session) {
    try {
      logger.info(`Checkout completado: ${session.id}`);
      
      // ‚úÖ EXTRAIR: Dados da sess√£o de checkout
      const metadata = session.metadata;
      const customerEmail = session.customer_email;
      const planType = metadata.plan;
      const source = metadata.source;
      const userName = metadata.userName;
      const mode = metadata.mode;
      
      // ‚úÖ DADOS COMPLETOS: Extrair dados do usu√°rio dos metadados
      let userFirstName = '';
      let userLastName = '';
      let userPhone = '';
      let userPassword = '';
      
      if (metadata.signupData) {
        try {
          const signupData = JSON.parse(metadata.signupData);
          userFirstName = signupData.firstName || '';
          userLastName = signupData.lastName || '';
          userPhone = signupData.phone || '';
          userPassword = signupData.password || '';
        } catch (parseError) {
          logger.error('Erro ao fazer parse dos dados de signup:', parseError);
        }
      }
      
      // ‚úÖ DEBUG: Verificar dados extra√≠dos
      console.log('üîç [WEBHOOK CHECKOUT] Dados extra√≠dos da sess√£o:', {
        sessionId: session.id,
        customerEmail,
        planType,
        source,
        mode,
        hasSignupData: !!metadata.signupData,
        firstName: userFirstName,
        lastName: userLastName,
        phone: userPhone,
        hasPassword: !!userPassword,
        passwordLength: userPassword ? userPassword.length : 0
      });
      
      // ‚úÖ VERIFICAR: Se √© um signup (n√£o apenas upgrade de plano)
      if (mode === 'signup' && source === 'signup_with_plans' && customerEmail && planType) {
        try {
          logger.info(`[WEBHOOK CHECKOUT] Criando usu√°rio ap√≥s checkout confirmado: ${customerEmail}`);
          
          // ‚úÖ CRIAR: Usu√°rio no Supabase AP√ìS confirma√ß√£o do checkout
          const { supabaseAdmin } = require('../config/supabase');
          
          // ‚úÖ VERIFICAR: Se usu√°rio j√° existe (evitar duplica√ß√£o)
          const { data: existingUsers, error: listError } = await supabaseAdmin.auth.admin.listUsers();
          
          if (listError) {
            logger.error(`[WEBHOOK CHECKOUT] Erro ao verificar usu√°rios existentes: ${listError.message}`);
            return false;
          }
          
          const existingUser = existingUsers.users.find(u => u.email === customerEmail);
          
          if (existingUser) {
            logger.info(`[WEBHOOK CHECKOUT] Usu√°rio j√° existe: ${customerEmail}`);
            return true;
          }
          
          // ‚úÖ CRIAR: Novo usu√°rio no Supabase
          const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
            email: customerEmail,
            password: userPassword,
            email_confirm: true,
            user_metadata: {
              firstName: userFirstName,
              lastName: userLastName,
              phone: userPhone,
              planType: planType,
              source: source,
              stripeCustomerId: session.customer
            }
          });
          
          if (createError) {
            logger.error(`[WEBHOOK CHECKOUT] Erro ao criar usu√°rio: ${createError.message}`);
            return false;
          }
          
          logger.info(`[WEBHOOK CHECKOUT] Usu√°rio criado com sucesso: ${newUser.user.id}`);
          
          // ‚úÖ CRIAR: Perfil do usu√°rio na tabela user_profiles
          const { error: profileError } = await supabaseAdmin
            .from('user_profiles')
            .insert({
              id: newUser.user.id,
              first_name: userFirstName,
              last_name: userLastName,
              phone: userPhone,
              plan_type: planType,
              subscription_status: 'trial',
              trial_ends_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 dias
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
          
          if (profileError) {
            logger.error(`[WEBHOOK CHECKOUT] Erro ao criar perfil: ${profileError.message}`);
            return false;
          }
          
          logger.info(`[WEBHOOK CHECKOUT] Perfil criado com sucesso para usu√°rio: ${newUser.user.id}`);
          
          return true;
          
        } catch (userError) {
          logger.error(`[WEBHOOK CHECKOUT] Erro ao processar cria√ß√£o de usu√°rio: ${userError.message}`);
          return false;
        }
      } else {
        logger.info(`[WEBHOOK CHECKOUT] N√£o √© signup ou dados insuficientes:`, {
          mode,
          source,
          hasEmail: !!customerEmail,
          hasPlan: !!planType
        });
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar checkout completado:', error);
      throw error;
    }
  }

  /**
   * Trata pagamento bem-sucedido
   */
  async handlePaymentSucceeded(paymentIntent) {
    try {
      logger.info(`Pagamento bem-sucedido: ${paymentIntent.id}`);
      
      // ‚úÖ NOVA L√ìGICA: Criar usu√°rio AP√ìS confirma√ß√£o do pagamento
      const metadata = paymentIntent.metadata;
      const customerEmail = metadata.customerEmail;
      const planType = metadata.plan;
      const source = metadata.source;
      const userName = metadata.userName;
      
      // ‚úÖ DADOS COMPLETOS: Extrair todos os dados do usu√°rio dos metadados
      const userFirstName = metadata.firstName || userName?.split(' ')[0] || '';
      const userLastName = metadata.lastName || userName?.split(' ').slice(1).join(' ') || '';
      const userPhone = metadata.phone || '';
      const userPassword = metadata.password || ''; // Senha do formul√°rio
      const userFullName = metadata.fullName || userName || `${userFirstName} ${userLastName}`.trim();
      
      // ‚úÖ DEBUG: Verificar se a senha est√° sendo extra√≠da corretamente
      console.log('üîç [WEBHOOK] Extra√ß√£o de dados dos metadados:', {
        metadataKeys: Object.keys(metadata),
        metadataValues: Object.entries(metadata).map(([key, value]) => ({
          key,
          hasValue: !!value,
          valueLength: typeof value === 'string' ? value.length : 'N/A',
          valueType: typeof value
        })),
        hasPassword: !!userPassword,
        passwordLength: userPassword ? userPassword.length : 0,
        passwordPreview: userPassword ? `${userPassword.substring(0, 3)}***` : 'n√£o definida',
        firstName: userFirstName,
        lastName: userLastName,
        phone: userPhone,
        fullName: userFullName
      });
      
      logger.info(`[WEBHOOK] Processando pagamento bem-sucedido:`, {
        paymentIntentId: paymentIntent.id,
        customerEmail,
        planType,
        source,
        userName,
        firstName: userFirstName,
        lastName: userLastName,
        phone: userPhone,
        hasPassword: !!userPassword,
        passwordLength: userPassword ? userPassword.length : 0,
        amount: paymentIntent.amount,
        timestamp: new Date().toISOString()
      });
      
      // ‚úÖ VERIFICAR: Se √© um signup (n√£o apenas upgrade de plano)
      if ((source === 'signup' || source === 'signup_with_plans') && customerEmail && planType) {
        try {
          logger.info(`[WEBHOOK] Criando usu√°rio ap√≥s pagamento confirmado: ${customerEmail}`);
          logger.info(`[WEBHOOK] Dados do usu√°rio:`, {
            email: customerEmail,
            hasPassword: !!userPassword,
            passwordLength: userPassword ? userPassword.length : 0,
            passwordPreview: userPassword ? `${userPassword.substring(0, 3)}***` : 'n√£o definida',
            firstName: userFirstName,
            lastName: userLastName,
            planType: planType
          });
          
          // ‚úÖ CRIAR: Usu√°rio no Supabase AP√ìS confirma√ß√£o do pagamento
          const { supabaseAdmin } = require('../config/supabase');
          
          // ‚úÖ VERIFICAR: Se usu√°rio j√° existe (evitar duplica√ß√£o)
          const { data: existingUsers, error: listError } = await supabaseAdmin.auth.admin.listUsers();
          
          if (listError) {
            logger.error(`[WEBHOOK] Erro ao verificar usu√°rios existentes: ${listError.message}`);
            return false;
          }
          
          const existingUser = existingUsers.users.find(u => u.email === customerEmail);
          
          if (existingUser) {
            logger.info(`[WEBHOOK] Usu√°rio j√° existe: ${existingUser.id}, ativando plano`);
            
            // ‚úÖ ATUALIZAR: Usu√°rio existente com plano ativo
            await supabaseAdmin.auth.admin.updateUserById(existingUser.id, {
              user_metadata: {
                ...existingUser.user_metadata,
                planType: planType,
                planActivated: true,
                paymentConfirmed: true,
                lastPayment: new Date().toISOString(),
                paymentIntentId: paymentIntent.id
              }
            });
            
            // ‚úÖ CRIAR: Assinatura ativa
            await this.createActiveSubscription(existingUser.id, planType, paymentIntent.id);
            
          } else {
            logger.info(`[WEBHOOK] Usu√°rio n√£o existe, criando novo: ${customerEmail}`);
            
            // ‚úÖ DEBUG: Verificar senha antes de criar usu√°rio
            console.log('üîç [WEBHOOK] Criando usu√°rio com senha:', {
              email: customerEmail,
              hasPassword: !!userPassword,
              passwordLength: userPassword ? userPassword.length : 0,
              passwordPreview: userPassword ? `${userPassword.substring(0, 3)}***` : 'n√£o definida',
              willUseTemporaryPassword: !userPassword
            });
            
            // ‚úÖ VALIDAR: Senha deve ter pelo menos 8 caracteres
            if (userPassword && userPassword.length < 8) {
              logger.error(`[WEBHOOK] Senha muito curta: ${userPassword.length} caracteres. Gerando senha tempor√°ria.`);
              userPassword = null; // For√ßar uso de senha tempor√°ria
            }
            
            // ‚úÖ CRIAR: Novo usu√°rio com TODOS os dados do formul√°rio
            const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
              email: customerEmail,
              password: userPassword || this.generateTemporaryPassword(), // ‚úÖ USAR SENHA DO FORMUL√ÅRIO
              email_confirm: true,
              user_metadata: {
                planType: planType,
                planActivated: true,
                paymentConfirmed: true,
                source: 'stripe_webhook',
                signupDate: new Date().toISOString(),
                lastPayment: new Date().toISOString(),
                paymentIntentId: paymentIntent.id,
                // ‚úÖ DADOS COMPLETOS: Usar dados reais do formul√°rio
                firstName: userFirstName,
                lastName: userLastName,
                fullName: userFullName,
                phone: userPhone,
                signupSource: 'signup_with_plans',
                // ‚úÖ REMOVIDO: N√£o armazenar senha em metadados por seguran√ßa
                // tempPasswordForLogin: userPassword || null,
                // tempPasswordExpiresAt: new Date(Date.now() + 30 * 60 * 1000).toISOString()
              }
            });
            
            if (createError) {
              logger.error(`[WEBHOOK] Erro ao criar usu√°rio: ${createError.message}`);
              return false;
            }
            
            logger.info(`[WEBHOOK] Usu√°rio criado com sucesso: ${newUser.user.id}`);
            
            // ‚úÖ CRIAR: Perfil do usu√°rio com dados completos
            try {
              await supabaseAdmin
                .from('user_profiles')
                .insert({
                  id: newUser.user.id,
                  email: customerEmail,
                  first_name: userFirstName,
                  last_name: userLastName,
                  full_name: userFullName,
                  phone: userPhone,
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString()
                });
            } catch (profileError) {
              logger.warn(`[WEBHOOK] Erro ao criar perfil (ignorando): ${profileError.message}`);
            }
            
            // ‚úÖ CRIAR: Cliente na tabela clients (se existir)
            try {
              await supabaseAdmin
                .from('clients')
                .insert({
                  id: newUser.user.id,
                  name: userFullName,
                  email: customerEmail,
                  phone: userPhone,
                  status: 'active',
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString()
                });
            } catch (clientError) {
              logger.warn(`[WEBHOOK] Erro ao criar cliente (ignorando): ${clientError.message}`);
            }
            
            // ‚úÖ CRIAR: Assinatura ativa
            await this.createActiveSubscription(newUser.user.id, planType, paymentIntent.id);
            
            // ‚úÖ ENVIAR: Email de boas-vindas
            if (userPassword) {
              logger.info(`[WEBHOOK] Usu√°rio criado com senha do formul√°rio - email de boas-vindas deve ser enviado para: ${customerEmail}`);
            } else {
              logger.info(`[WEBHOOK] Usu√°rio criado com senha tempor√°ria - email de redefini√ß√£o deve ser enviado para: ${customerEmail}`);
            }
          }
          
          logger.info(`[WEBHOOK] Processamento conclu√≠do com sucesso para: ${customerEmail}`);
          
        } catch (userError) {
          logger.error(`[WEBHOOK] Erro ao processar usu√°rio: ${userError.message}`);
          // N√£o falhar o webhook por causa de erro na cria√ß√£o do usu√°rio
        }
      } else {
        logger.info(`[WEBHOOK] Pagamento n√£o √© de signup, ignorando cria√ß√£o de usu√°rio. Metadata:`, metadata);
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar pagamento bem-sucedido:', error);
      throw error;
    }
  }
  
  /**
   * Gera senha tempor√°ria para usu√°rios criados via webhook
   */
  generateTemporaryPassword() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
    let password = '';
    for (let i = 0; i < 12; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
  }
  
  /**
   * Cria assinatura ativa para usu√°rio
   */
  async createActiveSubscription(userId, planType, paymentIntentId) {
    try {
      const { supabaseAdmin } = require('../config/supabase');
      
      const { error: subscriptionError } = await supabaseAdmin
        .from('subscriptions')
        .upsert({
          user_id: userId,
          plan_type: planType,
          status: 'active',
          stripe_payment_intent_id: paymentIntentId,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }, { onConflict: 'user_id' });
      
      if (subscriptionError) {
        logger.error(`[WEBHOOK] Erro ao criar assinatura: ${subscriptionError.message}`);
      } else {
        logger.info(`[WEBHOOK] Assinatura criada para usu√°rio: ${userId}`);
      }
      
    } catch (error) {
      logger.error(`[WEBHOOK] Erro ao criar assinatura: ${error.message}`);
    }
  }

  /**
   * Trata falha no pagamento
   */
  async handlePaymentFailed(paymentIntent) {
    try {
      logger.info(`Falha no pagamento: ${paymentIntent.id}`);
      
      // Implementar l√≥gica para lidar com falha no pagamento
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar falha no pagamento:', error);
      throw error;
    }
  }

  /**
   * Trata PaymentIntent que requer a√ß√£o (3D Secure)
   */
  async handlePaymentRequiresAction(paymentIntent) {
    try {
      logger.info(`PaymentIntent ${paymentIntent.id} requer a√ß√£o (3D Secure)`);
      
      // ‚úÖ PRODU√á√ÉO: Log detalhado para debugging
      console.log('üîç PaymentIntent requer a√ß√£o:', {
        id: paymentIntent.id,
        status: paymentIntent.status,
        amount: paymentIntent.amount,
        customer_email: paymentIntent.customer_email,
        metadata: paymentIntent.metadata
      });
      
      // ‚úÖ PRODU√á√ÉO: Aqui voc√™ pode implementar notifica√ß√£o ao usu√°rio
      // ou atualizar o status no banco de dados
      
    } catch (error) {
      logger.error('Erro ao processar PaymentIntent que requer a√ß√£o:', error);
    }
  }

  /**
   * Trata PaymentIntent em processamento
   */
  async handlePaymentProcessing(paymentIntent) {
    try {
      logger.info(`PaymentIntent ${paymentIntent.id} em processamento`);
      
      // ‚úÖ PRODU√á√ÉO: Log para acompanhar pagamentos pendentes
      console.log('‚è≥ PaymentIntent em processamento:', {
        id: paymentIntent.id,
        status: paymentIntent.status,
        amount: paymentIntent.amount
      });
      
    } catch (error) {
      logger.error('Erro ao processar PaymentIntent em processamento:', error);
    }
  }

  /**
   * Trata cria√ß√£o de assinatura
   */
  async handleSubscriptionCreated(subscription) {
    try {
      logger.info(`Assinatura criada: ${subscription.id}`);
      
      // ‚úÖ EXTRAIR: Dados da assinatura
      const customerId = subscription.customer;
      const planType = subscription.metadata?.plan || 'pro';
      const source = subscription.metadata?.source || 'stripe_webhook';
      
      console.log('üîç [WEBHOOK SUBSCRIPTION] Dados da assinatura:', {
        subscriptionId: subscription.id,
        customerId,
        planType,
        source,
        metadata: subscription.metadata
      });
      
      // ‚úÖ BUSCAR: Cliente no Stripe para obter email
      const customer = await stripe.customers.retrieve(customerId);
      const customerEmail = customer.email;
      
      if (!customerEmail) {
        logger.warn(`[WEBHOOK SUBSCRIPTION] Cliente sem email: ${customerId}`);
        return false;
      }
      
      console.log('üîç [WEBHOOK SUBSCRIPTION] Cliente encontrado:', {
        customerId,
        customerEmail,
        customerName: customer.name
      });
      
      // ‚úÖ VERIFICAR: Se √© um signup (n√£o apenas upgrade de plano)
      if (source === 'signup_with_plans' && customerEmail && planType) {
        try {
          logger.info(`[WEBHOOK SUBSCRIPTION] Criando usu√°rio ap√≥s assinatura confirmada: ${customerEmail}`);
          
          // ‚úÖ CRIAR: Usu√°rio no Supabase AP√ìS confirma√ß√£o da assinatura
          const { supabaseAdmin } = require('../config/supabase');
          
          // ‚úÖ VERIFICAR: Se usu√°rio j√° existe (evitar duplica√ß√£o)
          const { data: existingUsers, error: listError } = await supabaseAdmin.auth.admin.listUsers();
          
          if (listError) {
            logger.error(`[WEBHOOK SUBSCRIPTION] Erro ao verificar usu√°rios existentes: ${listError.message}`);
            return false;
          }
          
          const existingUser = existingUsers.users.find(u => u.email === customerEmail);
          
          if (existingUser) {
            logger.info(`[WEBHOOK SUBSCRIPTION] Usu√°rio j√° existe: ${customerEmail}`);
            return true;
          }
          
          // ‚úÖ EXTRAIR: Dados do usu√°rio dos metadados ou gerar dados padr√£o
          const userFirstName = customer.name ? customer.name.split(' ')[0] : 'Usu√°rio';
          const userLastName = customer.name ? customer.name.split(' ').slice(1).join(' ') : 'Novo';
          const userPhone = customer.phone || '';
          
          // ‚úÖ GERAR: Senha tempor√°ria
          const userPassword = this.generateTemporaryPassword();
          
          console.log('üîç [WEBHOOK SUBSCRIPTION] Criando usu√°rio com dados:', {
            email: customerEmail,
            firstName: userFirstName,
            lastName: userLastName,
            phone: userPhone,
            planType,
            passwordLength: userPassword.length
          });
          
          // ‚úÖ CRIAR: Novo usu√°rio no Supabase
          const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
            email: customerEmail,
            password: userPassword,
            email_confirm: true,
            user_metadata: {
              firstName: userFirstName,
              lastName: userLastName,
              phone: userPhone,
              planType: planType,
              source: source,
              stripeCustomerId: customerId,
              stripeSubscriptionId: subscription.id
            }
          });
          
          if (createError) {
            logger.error(`[WEBHOOK SUBSCRIPTION] Erro ao criar usu√°rio: ${createError.message}`);
            return false;
          }
          
          logger.info(`[WEBHOOK SUBSCRIPTION] Usu√°rio criado com sucesso: ${newUser.user.id}`);
          
          // ‚úÖ CRIAR: Perfil do usu√°rio na tabela user_profiles
          const { error: profileError } = await supabaseAdmin
            .from('user_profiles')
            .insert({
              id: newUser.user.id,
              first_name: userFirstName,
              last_name: userLastName,
              phone: userPhone,
              plan_type: planType,
              subscription_status: 'active',
              stripe_customer_id: customerId,
              stripe_subscription_id: subscription.id,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
          
          if (profileError) {
            logger.error(`[WEBHOOK SUBSCRIPTION] Erro ao criar perfil: ${profileError.message}`);
            return false;
          }
          
          logger.info(`[WEBHOOK SUBSCRIPTION] Perfil criado com sucesso para usu√°rio: ${newUser.user.id}`);
          
          // ‚úÖ ENVIAR: Email de boas-vindas com credenciais
          logger.info(`[WEBHOOK SUBSCRIPTION] Usu√°rio criado com senha tempor√°ria - email de redefini√ß√£o deve ser enviado para: ${customerEmail}`);
          
          // ‚úÖ IMPORTANTE: Tentar login autom√°tico
          try {
            await this.performAutoLoginAfterWebhook(customerEmail, userPassword, {
              firstName: userFirstName,
              lastName: userLastName,
              planType: planType,
              stripeCustomerId: customerId,
              stripeSubscriptionId: subscription.id
            });
            logger.info(`[WEBHOOK SUBSCRIPTION] Login autom√°tico realizado para: ${customerEmail}`);
          } catch (loginError) {
            logger.warn(`[WEBHOOK SUBSCRIPTION] Login autom√°tico falhou para: ${customerEmail}`, loginError.message);
            
            // ‚úÖ IMPORTANTE: Limpar qualquer res√≠duo de sess√£o falhada
            try {
              await this.cleanupFailedAutoLogin(customerEmail);
              logger.info(`[WEBHOOK SUBSCRIPTION] Limpeza de res√≠duos realizada para: ${customerEmail}`);
            } catch (cleanupError) {
              logger.warn(`[WEBHOOK SUBSCRIPTION] Falha na limpeza de res√≠duos para: ${customerEmail}`, cleanupError.message);
            }
            
            // N√£o falhar o webhook por causa do login autom√°tico
          }
          
          return true;
          
        } catch (userError) {
          logger.error(`[WEBHOOK SUBSCRIPTION] Erro ao processar cria√ß√£o de usu√°rio: ${userError.message}`);
          return false;
        }
      } else {
        logger.info(`[WEBHOOK SUBSCRIPTION] N√£o √© signup ou dados insuficientes:`, {
          source,
          hasEmail: !!customerEmail,
          hasPlan: !!planType
        });
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar cria√ß√£o de assinatura:', error);
      throw error;
    }
  }

  /**
   * Trata atualiza√ß√£o de assinatura
   */
  async handleSubscriptionUpdated(subscription) {
    try {
      logger.info(`Assinatura atualizada: ${subscription.id}`);
      
      // Implementar l√≥gica para atualizar recursos do usu√°rio
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar atualiza√ß√£o de assinatura:', error);
      throw error;
    }
  }

  /**
   * Trata cancelamento de assinatura
   */
  async handleSubscriptionDeleted(subscription) {
    try {
      logger.info(`Assinatura cancelada: ${subscription.id}`);
      
      // ‚úÖ IMPLEMENTAR: L√≥gica para desativar recursos do usu√°rio
      const customerId = subscription.customer;
      const customer = await stripe.customers.retrieve(customerId);
      const customerEmail = customer.email;
      
      if (customerEmail) {
        // ‚úÖ ATUALIZAR: Status da assinatura no Supabase
        const { supabaseAdmin } = require('../config/supabase');
        
        const { error: updateError } = await supabaseAdmin
          .from('user_profiles')
          .update({ 
            subscription_status: 'cancelled',
            updated_at: new Date().toISOString()
          })
          .eq('stripe_customer_id', customerId);
        
        if (updateError) {
          logger.error(`[WEBHOOK] Erro ao atualizar status da assinatura: ${updateError.message}`);
        } else {
          logger.info(`[WEBHOOK] Status da assinatura atualizado para 'cancelled' para: ${customerEmail}`);
        }
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar cancelamento de assinatura:', error);
      throw error;
    }
  }

  /**
   * Trata pagamento de fatura realizado com sucesso
   */
  async handleInvoicePaymentSucceeded(invoice) {
    try {
      logger.info(`Pagamento de fatura realizado: ${invoice.id}`);
      
      // ‚úÖ EXTRAIR: Dados da fatura
      const customerId = invoice.customer;
      const subscriptionId = invoice.subscription;
      const amount = invoice.amount_paid;
      const currency = invoice.currency;
      
      console.log('üîç [WEBHOOK INVOICE] Pagamento realizado:', {
        invoiceId: invoice.id,
        customerId,
        subscriptionId,
        amount,
        currency,
        status: invoice.status
      });
      
      if (subscriptionId) {
        // ‚úÖ ATUALIZAR: Status da assinatura para 'active'
        const { supabaseAdmin } = require('../config/supabase');
        
        const { error: updateError } = await supabaseAdmin
          .from('user_profiles')
          .update({ 
            subscription_status: 'active',
            last_payment_date: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .eq('stripe_subscription_id', subscriptionId);
        
        if (updateError) {
          logger.error(`[WEBHOOK] Erro ao atualizar status da assinatura: ${updateError.message}`);
        } else {
          logger.info(`[WEBHOOK] Status da assinatura atualizado para 'active' ap√≥s pagamento`);
        }
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar pagamento de fatura:', error);
      throw error;
    }
  }

  /**
   * Trata falha no pagamento de fatura
   */
  async handleInvoicePaymentFailed(invoice) {
    try {
      logger.info(`Pagamento de fatura falhou: ${invoice.id}`);
      
      // ‚úÖ EXTRAIR: Dados da fatura
      const customerId = invoice.customer;
      const subscriptionId = invoice.subscription;
      const attemptCount = invoice.attempt_count;
      
      console.log('üîç [WEBHOOK INVOICE] Falha no pagamento:', {
        invoiceId: invoice.id,
        customerId,
        subscriptionId,
        attemptCount,
        status: invoice.status
      });
      
      if (subscriptionId) {
        // ‚úÖ ATUALIZAR: Status da assinatura para 'past_due'
        const { supabaseAdmin } = require('../config/supabase');
        
        const { error: updateError } = await supabaseAdmin
          .from('user_profiles')
          .update({ 
            subscription_status: 'past_due',
            payment_failure_count: attemptCount,
            updated_at: new Date().toISOString()
          })
          .eq('stripe_subscription_id', subscriptionId);
        
        if (updateError) {
          logger.error(`[WEBHOOK] Erro ao atualizar status da assinatura: ${updateError.message}`);
        } else {
          logger.info(`[WEBHOOK] Status da assinatura atualizado para 'past_due' ap√≥s falha no pagamento`);
        }
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar falha no pagamento de fatura:', error);
      throw error;
    }
  }

  /**
   * Trata cria√ß√£o de cliente
   */
  async handleCustomerCreated(customer) {
    try {
      logger.info(`Cliente criado: ${customer.id}`);
      
      // ‚úÖ LOG: Dados do cliente para auditoria
      console.log('üîç [WEBHOOK CUSTOMER] Novo cliente:', {
        customerId: customer.id,
        email: customer.email,
        name: customer.name,
        phone: customer.phone,
        created: customer.created
      });
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar cria√ß√£o de cliente:', error);
      throw error;
    }
  }

  /**
   * Trata trial que vai terminar em 3 dias
   */
  async handleSubscriptionTrialWillEnd(subscription) {
    try {
      logger.info(`Trial vai terminar em 3 dias: ${subscription.id}`);
      
      // ‚úÖ EXTRAIR: Dados da assinatura
      const customerId = subscription.customer;
      const trialEnd = subscription.trial_end;
      const customer = await stripe.customers.retrieve(customerId);
      const customerEmail = customer.email;
      
      console.log('üîç [WEBHOOK TRIAL] Trial terminando em 3 dias:', {
        subscriptionId: subscription.id,
        customerId,
        customerEmail,
        trialEnd: new Date(trialEnd * 1000).toISOString(),
        daysLeft: Math.ceil((trialEnd - Date.now() / 1000) / 86400)
      });
      
      if (customerEmail) {
        // ‚úÖ ENVIAR: Email de notifica√ß√£o sobre trial terminando
        logger.info(`[WEBHOOK TRIAL] Enviando notifica√ß√£o para: ${customerEmail}`);
        
        // TODO: Implementar envio de email
        // await emailService.sendTrialEndingNotification(customerEmail, subscription);
        
        // ‚úÖ ATUALIZAR: Status no Supabase para 'trial_ending'
        const { supabaseAdmin } = require('../config/supabase');
        
        const { error: updateError } = await supabaseAdmin
          .from('user_profiles')
          .update({ 
            subscription_status: 'trial_ending',
            trial_end_date: new Date(trialEnd * 1000).toISOString(),
            updated_at: new Date().toISOString()
          })
          .eq('stripe_customer_id', customerId);
        
        if (updateError) {
          logger.error(`[WEBHOOK] Erro ao atualizar status do trial: ${updateError.message}`);
        } else {
          logger.info(`[WEBHOOK] Status do trial atualizado para 'trial_ending' para: ${customerEmail}`);
        }
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar trial que vai terminar:', error);
      throw error;
    }
  }

  /**
   * Trata trial que terminou
   */
  async handleSubscriptionTrialEnded(subscription) {
    try {
      logger.info(`Trial terminou: ${subscription.id}`);
      
      // ‚úÖ EXTRAIR: Dados da assinatura
      const customerId = subscription.customer;
      const customer = await stripe.customers.retrieve(customerId);
      const customerEmail = customer.email;
      
      console.log('üîç [WEBHOOK TRIAL] Trial terminou:', {
        subscriptionId: subscription.id,
        customerId,
        customerEmail,
        status: subscription.status,
        currentPeriodEnd: new Date(subscription.current_period_end * 1000).toISOString()
      });
      
      if (customerEmail) {
        // ‚úÖ VERIFICAR: Se h√° m√©todo de pagamento configurado
        if (subscription.default_payment_method) {
          // ‚úÖ ATUALIZAR: Status para 'active' (cobran√ßa autom√°tica ativada)
          const { supabaseAdmin } = require('../config/supabase');
          
          const { error: updateError } = await supabaseAdmin
            .from('user_profiles')
            .update({ 
              subscription_status: 'active',
              trial_ended_date: new Date().toISOString(),
              updated_at: new Date().toISOString()
            })
            .eq('stripe_customer_id', customerId);
          
          if (updateError) {
            logger.error(`[WEBHOOK] Erro ao atualizar status ap√≥s trial: ${updateError.message}`);
          } else {
            logger.info(`[WEBHOOK] Status atualizado para 'active' ap√≥s trial para: ${customerEmail}`);
          }
        } else {
          // ‚úÖ ATUALIZAR: Status para 'incomplete' (sem m√©todo de pagamento)
          const { supabaseAdmin } = require('../config/supabase');
          
          const { error: updateError } = await supabaseAdmin
            .from('user_profiles')
            .update({ 
              subscription_status: 'incomplete',
              trial_ended_date: new Date().toISOString(),
              updated_at: new Date().toISOString()
            })
            .eq('stripe_customer_id', customerId);
          
          if (updateError) {
            logger.error(`[WEBHOOK] Erro ao atualizar status ap√≥s trial: ${updateError.message}`);
          } else {
            logger.info(`[WEBHOOK] Status atualizado para 'incomplete' ap√≥s trial para: ${customerEmail}`);
          }
        }
      }
      
      return true;
    } catch (error) {
      logger.error('Erro ao processar trial terminado:', error);
      throw error;
    }
  }

  /**
   * Lista todos os planos dispon√≠veis
   */
  async getAvailablePlans() {
    try {
      console.log('üîÑ Buscando planos dispon√≠veis...');
      
      // ‚úÖ BUSCAR PRODUTOS DINAMICAMENTE DO STRIPE
      const products = await stripeProductService.getAvailableProducts();
      
      console.log(`‚úÖ ${products.length} planos encontrados`);
      
      // ‚úÖ FORMATAR PARA FRONTEND
      return products.map(product => ({
        id: product.id,
        name: product.name,
        description: product.description,
        features: product.metadata?.features ? JSON.parse(product.metadata.features) : [],
        prices: product.prices.map(price => ({
          interval: price.interval,
          priceId: price.id,
        amount: price.amount,
        amountFormatted: `R$ ${(price.amount / 100).toFixed(2).replace('.', ',')}`,
          intervalText: price.interval === 'month' ? 'por m√™s' : 'por ano',
          discount: null
      }))
    }));
    } catch (error) {
      console.error('‚ùå Erro ao buscar planos dispon√≠veis:', error);
      throw error;
    }
  }

  /**
   * Obt√©m informa√ß√µes de um plano espec√≠fico
   */
  async getPlanInfo(planType, interval = 'monthly') {
    try {
      console.log('üîç getPlanInfo chamado com:', { planType, interval });
      
      // ‚úÖ BUSCAR PRODUTO DINAMICAMENTE DO STRIPE COM PRE√áOS
      const product = await stripeProductService.getProductWithPricesByPlanType(planType);
      console.log('‚úÖ Produto encontrado:', product.name);
      
      // ‚úÖ VALIDA√á√ÉO DE SEGURAN√áA: Verificar se product.prices existe
      if (!product.prices || !Array.isArray(product.prices)) {
        console.error('‚ùå Produto n√£o possui pre√ßos v√°lidos:', {
          productId: product.id,
          productName: product.name,
          hasPrices: !!product.prices,
          pricesType: typeof product.prices,
          prices: product.prices
        });
        throw new Error(`Produto ${planType} n√£o possui pre√ßos configurados`);
      }
      
      // ‚úÖ BUSCAR PRE√áO ESPEC√çFICO
      const price = await stripeProductService.getPriceByPlanAndInterval(planType, interval);
      console.log('‚úÖ Pre√ßo encontrado:', { interval, amount: price.amount });
      
      return {
        id: planType.toLowerCase(),
        name: product.name,
        description: product.description,
        price: price.amount,
        priceFormatted: `R$ ${(price.amount / 100).toFixed(2).replace('.', ',')}`,
        interval: interval,
        intervalText: price.interval === 'month' ? 'por m√™s' : 'por ano',
        discount: null, // ‚úÖ TODO: Implementar sistema de desconto
        features: [], // ‚úÖ TODO: Implementar busca de features do metadata
        priceId: price.id,
        // ‚úÖ TODOS OS PRE√áOS DISPON√çVEIS
        prices: product.prices.map(p => ({
          interval: p.interval,
          priceId: p.id,
          amount: p.amount,
          amountFormatted: `R$ ${(p.amount / 100).toFixed(2).replace('.', ',')}`,
          intervalText: p.interval === 'month' ? 'por m√™s' : 'por ano',
          discount: null
        }))
      };
    } catch (error) {
      console.error(`‚ùå Erro ao buscar informa√ß√µes do plano ${planType}:`, error);
      throw error;
    }
  }

  /**
   * Obt√©m todos os pre√ßos de um plano espec√≠fico
   */
  async getPlanPrices(planType) {
    try {
      // ‚úÖ BUSCAR PRODUTO DINAMICAMENTE DO STRIPE COM PRE√áOS
      const product = await stripeProductService.getProductWithPricesByPlanType(planType);
      
      // ‚úÖ VALIDA√á√ÉO DE SEGURAN√áA: Verificar se product.prices existe
      if (!product.prices || !Array.isArray(product.prices)) {
        console.error('‚ùå Produto n√£o possui pre√ßos v√°lidos:', {
          productId: product.id,
          productName: product.name,
          hasPrices: !!product.prices,
          pricesType: typeof product.prices,
          prices: product.prices
        });
        throw new Error(`Produto ${planType} n√£o possui pre√ßos configurados`);
      }
      
      return {
        id: planType.toLowerCase(),
        name: product.name,
        description: product.description,
        features: [], // ‚úÖ TODO: Implementar busca de features do metadata
        prices: product.prices.map(price => ({
          interval: price.interval,
          priceId: price.id,
          amount: price.amount,
          amountFormatted: `R$ ${(price.amount / 100).toFixed(2).replace('.', ',')}`,
          intervalText: price.interval === 'month' ? 'por m√™s' : 'por ano',
          discount: null // ‚úÖ TODO: Implementar sistema de desconto
        }))
      };
    } catch (error) {
      console.error(`‚ùå Erro ao buscar pre√ßos do plano ${planType}:`, error);
      throw error;
    }
  }

  /**
   * Converte configura√ß√£o de intervalo em texto leg√≠vel
   */
  getIntervalText(interval, count) {
    if (interval === 'month') {
      if (count === 1) return 'por m√™s';
      if (count === 6) return 'a cada 6 meses';
      return `a cada ${count} meses`;
    }
    if (interval === 'year') {
      if (count === 1) return 'por ano';
      return `a cada ${count} anos`;
    }
    return `a cada ${count} ${interval}`;
  }

  /**
   * Cria um cupom de desconto
   */
  async createCoupon(code, discountPercent, duration = 'once') {
    try {
      const coupon = await stripe.coupons.create({
        id: code,
        percent_off: discountPercent,
        duration: duration,
        name: `Desconto de ${discountPercent}%`
      });

      logger.info(`Cupom criado: ${coupon.id}`);
      return coupon;
    } catch (error) {
      logger.error('Erro ao criar cupom:', error);
      throw new Error(`Falha ao criar cupom: ${error.message}`);
    }
  }

  /**
   * Cria E confirma um PaymentIntent em uma opera√ß√£o
   * ‚úÖ FLUXO CORRETO: PaymentMethod criado no frontend, PaymentIntent criado E confirmado no backend
   */
  async createAndConfirmPaymentIntent(planType, customerEmail, paymentMethodId, metadata = {}, interval = 'monthly') {
    try {
      // ‚úÖ BUSCAR CONFIGURA√á√ÉO DINAMICAMENTE DO STRIPE
      const priceConfig = await getPlanConfig(planType, interval);
      if (!priceConfig) {
        throw new Error(`Configura√ß√£o n√£o encontrada para o plano ${planType} - ${interval}`);
      }
      
      // ‚úÖ VALIDA√á√ÉO: Verificar se o pre√ßo est√° configurado corretamente
      if (!priceConfig.amount || priceConfig.amount <= 0) {
        throw new Error(`Valor do plano ${planType} (${interval}) n√£o est√° configurado corretamente`);
      }
      
      console.log('üîç Configura√ß√£o de pre√ßo validada:', {
        planType,
        interval,
        amount: priceConfig.amount,
        amountFormatted: `R$ ${(priceConfig.amount / 100).toFixed(2)}`,
        priceId: priceConfig.priceId
      });

      // ‚úÖ CONFIGURA√á√ÉO CORRETA: Criar E confirmar em uma opera√ß√£o
      const paymentIntentData = {
        amount: priceConfig.amount,
        currency: 'brl',
        capture_method: 'automatic',
        confirm: "true", // ‚úÖ CONFIRMAR: Imediatamente ap√≥s cria√ß√£o (STRING)
        description: `Assinatura ${planType} - ${interval}`,
        metadata: {
          plan: planType,
          interval: interval,
          customerEmail,
          source: 'signup',
          userName: metadata.userName,
          user_agent: 'fgtsagent_web',
          // ‚úÖ DADOS COMPLETOS: Incluir todos os dados do usu√°rio
          firstName: metadata.firstName || '',
          lastName: metadata.lastName || '',
          fullName: metadata.fullName || metadata.userName || '',
          phone: metadata.phone || '',
          password: metadata.password || '', // Senha para cria√ß√£o no webhook
          ...metadata
        },
        payment_method: paymentMethodId, // ‚úÖ M√âTODO: PaymentMethod criado no frontend
        receipt_email: customerEmail
        // ‚úÖ REMOVIDO: return_url para evitar redirecionamentos incorretos
        // O frontend deve sempre usar popup para manter estado
      };

      console.log('üîç Criando E confirmando PaymentIntent:', {
        ...paymentIntentData,
        return_url: paymentIntentData.return_url,
        hasReturnUrl: !!paymentIntentData.return_url,
        appUrl: process.env.APP_URL,
        timestamp: new Date().toISOString()
      });
      
      // ‚úÖ DEBUG: Verificar payload exato sendo enviado para o Stripe
      console.log('üì§ PAYLOAD EXATO para Stripe:', JSON.stringify(paymentIntentData, null, 2));
      
      // ‚úÖ DEBUG: Verificar configura√ß√£o do plano
      console.log('üîç Configura√ß√£o do plano:', {
        planType,
        interval,
        planName: planType,
        amount: priceConfig.amount,
        amountFormatted: `R$ ${(priceConfig.amount / 100).toFixed(2)}`,
        priceId: priceConfig.priceId
      });

      const paymentIntent = await stripe.paymentIntents.create(paymentIntentData);

      logger.info(`PaymentIntent criado E confirmado: ${paymentIntent.id} para plano ${planType} (${interval})`);
      
      // ‚úÖ PROCESSAR: Resultado da cria√ß√£o E confirma√ß√£o
      if (paymentIntent.status === 'requires_action') {
        logger.info('‚ö†Ô∏è PaymentIntent requer a√ß√£o adicional (3D Secure):', {
          id: paymentIntent.id,
          nextAction: paymentIntent.next_action?.type,
          redirectUrl: paymentIntent.next_action?.redirect_to_url?.url,
          timestamp: new Date().toISOString()
        });
        
        // ‚úÖ DEBUG: Log detalhado para 3D Secure
        console.log('üîç 3D Secure - Next Action completo:', {
          type: paymentIntent.next_action?.type,
          redirectUrl: paymentIntent.next_action?.redirect_to_url?.url,
          returnUrl: paymentIntent.next_action?.redirect_to_url?.return_url
        });
        
        return {
          ...paymentIntent,
          requiresAction: true,
          nextAction: paymentIntent.next_action
        };
      }

      if (paymentIntent.status === 'succeeded') {
        logger.info('üéâ PaymentIntent confirmado com sucesso:', {
          id: paymentIntent.id,
          amount: paymentIntent.amount,
          currency: paymentIntent.currency,
          timestamp: new Date().toISOString()
        });
      }

      return {
        id: paymentIntent.id,
        client_secret: paymentIntent.client_secret,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency,
        status: paymentIntent.status,
        requiresAction: paymentIntent.status === 'requires_action',
        // ‚úÖ CORRE√á√ÉO: nextAction s√≥ deve existir quando h√° a√ß√£o pendente
        nextAction: paymentIntent.status === 'requires_action' ? paymentIntent.next_action : null
      };
    } catch (error) {
      logger.error('Erro ao criar E confirmar PaymentIntent:', error);
      throw new Error(`Falha ao criar E confirmar PaymentIntent: ${error.message}`);
    }
  }

  /**
   * Confirma um PaymentIntent no backend (MAIS SEGURO)
   * Usa a chave secreta para m√°xima seguran√ßa
   */
  async confirmPaymentIntent(paymentIntentId, paymentMethodId = null) {
    try {
      // ‚úÖ VALIDA√á√ÉO: Verificar se os par√¢metros est√£o corretos
      if (!paymentIntentId) {
        throw new Error('paymentIntentId √© obrigat√≥rio');
      }
      
      if (!paymentMethodId) {
        throw new Error('paymentMethodId √© obrigat√≥rio para confirma√ß√£o');
      }
      
      logger.info('üîê Confirmando PaymentIntent no backend:', {
        paymentIntentId,
        paymentMethodId,
        hasPaymentMethod: !!paymentMethodId,
        timestamp: new Date().toISOString()
      });

      // ‚úÖ OBTER: PaymentIntent atual
      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);
      
      logger.info('üìã Status atual do PaymentIntent:', {
        id: paymentIntent.id,
        status: paymentIntent.status,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency,
        timestamp: new Date().toISOString()
      });

      // ‚úÖ VALIDAR: Status antes da confirma√ß√£o
      if (paymentIntent.status === 'succeeded') {
        logger.info('‚úÖ PaymentIntent j√° foi confirmado:', paymentIntent.id);
        return paymentIntent;
      }

      if (paymentIntent.status === 'canceled') {
        throw new Error('PaymentIntent foi cancelado e n√£o pode ser confirmado');
      }

      // ‚úÖ CONFIRMAR: PaymentIntent com m√©todo de pagamento + return_url
      const confirmData = {
        payment_method: paymentMethodId
        // ‚úÖ REMOVIDO: return_url para evitar redirecionamentos incorretos
        // O frontend deve sempre usar popup para manter estado
      };
      
      const confirmedIntent = await stripe.paymentIntents.confirm(paymentIntentId, confirmData);
      
      logger.info('‚úÖ PaymentIntent confirmado com m√©todo de pagamento:', {
        id: confirmedIntent.id,
        status: confirmedIntent.status,
        paymentMethod: paymentMethodId,
        timestamp: new Date().toISOString()
      });

      // ‚úÖ PROCESSAR: Resultado da confirma√ß√£o
      if (confirmedIntent.status === 'requires_action') {
        logger.info('‚ö†Ô∏è PaymentIntent requer a√ß√£o adicional (3D Secure):', {
          id: confirmedIntent.id,
          nextAction: confirmedIntent.next_action?.type,
          timestamp: new Date().toISOString()
        });
        
        return {
          ...confirmedIntent,
          requiresAction: true,
          nextAction: confirmedIntent.status === 'requires_action' ? confirmedIntent.next_action : null
        };
      }

      if (confirmedIntent.status === 'succeeded') {
        logger.info('üéâ PaymentIntent confirmado com sucesso:', {
          id: confirmedIntent.id,
          amount: confirmedIntent.amount,
          currency: confirmedIntent.currency,
          timestamp: new Date().toISOString()
        });
        
        // ‚úÖ WEBHOOK: Processar eventos de sucesso
        await this.processWebhook({
          type: 'payment_intent.succeeded',
          data: {
            object: confirmedIntent
          }
        });
      }

      return confirmedIntent;

    } catch (error) {
      logger.error('‚ùå Erro ao confirmar PaymentIntent:', {
        paymentIntentId,
        error: error.message,
        type: error.type,
        code: error.code,
        timestamp: new Date().toISOString()
      });

      // ‚úÖ PROPAGAR: Erro espec√≠fico do Stripe
      throw error;
    }
  }

  /**
   * Processa pagamento completo para assinatura recorrente
   * ‚úÖ NOVA ARQUITETURA: Frontend envia dados do cart√£o, backend processa tudo
   */
  async processCompletePayment(planType, customerEmail, cardData = {}, metadata = {}, interval = 'monthly') {
    try {
      console.log('üîÑ Iniciando processamento completo de ASSINATURA RECORRENTE...');
      
      // ‚úÖ VALIDAR PLANO - BUSCA DIN√ÇMICA
      const priceConfig = await getPlanConfig(planType, interval);
      if (!priceConfig) {
        throw new Error(`Configura√ß√£o n√£o encontrada para o plano ${planType} - ${interval}`);
      }

      console.log('‚úÖ Plano validado:', { planType, interval, price: priceConfig });

      // ‚úÖ VALIDAR CARD DATA
      if (!cardData || !cardData.billing_details) {
        throw new Error('Dados do cart√£o s√£o obrigat√≥rios para criar assinatura');
      }

      console.log('‚úÖ CardData recebido:', { 
        hasBillingDetails: !!cardData.billing_details,
        hasMetadata: !!cardData.metadata,
        email: cardData.billing_details?.email
      });

      // ‚úÖ CRIAR CUSTOMER NO STRIPE
      console.log('üîÑ Criando customer no Stripe...');
      const customer = await stripe.customers.create({
        email: customerEmail,
        name: metadata.userName,
        phone: metadata.phone,
        metadata: {
          plan: planType,
          interval: interval,
          customerEmail,
          source: metadata.source,
          user_agent: 'fgtsagent_backend',
          ...metadata
        }
      });

      console.log('‚úÖ Customer criado:', customer.id);

      // ‚úÖ NOVO: USAR PAYMENT METHOD CRIADO PELO FRONTEND
      console.log('üîÑ Usando PaymentMethod criado pelo frontend...');
      
      try {
        // ‚úÖ SOLU√á√ÉO: Usar PaymentMethod j√° criado pelo frontend
        // ‚úÖ O frontend j√° criou o PaymentMethod com dados reais do cart√£o
        console.log('üîÑ Usando PaymentMethod existente:', cardData.paymentMethodId);
        
        // ‚úÖ VALIDAR: Verificar se temos o paymentMethodId
        if (!cardData.paymentMethodId) {
          throw new Error('PaymentMethod ID n√£o fornecido pelo frontend');
        }
        
        // ‚úÖ USAR: PaymentMethod j√° criado pelo frontend
        const paymentMethodId = cardData.paymentMethodId;
        console.log('‚úÖ Usando PaymentMethod ID:', paymentMethodId);

        // ‚úÖ VINCULAR PAYMENT METHOD AO CUSTOMER
        console.log('üîÑ Vinculando PaymentMethod ao customer...');
        await stripe.paymentMethods.attach(paymentMethodId, {
          customer: customer.id
        });

        console.log('‚úÖ PaymentMethod vinculado ao customer:', paymentMethodId);

        // ‚úÖ DEFINIR PAYMENT METHOD COMO PADR√ÉO DO CUSTOMER
        console.log('üîÑ Definindo PaymentMethod como padr√£o do customer...');
        await stripe.customers.update(customer.id, {
          invoice_settings: {
            default_payment_method: paymentMethodId
          }
        });

        console.log('‚úÖ PaymentMethod definido como padr√£o do customer');

      } catch (paymentMethodError) {
        console.error('‚ùå Erro ao criar PaymentMethod:', paymentMethodError.message);
        throw new Error(`Falha ao processar dados do cart√£o: ${paymentMethodError.message}`);
      }

      // ‚úÖ CRIAR ASSINATURA RECORRENTE COM M√âTODO DE PAGAMENTO VINCULADO
      console.log('üîÑ Criando ASSINATURA RECORRENTE...');
      
      const subscriptionData = {
        customer: customer.id,
        items: [{ price: priceConfig.priceId }],
        // ‚úÖ CONFIGURA√á√ÉO PARA ASSINATURA RECORRENTE COM M√âTODO DE PAGAMENTO
        payment_behavior: 'default_incomplete', // Permite pagamento inicial falhar
        payment_settings: { 
          save_default_payment_method: 'on_subscription', // Salva m√©todo de pagamento
          payment_method_types: ['card'] // Aceita apenas cart√£o
        },
        // ‚úÖ NOVO: PER√çODO DE TESTE GRATUITO DE 7 DIAS
        trial_period_days: 7, // Usu√°rio tem 7 dias de teste gr√°tis
        // ‚úÖ NOVO: CONFIGURA√á√ïES 3DS PARA ASSINATURAS
        payment_method_options: {
          card: {
            request_three_d_secure: 'automatic' // ‚úÖ 3DS AUTOM√ÅTICO
          }
        },
        // ‚úÖ METADADOS IMPORTANTES PARA ASSINATURA
        metadata: {
          plan: planType,
          interval: interval,
          source: metadata.source,
          user_agent: 'fgtsagent_backend',
          customer_email: customerEmail,
          customer_name: metadata.userName,
          payment_method_id: paymentMethodId, // ‚úÖ Incluir ID do m√©todo de pagamento
          ...metadata
        },
        // ‚úÖ EXPANDIR DADOS IMPORTANTES
        expand: ['latest_invoice.payment_intent']
      };

      console.log('üîÑ Dados da assinatura:', subscriptionData);

      const subscription = await stripe.subscriptions.create(subscriptionData);

      console.log('‚úÖ Assinatura RECORRENTE criada:', subscription.id);
      
      // ‚úÖ NOVO: LOGS DO PER√çODO DE TESTE
      if (subscription.trial_start && subscription.trial_end) {
        const trialStart = new Date(subscription.trial_start * 1000);
        const trialEnd = new Date(subscription.trial_end * 1000);
        const firstBilling = new Date(subscription.current_period_end * 1000);
        
        console.log('üéÅ PER√çODO DE TESTE GRATUITO CONFIGURADO COM 3DS:');
        console.log('   üìÖ In√≠cio do teste:', trialStart.toLocaleDateString('pt-BR'));
        console.log('   üìÖ Fim do teste:', trialEnd.toLocaleDateString('pt-BR'));
        console.log('   üí≥ Primeira cobran√ßa:', firstBilling.toLocaleDateString('pt-BR'));
        console.log('   ‚è∞ Dura√ß√£o do teste: 7 dias');
        console.log('   üîê 3DS configurado: AUTOM√ÅTICO');
        console.log('   üõ°Ô∏è Seguran√ßa: M√ÅXIMA (endere√ßo obrigat√≥rio)');
      }

      // ‚úÖ PROCESSAR PRIMEIRA FATURA (pagamento inicial)
      console.log('üîÑ Processando primeira fatura da assinatura...');
      let invoice = null;
      if (subscription.latest_invoice) {
        if (typeof subscription.latest_invoice === 'string') {
          invoice = await stripe.invoices.retrieve(subscription.latest_invoice);
        } else if (subscription.latest_invoice.id) {
          invoice = await stripe.invoices.retrieve(subscription.latest_invoice.id);
        } else {
          console.log('‚ö†Ô∏è latest_invoice n√£o tem ID v√°lido:', subscription.latest_invoice);
        }
      }
      
      if (invoice) {
        console.log('‚úÖ Primeira fatura processada:', invoice.id, 'Status:', invoice.status);
        
        // ‚úÖ NOVO: Verificar se h√° PaymentIntent para confirmar
        if (invoice.payment_intent) {
          console.log('üîÑ PaymentIntent encontrado na fatura:', invoice.payment_intent);
          
          // ‚úÖ CONFIRMAR PAGAMENTO: Se for string, recuperar o PaymentIntent
          let paymentIntent;
          if (typeof invoice.payment_intent === 'string') {
            paymentIntent = await stripe.paymentIntents.retrieve(invoice.payment_intent);
          } else {
            paymentIntent = invoice.payment_intent;
          }
          
          console.log('üîÑ Status do PaymentIntent:', paymentIntent.status);
          
          // ‚úÖ CONFIRMAR: Se o PaymentIntent estiver pendente
          if (paymentIntent.status === 'requires_confirmation') {
            console.log('üîÑ Confirmando PaymentIntent pendente...');
            const confirmedPaymentIntent = await stripe.paymentIntents.confirm(paymentIntent.id);
            console.log('‚úÖ PaymentIntent confirmado:', confirmedPaymentIntent.status);
          } else if (paymentIntent.status === 'requires_payment_method') {
            console.log('‚ö†Ô∏è PaymentIntent requer m√©todo de pagamento');
          } else {
            console.log('‚ÑπÔ∏è PaymentIntent j√° processado:', paymentIntent.status);
          }
        } else {
          console.log('‚ö†Ô∏è Fatura n√£o tem PaymentIntent associado');
        }
        
        if (invoice.payment_intent) {
          console.log('üîÑ Primeira fatura criada, aguardando confirma√ß√£o...');
          console.log('‚ö†Ô∏è Assinatura criada mas aguardando confirma√ß√£o da primeira cobran√ßa');
        }
      } else {
        console.log('‚ö†Ô∏è Nenhuma fatura encontrada para processar');
      }

      // ‚úÖ VERIFICAR STATUS FINAL DA ASSINATURA
      const finalSubscription = await stripe.subscriptions.retrieve(subscription.id);
      console.log('‚úÖ Status final da assinatura:', finalSubscription.status);

      // ‚úÖ NOVO: CRIAR USU√ÅRIO NO SUPABASE AP√ìS SUCESSO DO STRIPE
      console.log('üîÑ Criando usu√°rio no Supabase...');
      try {
        const { supabaseAdmin } = require('../config/supabase');
        
        // ‚úÖ VERIFICAR: Se usu√°rio j√° existe
        const { data: existingUsers, error: listError } = await supabaseAdmin.auth.admin.listUsers();
        
        if (listError) {
          console.error('‚ùå Erro ao verificar usu√°rios existentes:', listError.message);
        } else {
          const existingUser = existingUsers.users.find(u => u.email === customerEmail);
          
          if (existingUser) {
            console.log('‚úÖ Usu√°rio j√° existe no Supabase:', existingUser.id);
            
            // ‚úÖ ATUALIZAR: Usu√°rio existente com plano ativo
            await supabaseAdmin.auth.admin.updateUserById(existingUser.id, {
              user_metadata: {
                ...existingUser.user_metadata,
                planType: planType,
                planActivated: true,
                paymentConfirmed: true,
                lastPayment: new Date().toISOString(),
                subscriptionId: subscription.id,
                customerId: customer.id,
                trialPeriod: true,
                trialEnd: new Date(finalSubscription.trial_end * 1000).toISOString()
              }
            });
            
            console.log('‚úÖ Usu√°rio atualizado com plano ativo');
            
          } else {
            console.log('üîÑ Usu√°rio n√£o existe, criando novo no Supabase...');
            
            // ‚úÖ VALIDAR: Senha deve ter pelo menos 8 caracteres
            const userPassword = metadata.password;
            if (!userPassword || userPassword.length < 8) {
              console.error('‚ùå Senha inv√°lida ou muito curta. Usu√°rio n√£o ser√° criado no Supabase.');
            } else {
              // ‚úÖ CRIAR: Novo usu√°rio com dados completos
              const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
                email: customerEmail,
                password: userPassword,
                email_confirm: true,
                user_metadata: {
                  planType: planType,
                  planActivated: true,
                  paymentConfirmed: true,
                  source: 'stripe_checkout',
                  signupDate: new Date().toISOString(),
                  lastPayment: new Date().toISOString(),
                  subscriptionId: subscription.id,
                  customerId: customer.id,
                  trialPeriod: true,
                  trialEnd: new Date(finalSubscription.trial_end * 1000).toISOString(),
                  firstName: metadata.firstName || metadata.userName?.split(' ')[0] || '',
                  lastName: metadata.lastName || metadata.userName?.split(' ').slice(1).join(' ') || '',
                  fullName: metadata.userName || '',
                  phone: metadata.phone || '',
                  signupSource: 'signup_with_plans'
                }
              });
              
              if (createError) {
                console.error('‚ùå Erro ao criar usu√°rio no Supabase:', createError.message);
              } else {
                console.log('‚úÖ Usu√°rio criado com sucesso no Supabase:', newUser.user.id);
                
                // ‚úÖ CRIAR: Perfil do usu√°rio
                try {
                  await supabaseAdmin
                    .from('user_profiles')
                    .insert({
                      id: newUser.user.id,
                      email: customerEmail,
                      first_name: metadata.firstName || metadata.userName?.split(' ')[0] || '',
                      last_name: metadata.lastName || metadata.userName?.split(' ').slice(1).join(' ') || '',
                      full_name: metadata.userName || '',
                      phone: metadata.phone || '',
                      created_at: new Date().toISOString(),
                      updated_at: new Date().toISOString()
                    });
                  
                  console.log('‚úÖ Perfil do usu√°rio criado com sucesso');
                } catch (profileError) {
                  console.error('‚ùå Erro ao criar perfil do usu√°rio:', profileError.message);
                }
              }
            }
          }
        }
      } catch (supabaseError) {
        console.error('‚ùå Erro ao criar usu√°rio no Supabase:', supabaseError.message);
        // ‚úÖ IMPORTANTE: N√£o falhar o checkout se Supabase falhar
        console.log('‚ö†Ô∏è Checkout continuar√° mesmo com erro no Supabase');
      }

      // ‚úÖ RETORNAR RESULTADO COMPLETO
      return {
        status: 'success',
        customerId: customer.id,
        subscriptionId: subscription.id,
        subscriptionStatus: finalSubscription.status,
        planType: planType,
        interval: interval,
        amount: priceConfig.amount,
        currency: 'brl',
        // ‚úÖ INFORMA√á√ïES IMPORTANTES PARA ASSINATURA
        nextBillingDate: finalSubscription.current_period_end,
        cancelAtPeriodEnd: finalSubscription.cancel_at_period_end,
        // ‚úÖ NOVO: INFORMA√á√ïES DO PER√çODO DE TESTE
        hasTrialPeriod: !!finalSubscription.trial_start,
        trialStart: finalSubscription.trial_start ? new Date(finalSubscription.trial_start * 1000).toISOString() : null,
        trialEnd: finalSubscription.trial_end ? new Date(finalSubscription.trial_end * 1000).toISOString() : null,
        trialDaysRemaining: finalSubscription.trial_end ? 
          Math.ceil((finalSubscription.trial_end - Math.floor(Date.now() / 1000)) / (24 * 60 * 60)) : 0,
        // ‚úÖ DADOS DA PRIMEIRA COBRAN√áA (pode ser null)
        firstInvoiceStatus: invoice ? invoice.status : 'not_created',
        firstPaymentStatus: invoice && invoice.payment_intent ? 'pending' : 'not_required',
        // ‚úÖ NOVO: Informa√ß√µes detalhadas do pagamento
        paymentIntentId: invoice?.payment_intent || null,
        paymentIntentStatus: invoice?.payment_intent ? 
          (typeof invoice.payment_intent === 'string' ? 'retrieved' : invoice.payment_intent.status) : 
          'not_found',
        requiresAction: finalSubscription.status === 'incomplete' && 
          (invoice?.payment_intent ? 
            (typeof invoice.payment_intent === 'string' ? false : 
             ['requires_payment_method', 'requires_confirmation'].includes(invoice.payment_intent.status)) : 
            false),
        // ‚úÖ NOVO: Instru√ß√µes para completar a assinatura
        nextSteps: finalSubscription.status === 'incomplete' ? 
          'Assinatura criada mas aguardando confirma√ß√£o do primeiro pagamento. Verifique o status da fatura.' :
          'Assinatura ativa e funcionando normalmente.',
        // ‚úÖ NOVO: Mensagem sobre per√≠odo de teste
        trialMessage: finalSubscription.trial_start ? 
          `üéÅ Per√≠odo de teste gratuito de 7 dias ativo com 3DS! Primeira cobran√ßa em ${new Date(finalSubscription.current_period_end * 1000).toLocaleDateString('pt-BR')}` :
          'Assinatura ativa sem per√≠odo de teste',
        // ‚úÖ NOVO: Informa√ß√µes sobre usu√°rio criado no Supabase
        userCreated: true,
        userEmail: customerEmail,
        userMessage: 'Usu√°rio criado com sucesso no sistema. Voc√™ pode fazer login com seu email e senha.',
        // ‚úÖ NOVO: Informa√ß√µes de seguran√ßa 3DS
        securityFeatures: {
          threeDSecure: 'automatic',
          billingAddressRequired: true,
          trialEndBehavior: 'cancel_if_no_payment_method',
          fraudProtection: 'high'
        }
      };

    } catch (error) {
      logger.error('Erro ao processar assinatura recorrente:', error);
      throw new Error(`Falha ao processar assinatura: ${error.message}`);
    }
  }

  /**
   * Detecta a URL de retorno baseada no ambiente
   */
  getReturnUrl() {
    // ‚úÖ PRIORIDADE 1: Usar APP_URL se configurado
    if (process.env.APP_URL) {
      return `${process.env.APP_URL}/payment/return`;
    }
    
    // ‚úÖ PRIORIDADE 2: Detectar ambiente de desenvolvimento
    if (process.env.NODE_ENV === 'development') {
      // ‚úÖ DESENVOLVIMENTO: Usar HTTPS local na porta 5173
      return 'https://localhost:5173/payment/return';
    }
    
    // ‚úÖ PRIORIDADE 3: Detectar ambiente de produ√ß√£o
    if (process.env.NODE_ENV === 'production') {
      return 'https://fgtsagent.com.br/payment/return';
    }
    
    // ‚úÖ FALLBACK: URL padr√£o para desenvolvimento
    return 'https://localhost:5173/payment/return';
  }

  /**
   * Detecta a URL de sucesso baseada no ambiente
   */
  getSuccessUrl(planType) {
    // ‚úÖ PRIORIDADE 1: Usar APP_URL se configurado
    if (process.env.APP_URL) {
      return `${process.env.APP_URL}/payment/success?plan=${planType}`;
    }
    
    // ‚úÖ PRIORIDADE 2: Detectar ambiente de desenvolvimento
    if (process.env.NODE_ENV === 'development') {
      // ‚úÖ DESENVOLVIMENTO: Usar HTTPS local na porta 5173
      return `https://localhost:5173/payment/success?plan=${planType}`;
    }
    
    // ‚úÖ PRIORIDADE 3: Detectar ambiente de produ√ß√£o
    if (process.env.NODE_ENV === 'production') {
      return `https://fgtsagent.com.br/payment/success?plan=${planType}`;
    }
    
    // ‚úÖ FALLBACK: URL padr√£o para desenvolvimento
    return `https://localhost:5173/payment/success?plan=${planType}`;
  }

  /**
   * Verifica se um cupom √© v√°lido
   */
  async validateCoupon(code) {
    try {
      const coupon = await stripe.coupons.retrieve(code);
      
      return {
        valid: coupon.valid,
        percentOff: coupon.percent_off,
        amountOff: coupon.amount_off,
        duration: coupon.duration
      };
    } catch (error) {
      logger.error('Erro ao validar cupom:', error);
      return { valid: false };
    }
  }

  /**
   * Trata SetupIntent bem-sucedido
   */
  async handleSetupIntentSucceeded(setupIntent) {
    try {
      logger.info(`SetupIntent bem-sucedido: ${setupIntent.id}`);
      
      // ‚úÖ EXTRAIR: Dados do SetupIntent
      const metadata = setupIntent.metadata;
      const customerEmail = metadata.userEmail;
      const planType = metadata.planType;
      const source = metadata.source;
      const interval = metadata.interval;
      
      // ‚úÖ DEBUG: Verificar dados extra√≠dos
      console.log('üîç [WEBHOOK SETUP_INTENT] Dados extra√≠dos:', {
        setupIntentId: setupIntent.id,
        customerEmail,
        planType,
        source,
        interval,
        status: setupIntent.status,
        usage: setupIntent.usage
      });
      
      // ‚úÖ VERIFICAR: Se √© um signup com SetupIntent
      if (source === 'signup_with_plans' && customerEmail && planType) {
        try {
          logger.info(`[WEBHOOK SETUP_INTENT] Processando SetupIntent para signup: ${customerEmail}`);
          
          // ‚úÖ CRIAR: Usu√°rio no Supabase AP√ìS SetupIntent confirmado
          const { supabaseAdmin } = require('../config/supabase');
          
          // ‚úÖ VERIFICAR: Se usu√°rio j√° existe (evitar duplica√ß√£o)
          const { data: existingUsers, error: listError } = await supabaseAdmin.auth.admin.listUsers();
          
          if (listError) {
            logger.error(`[WEBHOOK SETUP_INTENT] Erro ao verificar usu√°rios existentes: ${listError.message}`);
            return false;
          }
          
          const existingUser = existingUsers.users.find(u => u.email === customerEmail);
          
          if (existingUser) {
            logger.info(`[WEBHOOK SETUP_INTENT] Usu√°rio j√° existe: ${customerEmail}`);
            return true;
          }
          
          // ‚úÖ CRIAR: Novo usu√°rio no Supabase
          const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
            email: customerEmail,
            email_confirm: true,
            user_metadata: {
              planType: planType,
              interval: interval,
              source: source,
              setupIntentId: setupIntent.id,
              createdAt: new Date().toISOString()
            }
          });
          
          if (createError) {
            logger.error(`[WEBHOOK SETUP_INTENT] Erro ao criar usu√°rio: ${createError.message}`);
            return false;
          }
          
          logger.info(`[WEBHOOK SETUP_INTENT] Usu√°rio criado com sucesso: ${newUser.user.id}`);
          
          // ‚úÖ CRIAR: Perfil do usu√°rio
          const { error: profileError } = await supabaseAdmin
            .from('profiles')
            .insert({
              id: newUser.user.id,
              email: customerEmail,
              plan_type: planType,
              subscription_interval: interval,
              setup_intent_id: setupIntent.id,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
          
          if (profileError) {
            logger.error(`[WEBHOOK SETUP_INTENT] Erro ao criar perfil: ${profileError.message}`);
            // ‚úÖ NOTA: Usu√°rio foi criado, mas perfil falhou - n√£o √© cr√≠tico
          } else {
            logger.info(`[WEBHOOK SETUP_INTENT] Perfil criado com sucesso para usu√°rio: ${newUser.user.id}`);
          }
          
          return true;
          
        } catch (error) {
          logger.error(`[WEBHOOK SETUP_INTENT] Erro ao processar SetupIntent: ${error.message}`);
          return false;
        }
      } else {
        logger.info(`[WEBHOOK SETUP_INTENT] SetupIntent n√£o √© para signup: ${setupIntent.id}`);
        return true;
      }
      
    } catch (error) {
      logger.error('Erro ao processar SetupIntent bem-sucedido:', error);
      return false;
    }
  }

  /**
   * Obt√©m configura√ß√µes padr√£o para 3DS em assinaturas
   * ‚úÖ BASEADO NA DOCUMENTA√á√ÉO OFICIAL DO STRIPE
   */
  get3DSConfig() {
    return {
      // ‚úÖ 3DS AUTOM√ÅTICO: Otimiza convers√£o e seguran√ßa
      request_three_d_secure: 'automatic',
      
      // ‚úÖ COMPORTAMENTO DO TRIAL: Cancelar se n√£o houver m√©todo de pagamento
      trial_settings: {
        end_behavior: {
          missing_payment_method: 'cancel'
        }
      },
      
      // ‚úÖ COLETAR ENDERE√áO: Necess√°rio para 3DS
      billing_address_collection: 'required',
      
              // ‚úÖ PER√çODO DE TESTE: 7 dias
              trial_period_days: 7
    };
  }

  /**
   * Cria uma assinatura recorrente com free trial
   * Ideal para modelos SaaS com cobran√ßa recorrente
   */
  async createSubscriptionWithTrial(planType, customerEmail, userName, metadata = {}, interval = 'monthly') {
    try {
      console.log('üîÑ Criando assinatura recorrente com free trial:', { planType, customerEmail, interval });
      
      // ‚úÖ BUSCAR CONFIGURA√á√ÉO DO PLANO
      const priceConfig = await getPlanConfig(planType, interval);
      if (!priceConfig) {
        throw new Error(`Configura√ß√£o n√£o encontrada para o plano ${planType} - ${interval}`);
      }

      // ‚úÖ CONVERTER INTERVALO PARA FORMATO STRIPE
      const stripeInterval = interval === 'monthly' ? 'month' : 'year';
      
      // ‚úÖ BUSCAR OU CRIAR CLIENTE
      let customer;
      try {
        const existingCustomers = await stripe.customers.list({
          email: customerEmail,
          limit: 1
        });
        
        if (existingCustomers.data.length > 0) {
          customer = existingCustomers.data[0];
          console.log('‚úÖ Cliente existente encontrado:', customer.id);
        } else {
          customer = await this.createCustomer(customerEmail, userName, {
            source: 'signup_subscription',
            planType,
            interval
          });
          console.log('‚úÖ Novo cliente criado:', customer.id);
        }
      } catch (error) {
        console.error('‚ùå Erro ao buscar/criar cliente:', error);
        throw new Error(`Falha ao gerenciar cliente: ${error.message}`);
      }

      // ‚úÖ CRIAR SETUP INTENT PARA VALIDAR CART√ÉO
      const setupIntent = await stripe.setupIntents.create({
        customer: customer.id,
        payment_method_types: ['card'],
        usage: 'off_session', // ‚úÖ Para cobran√ßas futuras (assinaturas)
        metadata: {
          planType,
          interval,
          source: 'signup_subscription',
          customerEmail,
          userName: userName.trim(),
          ...metadata
        }
      });

      console.log('‚úÖ Setup Intent criado:', setupIntent.id);

      // ‚úÖ CRIAR ASSINATURA COM FREE TRIAL
      const subscription = await stripe.subscriptions.create({
        customer: customer.id,
        items: [{
          price: priceConfig.priceId,
        }],
        trial_period_days: 7, // ‚úÖ FREE TRIAL DE 7 DIAS
        trial_settings: {
          end_behavior: {
            missing_payment_method: 'pause' // ‚úÖ Pausar se n√£o houver m√©todo de pagamento (n√£o cancelar)
          }
        },
        metadata: {
          planType,
          interval,
          source: 'signup_subscription',
          customerEmail,
          userName: userName.trim(),
          ...metadata
        },
        // ‚úÖ CONFIGURA√á√ïES DE COBRAN√áA
        collection_method: 'charge_automatically',
        expand: ['latest_invoice.payment_intent'],
        // ‚úÖ IMPORTANTE: Permitir que o SetupIntent seja anexado
        payment_behavior: 'default_incomplete',
        payment_settings: {
          save_default_payment_method: 'on_subscription'
        }
      });

      console.log('‚úÖ Assinatura criada com free trial:', {
        id: subscription.id,
        status: subscription.status,
        trialEnd: subscription.trial_end,
        currentPeriodEnd: subscription.current_period_end
      });

      // ‚úÖ RETORNAR DADOS COMPLETOS
      return {
        subscription,
        setupIntent,
        customer,
        planConfig: priceConfig
      };

    } catch (error) {
      console.error('‚ùå Erro ao criar assinatura com free trial:', error);
      throw new Error(`Falha ao criar assinatura: ${error.message}`);
    }
  }

  /**
   * Anexa um m√©todo de pagamento a uma assinatura existente
   * Necess√°rio para manter a assinatura ativa ap√≥s o free trial
   */
  async attachPaymentMethodToSubscription(subscriptionId, paymentMethodId) {
    try {
      console.log('üîÑ Anexando m√©todo de pagamento √† assinatura:', { subscriptionId, paymentMethodId });

      // ‚úÖ 1. ANEXAR M√âTODO DE PAGAMENTO AO CLIENTE
      const subscription = await stripe.subscriptions.retrieve(subscriptionId, {
        expand: ['customer', 'default_payment_method']
      });

      if (!subscription.customer) {
        throw new Error('Assinatura n√£o possui cliente associado');
      }

      const customerId = typeof subscription.customer === 'string' 
        ? subscription.customer 
        : subscription.customer.id;

      // ‚úÖ 2. ANEXAR M√âTODO DE PAGAMENTO AO CLIENTE
      await stripe.paymentMethods.attach(paymentMethodId, {
        customer: customerId
      });

      // ‚úÖ 3. DEFINIR COMO M√âTODO PADR√ÉO DO CLIENTE
      await stripe.customers.update(customerId, {
        invoice_settings: {
          default_payment_method: paymentMethodId
        }
      });

      // ‚úÖ 4. DEFINIR COMO M√âTODO PADR√ÉO DA ASSINATURA
      const updatedSubscription = await stripe.subscriptions.update(subscriptionId, {
        default_payment_method: paymentMethodId
      });

      console.log('‚úÖ M√©todo de pagamento anexado com sucesso:', {
        subscriptionId,
        paymentMethodId,
        customerId,
        status: updatedSubscription.status
      });

      return {
        subscription: updatedSubscription,
        paymentMethod: paymentMethodId,
        customer: customerId
      };

    } catch (error) {
      console.error('‚ùå Erro ao anexar m√©todo de pagamento:', error);
      throw new Error(`Falha ao anexar m√©todo de pagamento: ${error.message}`);
    }
  }

  /**
   * Realiza login autom√°tico ap√≥s cria√ß√£o de usu√°rio via webhook
   */
  async performAutoLoginAfterWebhook(email, password, userData) {
    try {
      logger.info(`[AUTO-LOGIN] Tentando login autom√°tico para: ${email}`);
      
      // ‚úÖ CRIAR: Sess√£o no Supabase
      const { supabaseAdmin } = require('../config/supabase');
      
      // ‚úÖ VERIFICAR: Se usu√°rio existe e est√° ativo
      const { data: { user }, error: userError } = await supabaseAdmin.auth.admin.getUserByEmail(email);
      
      if (userError || !user) {
        throw new Error(`Usu√°rio n√£o encontrado: ${email}`);
      }
      
      if (!user.email_confirmed_at) {
        throw new Error(`Email n√£o confirmado: ${email}`);
      }
      
      // ‚úÖ CRIAR: Sess√£o de autentica√ß√£o
      const { data: { session }, error: sessionError } = await supabaseAdmin.auth.admin.generateLink({
        type: 'magiclink',
        email: email,
        options: {
          redirectTo: `${process.env.FRONTEND_URL || 'https://localhost:5173'}/dashboard`,
          data: {
            firstName: userData.firstName,
            lastName: userData.lastName,
            planType: userData.planType,
            stripeCustomerId: userData.stripeCustomerId,
            stripeSubscriptionId: userData.stripeSubscriptionId,
            source: 'webhook_auto_login'
          }
        }
      });
      
      if (sessionError) {
        throw new Error(`Erro ao criar sess√£o: ${sessionError.message}`);
      }
      
      // ‚úÖ ARMAZENAR: Dados da sess√£o para uso posterior
      const sessionData = {
        accessToken: session.access_token,
        refreshToken: session.refresh_token,
        userId: user.id,
        email: user.email,
        userData: userData,
        createdAt: new Date().toISOString(),
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 horas
      };
      
      // ‚úÖ SALVAR: Sess√£o no Redis ou banco para uso posterior
      // TODO: Implementar armazenamento de sess√£o
      logger.info(`[AUTO-LOGIN] Sess√£o criada com sucesso para: ${email}`);
      
      return {
        success: true,
        session: sessionData,
        user: user
      };
      
    } catch (error) {
      logger.error(`[AUTO-LOGIN] Erro no login autom√°tico: ${error.message}`);
      throw error;
    }
  }

  /**
   * Limpa res√≠duos de sess√£o falhada ap√≥s login autom√°tico
   */
  async cleanupFailedAutoLogin(email) {
    try {
      logger.info(`[CLEANUP] Limpando res√≠duos de sess√£o falhada para: ${email}`);
      
      // ‚úÖ VERIFICAR: Se h√° sess√µes ativas para este email
      const { supabaseAdmin } = require('../config/supabase');
      
      // ‚úÖ BUSCAR: Usu√°rio por email
      const { data: { user }, error: userError } = await supabaseAdmin.auth.admin.getUserByEmail(email);
      
      if (userError || !user) {
        logger.warn(`[CLEANUP] Usu√°rio n√£o encontrado para limpeza: ${email}`);
        return false;
      }
      
      // ‚úÖ IMPORTANTE: Revogar todas as sess√µes ativas do usu√°rio
      const { error: revokeError } = await supabaseAdmin.auth.admin.updateUserById(
        user.id,
        { 
          app_metadata: {
            ...user.app_metadata,
            last_cleanup: new Date().toISOString(),
            failed_auto_login: true
          }
        }
      );
      
      if (revokeError) {
        logger.warn(`[CLEANUP] Erro ao atualizar metadados: ${revokeError.message}`);
      }
      
      logger.info(`[CLEANUP] Limpeza de res√≠duos conclu√≠da para: ${email}`);
      return true;
      
    } catch (error) {
      logger.error(`[CLEANUP] Erro na limpeza de res√≠duos: ${error.message}`);
      return false;
    }
  }
}

module.exports = new StripeService(); 