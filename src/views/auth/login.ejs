<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 mt-5">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">Login</h4>
                </div>
                <div class="card-body p-4">
                    <div id="loginError" class="alert alert-danger d-none" role="alert"></div>
                    <div id="confirmationSection" class="alert alert-warning d-none" role="alert">
                        <p>Você ainda não confirmou seu email. Por favor, verifique sua caixa de entrada.</p>
                        <form id="resendForm" class="mt-2">
                            <input type="hidden" id="resendEmail" name="email">
                            <button type="submit" class="btn btn-primary">Reenviar email de confirmação</button>
                        </form>
                    </div>
                    
                    <form id="loginForm">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="password" class="form-label">Senha</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                                <input type="password" class="form-control" id="password" name="password" required>
                                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="rememberMe">
                                <label class="form-check-label" for="rememberMe">
                                    Lembrar-me
                                </label>
                            </div>
                            <a href="/auth/reset-password" class="text-decoration-none">Esqueceu a senha?</a>
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-sign-in-alt me-2"></i>Entrar
                            </button>
                        </div>
                    </form>

                    <div class="mt-3">
                        <div class="d-flex align-items-center justify-content-center my-3">
                            <hr class="flex-grow-1">
                            <span class="mx-2 text-muted">ou</span>
                            <hr class="flex-grow-1">
                        </div>
                        
                        <div class="d-grid">
                            <a href="<%= process.env.SUPABASE_URL %>/auth/v1/authorize?provider=google&redirect_to=<%= encodeURIComponent(process.env.OAUTH_APP_REDIRECT_URL) %>" class="btn btn-outline-danger">
                                <i class="fab fa-google me-2"></i>Entrar com Google
                            </a>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-center py-3">
                    <p class="mb-0">Não possui uma conta? <a href="/auth/signup" class="text-decoration-none">Cadastre-se</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Toggle password visibility
    const togglePassword = document.getElementById('togglePassword');
    const password = document.getElementById('password');
    
    togglePassword.addEventListener('click', function() {
        const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
        password.setAttribute('type', type);
        this.querySelector('i').classList.toggle('fa-eye');
        this.querySelector('i').classList.toggle('fa-eye-slash');
    });
    
    // Handle form submission
    const loginForm = document.getElementById('loginForm');
    const loginError = document.getElementById('loginError');
    const confirmationSection = document.getElementById('confirmationSection');
    const resendForm = document.getElementById('resendForm');
    const resendEmail = document.getElementById('resendEmail');
    
    loginForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const rememberMe = document.getElementById('rememberMe').checked;
        
        // Esconder seção de confirmação de email
        confirmationSection.classList.add('d-none');
        
        // Mostrar mensagem de carregamento
        loginError.textContent = "Autenticando...";
        loginError.classList.remove('d-none', 'alert-danger');
        loginError.classList.add('alert-info');
        
        try {
            console.log("Enviando solicitação de login:", { email });
            
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email, password })
            });
            
            const data = await response.json();
            console.log("Resposta recebida:", data);
            
            if (!response.ok) {
                // Verificar se é erro de email não confirmado
                if (data.message && data.message.includes('confirmar seu email')) {
                    // Mostrar seção para reenviar email de confirmação
                    resendEmail.value = email;
                    confirmationSection.classList.remove('d-none');
                    loginError.classList.add('d-none');
                } else {
                    // Mostrar mensagem de erro normal
                    throw new Error(data.message || 'Falha ao realizar login. Verifique suas credenciais.');
                }
                return;
            }
            
            // Verificar todas as formas possíveis onde o token pode estar na resposta
            let token = null;
            
            // Verificar estrutura de resposta antiga
            if (data.session && data.session.accessToken) {
                token = data.session.accessToken;
            } 
            // Verificar estrutura de resposta nova
            else if (data.session && data.session.access_token) {
                token = data.session.access_token;
            }
            // Verificar resposta direta do Supabase
            else if (data.data && data.data.session && data.data.session.access_token) {
                token = data.data.session.access_token;
            }
            
            if (token) {
                console.log("Token recebido (primeiros 10 caracteres):", token.substring(0, 10) + "...");
                
                // Armazenar em múltiplos locais para redundância
                sessionStorage.setItem('authToken', token);
                localStorage.setItem('authToken', token);
                
                // Configurar cookie para autenticação via servidor
                document.cookie = `authToken=${token}; path=/; max-age=86400; SameSite=Lax`;
                console.log("Token armazenado em sessionStorage, localStorage e cookie");
                
                if (data.user) {
                    sessionStorage.setItem('userId', data.user.id);
                    sessionStorage.setItem('userEmail', data.user.email);
                } else if (data.data && data.data.user) {
                    sessionStorage.setItem('userId', data.data.user.id);
                    sessionStorage.setItem('userEmail', data.data.user.email);
                }
            } else {
                console.warn("Aviso: Nenhum token de acesso encontrado na resposta!", data);
                // Verificar estrutura JSON completa para debug
                console.log("Estrutura completa da resposta:", JSON.stringify(data));
            }
            
            // Login successful, redirect to dashboard
            loginError.textContent = "Login bem-sucedido! Redirecionando...";
            loginError.classList.remove('alert-danger', 'alert-info');
            loginError.classList.add('alert-success');
            
            // Pequeno atraso para dar tempo de processar o armazenamento e mostrar a mensagem
            setTimeout(() => {
                // Obter URL de redirecionamento da query string ou usar o valor passado pelo servidor
                const urlParams = new URLSearchParams(window.location.search);
                const redirectParam = urlParams.get('redirect') || '<%= typeof redirect !== "undefined" ? redirect : "" %>';
                
                // Tratar corretamente o redirecionamento para garantir que seja um caminho válido
                let redirectUrl = '/dashboard'; // Valor padrão
                
                if (redirectParam) {
                    try {
                        // Garantir que o parâmetro seja decodificado corretamente
                        const decodedRedirect = decodeURIComponent(redirectParam);
                        console.log("Parâmetro de redirecionamento decodificado:", decodedRedirect);
                        
                        // Verificar se é um caminho válido (começa com /)
                        if (decodedRedirect.startsWith('/')) {
                            redirectUrl = decodedRedirect;
                        } else {
                            console.warn("Caminho de redirecionamento inválido:", decodedRedirect);
                        }
                    } catch (error) {
                        console.error("Erro ao decodificar parâmetro de redirecionamento:", error);
                    }
                }
                
                console.log("Redirecionando para:", redirectUrl);
                window.location.href = redirectUrl;
            }, 1000);
            
        } catch (error) {
            console.error("Erro de login:", error);
            loginError.textContent = error.message;
            loginError.classList.remove('alert-info', 'alert-success');
            loginError.classList.add('alert-danger');
            loginError.classList.remove('d-none');
        }
    });
    
    // Formulário para reenviar email de confirmação
    resendForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const email = resendEmail.value;
        
        try {
            const response = await fetch('/api/auth/resend-confirmation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.message || 'Falha ao reenviar email de confirmação.');
            }
            
            // Mensagem de sucesso
            confirmationSection.classList.add('d-none');
            loginError.textContent = data.message || "Email de confirmação reenviado com sucesso. Verifique sua caixa de entrada.";
            loginError.classList.remove('d-none', 'alert-danger', 'alert-info');
            loginError.classList.add('alert-success');
            
        } catch (error) {
            loginError.textContent = error.message;
            loginError.classList.remove('d-none', 'alert-info', 'alert-success');
            loginError.classList.add('alert-danger');
        }
    });
    
    // Check for redirect messages
    const urlParams = new URLSearchParams(window.location.search);
    const message = urlParams.get('message') || '<%= typeof message !== "undefined" ? message : "" %>';
    const sessionExpired = urlParams.get('sessionExpired') === 'true';
    
    // Obter o parâmetro de redirecionamento passado pelo servidor
    const serverRedirect = '<%= typeof redirect !== "undefined" ? redirect : "" %>';

    if (message) {
        const success = urlParams.get('success') === 'true';
        
        loginError.textContent = message;
        
        if (success) {
            loginError.classList.remove('alert-danger', 'alert-warning');
            loginError.classList.add('alert-success');
        } else if (sessionExpired) {
            // Destacar a mensagem de sessão expirada
            loginError.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${message}`;
            loginError.classList.remove('alert-danger', 'alert-success');
            loginError.classList.add('alert-warning');
        } else {
            loginError.classList.remove('alert-success', 'alert-warning');
            loginError.classList.add('alert-danger');
        }
        
        loginError.classList.remove('d-none');
    }
});
</script> 