<div class="container py-4">
    <h1 class="h3 mb-4">Configuração do Agente</h1>
    <!-- Seção de Modo do Agente -->
    <div class="card mb-4">
        <div class="card-header">Modo do Agente</div>
        <div class="card-body">
            <form action="/agents/mode" method="post">
                <div class="mb-3">
                    <label for="agent-mode" class="form-label">Selecione o modo do agente</label>
                    <select id="agent-mode" name="mode" class="form-select">
                        <option value="full" <%= mode === 'full' ? 'selected' : '' %>>Full - ouve, executa ações e responde</option>
                        <option value="half" <%= mode === 'half' ? 'selected' : '' %>>Half - ouve e executa ações; usuário responde</option>
                        <option value="on demand" <%= mode === 'on demand' ? 'selected' : '' %>>On Demand - só responde quando acionado no chat</option>
                    </select>
                    <div id="mode-desc" class="form-text mt-2">Full: agente ouve, executa ações (simulações, proposta...) e responde.</div>
                </div>
                <button type="submit" class="btn btn-primary">Salvar Modo</button>
            </form>
        </div>
    </div>
    <div id="kbDocumentsSection" class="mb-4">
        <h5 class="mb-3">Documentos da Base de Conhecimento</h5>
        <div id="kbDocumentsList" class="list-group mb-2">
            <div class="text-muted">Carregando documentos...</div>
        </div>
    </div>
    <form id="agentUploadForm">
        <div class="mb-3">
            <label for="kbFiles" class="form-label">Adicionar Documentos à Base de Conhecimento</label>
            <div id="dropArea" class="border border-2 border-dashed rounded p-4 text-center mb-2 bg-light" style="cursor:pointer;">
                <i class="fas fa-cloud-upload-alt fa-2x mb-2 text-primary"></i>
                <div>Arraste e solte arquivos aqui ou clique para selecionar</div>
                <input type="file" class="form-control d-none" id="kbFiles" name="kbFiles" multiple required accept=".txt,.doc,.docx,.pdf,.csv,.xlsx,.xls,.xml,image/*">
            </div>
            <div class="form-text">Tipos aceitos: .txt, .doc, .docx, .pdf, .csv, .xlsx, .xls, .xml, imagens (jpg, png, etc)</div>
            <div id="selectedFilesList" class="small mt-2"></div>
        </div>
        <button type="submit" class="btn btn-success">
            <i class="fas fa-cloud-upload-alt me-2"></i>Enviar Documento
        </button>
        <span id="kbUploadStatus" class="ms-3"></span>
    </form>
</div>
<script>
// Função para buscar e exibir documentos da base de conhecimento
async function loadKnowledgeBaseDocuments() {
    const kbDocumentsList = document.getElementById('kbDocumentsList');
    kbDocumentsList.innerHTML = '<div class="text-muted">Carregando documentos...</div>';
    try {
        const res = await fetch('/api/knowledge-base');
        if (!res.ok) throw new Error('Erro ao buscar documentos');
        const data = await res.json();
        if (data.success && data.data && data.data.length > 0) {
            kbDocumentsList.innerHTML = data.data.map(doc =>
                `<a href="#" class="list-group-item list-group-item-action">
                    <strong>${doc.title || doc.originalName || 'Documento sem título'}</strong>
                    <span class="text-muted small ms-2">${doc.created_at ? new Date(doc.created_at).toLocaleString() : ''}</span>
                </a>`
            ).join('');
        } else {
            kbDocumentsList.innerHTML = '<div class="text-muted">Nenhum documento encontrado.</div>';
        }
    } catch (err) {
        kbDocumentsList.innerHTML = '<div class="text-danger">Erro ao carregar documentos.</div>';
    }
}
// Chamar ao carregar a página
loadKnowledgeBaseDocuments();
// Drag and drop para upload de arquivos
const dropArea = document.getElementById('dropArea');
const kbFilesInput = document.getElementById('kbFiles');
const selectedFilesList = document.getElementById('selectedFilesList');

// Lista de arquivos em memória
let filesList = [];

dropArea.addEventListener('click', () => kbFilesInput.click());

dropArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropArea.classList.add('bg-primary', 'bg-opacity-10');
});
dropArea.addEventListener('dragleave', (e) => {
    e.preventDefault();
    dropArea.classList.remove('bg-primary', 'bg-opacity-10');
});
dropArea.addEventListener('drop', (e) => {
    e.preventDefault();
    dropArea.classList.remove('bg-primary', 'bg-opacity-10');
    addFilesToList(e.dataTransfer.files);
});
kbFilesInput.addEventListener('change', () => {
    addFilesToList(kbFilesInput.files);
});

function addFilesToList(fileList) {
    // Adiciona arquivos sem duplicar
    for (let file of fileList) {
        if (!filesList.some(f => f.name === file.name && f.size === file.size && f.lastModified === file.lastModified)) {
            filesList.push(file);
        }
    }
    updateSelectedFilesList();
}

function removeFileFromList(index) {
    filesList.splice(index, 1);
    updateSelectedFilesList();
}

function updateSelectedFilesList() {
    // Atualiza o input de arquivos
    const dataTransfer = new DataTransfer();
    filesList.forEach(f => dataTransfer.items.add(f));
    kbFilesInput.files = dataTransfer.files;
    // Atualiza a lista visual
    if (filesList.length > 0) {
        selectedFilesList.innerHTML = filesList.map((f, i) =>
            `<span class='badge bg-secondary me-1 mb-1 d-inline-flex align-items-center'>${f.name}
                <button type='button' class='btn btn-sm btn-link text-danger ms-1 p-0 remove-file-btn' data-index='${i}' title='Remover'>
                    <i class='fas fa-trash'></i>
                </button>
            </span>`
        ).join(' ');
        // Adiciona o event listener para cada botão de remover
        selectedFilesList.querySelectorAll('.remove-file-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const idx = parseInt(this.getAttribute('data-index'));
                removeFileFromList(idx);
            });
        });
    } else {
        selectedFilesList.innerHTML = '';
    }
}
// Upload de documentos
const agentUploadForm = document.getElementById('agentUploadForm');
const kbUploadStatus = document.getElementById('kbUploadStatus');
agentUploadForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    kbUploadStatus.textContent = 'Enviando...';
    const formData = new FormData(agentUploadForm);
    try {
        // Faz o upload dos arquivos diretamente
        const uploadRes = await fetch('/api/agent/upload-kb', {
            method: 'POST',
            body: formData
        });
        if (uploadRes.ok) {
            kbUploadStatus.textContent = 'Upload realizado com sucesso!';
            kbUploadStatus.className = 'text-success ms-3';
            // Limpa a lista de arquivos após upload bem-sucedido
            filesList = [];
            kbFilesInput.value = '';
            updateSelectedFilesList();
        } else {
            kbUploadStatus.textContent = 'Erro ao enviar.';
            kbUploadStatus.className = 'text-danger ms-3';
        }
    } catch (err) {
        kbUploadStatus.textContent = 'Erro ao enviar.';
        kbUploadStatus.className = 'text-danger ms-3';
    }
});
</script>
<style>
#dropArea {
    transition: background 0.2s;
    min-height: 120px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}
#dropArea.bg-primary.bg-opacity-10 {
    border-color: #0d6efd !important;
    background: rgba(13, 110, 253, 0.08) !important;
}
</style>
<hr>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const modeSelect = document.getElementById('agent-mode');
    const modeDesc = document.getElementById('mode-desc');
    // Mapeamento de descrições resumidas
    const descriptions = {
        full: 'agente ouve, executa as ações (simulações, proposta...) e responde.',
        half: 'agente ouve e executa ações; o usuário responde.',
        'on demand': 'agente assume apenas quando acionado no chat.'
    };
    function updateModeDesc() {
        const selectedOption = modeSelect.options[modeSelect.selectedIndex].text;
        const key = modeSelect.value;
        const desc = descriptions[key] || '';
        modeDesc.textContent = `${selectedOption}. ${desc}`;
    }
    // Atualizar ao mudar
    modeSelect.addEventListener('change', updateModeDesc);
    // Atualização inicial
    updateModeDesc();
});
</script> 