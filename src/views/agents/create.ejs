<div class="container py-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="h2 mb-0 text-primary">
                <i class="fas fa-robot me-2"></i>Criar Novo Agente
            </h1>
            <p class="text-muted mt-2">Configure um novo agente de IA para automatizar tarefas e interagir com seus usuários</p>
        </div>
        <div class="col-md-4 text-md-end d-flex align-items-center justify-content-md-end mt-3 mt-md-0">
            <a href="/agents" class="btn btn-outline-secondary me-2">
                <i class="fas fa-arrow-left me-2"></i>Voltar
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                    <form id="createAgentForm">
                        <div class="row mb-4">
                            <!-- Informações básicas -->
                            <div class="col-md-7">
                                <h5 class="mb-3">Informações Básicas</h5>
                                
                                <div class="mb-3">
                                    <label for="agentName" class="form-label">Nome do Agente <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="agentName" name="name" required
                                        placeholder="Ex: Assistente de Atendimento">
                                    <div class="form-text">Um nome descritivo para identificar seu agente.</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="agentDescription" class="form-label">Descrição</label>
                                    <textarea class="form-control" id="agentDescription" name="description" rows="3"
                                        placeholder="Descreva o propósito deste agente..."></textarea>
                                    <div class="form-text">Uma descrição clara do que o agente faz e como deve ser utilizado.</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="agentOrganization" class="form-label">Organização <span class="text-danger">*</span></label>
                                    <select class="form-select" id="agentOrganization" name="organization_id" required>
                                        <option value="" selected disabled>Selecione uma organização</option>
                                    </select>
                                </div>
                                
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input" type="checkbox" id="agentActive" name="is_active" checked>
                                    <label class="form-check-label" for="agentActive">Ativar Agente</label>
                                    <div class="form-text">Agentes ativos podem ser acessados por usuários de acordo com as permissões.</div>
                                </div>
                            </div>
                            
                            <!-- Seleção de template -->
                            <div class="col-md-5">
                                <h5 class="mb-3">Template de Fluxo</h5>
                                <div class="mb-3">
                                    <label for="agentTemplate" class="form-label">Selecione um Template <span class="text-danger">*</span></label>
                                    <select class="form-select" id="agentTemplate" name="template_id" required>
                                        <option value="" selected disabled>Carregando templates...</option>
                                    </select>
                                    <div class="form-text">O template determina o tipo de fluxo que o agente seguirá para processar interações.</div>
                                </div>
                                
                                <div class="template-info mb-4 p-3 border rounded bg-light">
                                    <h6 class="mb-2" id="templateTitle">Informações do Template</h6>
                                    <p class="mb-2 small text-muted" id="templateDescription">
                                        Selecione um template para ver mais detalhes.
                                    </p>
                                    <div id="templateParameters" class="d-none">
                                        <hr class="my-2">
                                        <h6 class="mb-2">Parâmetros</h6>
                                        <div id="templateParamsList" class="small">
                                            <!-- Os parâmetros serão preenchidos dinamicamente -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Parâmetros do template -->
                        <div id="templateConfigSection" class="d-none mb-4">
                            <h5 class="mb-3">Configuração do Template</h5>
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>Configure os parâmetros abaixo para personalizar o funcionamento do seu agente.
                            </div>
                            
                            <div id="templateConfigFields" class="row g-3">
                                <!-- Os campos serão criados dinamicamente com base no template selecionado -->
                            </div>
                        </div>
                        
                        <!-- Autenticação e Acesso -->
                        <div class="mb-4">
                            <h5 class="mb-3">Acesso e Segurança</h5>
                            
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="agentPublic" name="is_public">
                                        <label class="form-check-label" for="agentPublic">Acesso Público</label>
                                        <div class="form-text">Se habilitado, o agente poderá ser acessado sem autenticação através de uma URL compartilhável.</div>
                                    </div>
                                </div>
                                
                                <div class="col-md-6">
                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="agentCollectData" name="collect_data" checked>
                                        <label class="form-check-label" for="agentCollectData">Coletar Dados de Interação</label>
                                        <div class="form-text">Armazena as interações com o agente para análise e melhoria contínua.</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="button" class="btn btn-secondary me-md-2" onclick="location.href='/agents'">Cancelar</button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i>Criar Agente
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Elementos do formulário
    const form = document.getElementById('createAgentForm');
    const templateSelect = document.getElementById('agentTemplate');
    const organizationSelect = document.getElementById('agentOrganization');
    const templateTitle = document.getElementById('templateTitle');
    const templateDescription = document.getElementById('templateDescription');
    const templateParameters = document.getElementById('templateParameters');
    const templateParamsList = document.getElementById('templateParamsList');
    const templateConfigSection = document.getElementById('templateConfigSection');
    const templateConfigFields = document.getElementById('templateConfigFields');
    
    // Carregar organizações
    loadOrganizations();
    
    // Carregar templates
    loadTemplates();
    
    // Eventos
    templateSelect.addEventListener('change', onTemplateChange);
    form.addEventListener('submit', handleSubmit);
    
    // Função para carregar organizações
    async function loadOrganizations() {
        try {
            const response = await fetch('/api/organizations', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error('Falha ao carregar organizações');
            }
            
            const result = await response.json();
            
            if (result.success && result.data) {
                organizationSelect.innerHTML = '<option value="" selected disabled>Selecione uma organização</option>';
                
                result.data.forEach(org => {
                    const option = document.createElement('option');
                    option.value = org.id;
                    option.textContent = org.name;
                    organizationSelect.appendChild(option);
                });
                
                // Se tiver apenas uma organização, selecioná-la automaticamente
                if (result.data.length === 1) {
                    organizationSelect.value = result.data[0].id;
                }
            } else {
                showNotification('Erro ao carregar organizações', 'error');
            }
        } catch (error) {
            console.error('Erro ao carregar organizações:', error);
            showNotification('Não foi possível carregar as organizações', 'error');
        }
    }
    
    // Função para carregar templates
    async function loadTemplates() {
        try {
            const response = await fetch('/api/templates', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error('Falha ao carregar templates');
            }
            
            const result = await response.json();
            
            if (result.success && result.data) {
                templateSelect.innerHTML = '<option value="" selected disabled>Selecione um template</option>';
                
                result.data.forEach(template => {
                    const option = document.createElement('option');
                    option.value = template.id;
                    option.textContent = template.name;
                    option.dataset.description = template.description || '';
                    option.dataset.config = JSON.stringify(template.configuration || {});
                    templateSelect.appendChild(option);
                });
            } else {
                templateSelect.innerHTML = '<option value="" selected disabled>Nenhum template disponível</option>';
                showNotification('Nenhum template disponível', 'warning');
            }
        } catch (error) {
            console.error('Erro ao carregar templates:', error);
            templateSelect.innerHTML = '<option value="" selected disabled>Erro ao carregar templates</option>';
            showNotification('Não foi possível carregar os templates', 'error');
        }
    }
    
    // Função executada quando o template é alterado
    function onTemplateChange() {
        const selectedOption = templateSelect.options[templateSelect.selectedIndex];
        
        if (!selectedOption || !selectedOption.value) {
            // Reset template info
            templateTitle.textContent = 'Informações do Template';
            templateDescription.textContent = 'Selecione um template para ver mais detalhes.';
            templateParameters.classList.add('d-none');
            templateConfigSection.classList.add('d-none');
            return;
        }
        
        // Atualizar informações do template
        templateTitle.textContent = selectedOption.textContent;
        templateDescription.textContent = selectedOption.dataset.description || 'Sem descrição disponível.';
        
        // Verificar se há configuração
        let config = {};
        try {
            config = JSON.parse(selectedOption.dataset.config || '{}');
        } catch (e) {
            console.error('Erro ao parsear configuração do template:', e);
            config = {};
        }
        
        // Mostrar parâmetros na seção de informações
        if (config.parameters && config.parameters.length > 0) {
            templateParameters.classList.remove('d-none');
            templateParamsList.innerHTML = config.parameters.map(param => 
                `<div><strong>${param.name}:</strong> ${param.description || 'Sem descrição'}</div>`
            ).join('');
            
            // Criar campos de configuração
            templateConfigSection.classList.remove('d-none');
            templateConfigFields.innerHTML = '';
            
            config.parameters.forEach(param => {
                const fieldId = `param_${param.name.replace(/[^a-zA-Z0-9]/g, '_')}`;
                
                let fieldHtml = `
                    <div class="col-md-6 mb-3">
                        <label for="${fieldId}" class="form-label">${param.name}${param.required ? ' <span class="text-danger">*</span>' : ''}</label>
                `;
                
                // Diferentes tipos de campos
                if (param.type === 'select' && param.options) {
                    fieldHtml += `
                        <select class="form-control" id="${fieldId}" name="config.${param.name}" ${param.required ? 'required' : ''}>
                            <option value="" disabled selected>Selecione uma opção</option>
                            ${param.options.map(opt => `<option value="${opt.value}">${opt.label}</option>`).join('')}
                        </select>
                    `;
                } else if (param.type === 'textarea') {
                    fieldHtml += `
                        <textarea class="form-control" id="${fieldId}" name="config.${param.name}" 
                            rows="3" ${param.required ? 'required' : ''}
                            placeholder="${param.placeholder || ''}"></textarea>
                    `;
                } else if (param.type === 'checkbox') {
                    fieldHtml = `
                        <div class="col-md-6 mb-3">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="${fieldId}" name="config.${param.name}">
                                <label class="form-check-label" for="${fieldId}">${param.name}</label>
                            </div>
                    `;
                } else {
                    // Default to text input
                    fieldHtml += `
                        <input type="${param.type || 'text'}" class="form-control" id="${fieldId}" 
                            name="config.${param.name}" ${param.required ? 'required' : ''}
                            placeholder="${param.placeholder || ''}" 
                            ${param.pattern ? `pattern="${param.pattern}"` : ''}>
                    `;
                }
                
                fieldHtml += `
                        <div class="form-text">${param.description || ''}</div>
                    </div>
                `;
                
                templateConfigFields.innerHTML += fieldHtml;
            });
        } else {
            templateParameters.classList.add('d-none');
            templateConfigSection.classList.add('d-none');
        }
    }
    
    // Função para enviar o formulário
    async function handleSubmit(e) {
        e.preventDefault();
        
        // Validar formulário
        if (!form.checkValidity()) {
            e.stopPropagation();
            form.classList.add('was-validated');
            return;
        }
        
        // Mostrar indicador de loading
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processando...';

        try {
            // Coletar dados do formulário
            const formData = new FormData(form);
            const agentData = {
                name: formData.get('name'),
                description: formData.get('description'),
                organization_id: formData.get('organization_id'),
                template_id: formData.get('template_id'),
                is_active: formData.get('is_active') === 'on',
                is_public: formData.get('is_public') === 'on',
                collect_data: formData.get('collect_data') === 'on',
                configuration: {}
            };
            
            // Coletar configurações específicas do template
            const configParams = {};
            for (const [key, value] of formData.entries()) {
                if (key.startsWith('config.')) {
                    const paramName = key.replace('config.', '');
                    configParams[paramName] = value;
                }
            }
            
            // Adicionar configurações ao payload
            if (Object.keys(configParams).length > 0) {
                agentData.configuration = configParams;
            }
            
            // Enviar dados para a API
            showNotification('Criando agente e configurando workflows...', 'info');
            
            const response = await fetch('/api/agents', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(agentData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Redirecionar para a página do agente
                showNotification('Agente criado com sucesso!', 'success');
                window.location.href = `/agents/${result.data.id}?created=true`;
            } else {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalBtnText;
                showNotification(result.message || 'Erro ao criar agente', 'error');
            }
        } catch (error) {
            console.error('Erro ao criar agente:', error);
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnText;
            showNotification('Não foi possível criar o agente. Tente novamente.', 'error');
        }
    }
    
    // Função para mostrar notificações
    function showNotification(message, type = 'info') {
        const colorMap = {
            success: '#28a745',
            error: '#dc3545',
            warning: '#ffc107',
            info: '#17a2b8'
        };

        Toastify({
            text: message,
            duration: 5000,
            close: true,
            gravity: 'top',
            position: 'right',
            backgroundColor: colorMap[type] || colorMap.info,
            stopOnFocus: true
        }).showToast();
    }
});
</script> 