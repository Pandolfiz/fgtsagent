/**
 * Script de teste para o sistema de controle de templates Meta API
 */
const { supabaseAdmin } = require('../src/config/supabase');
const metaTemplateControlService = require('../src/services/metaTemplateControlService');

async function testMetaTemplateControl() {
  console.log('üß™ Iniciando testes do sistema de controle de templates Meta API...\n');

  try {
    // 1. Testar verifica√ß√£o de inst√¢ncia Meta API
    console.log('1Ô∏è‚É£ Testando verifica√ß√£o de inst√¢ncia Meta API...');
    
    // Buscar uma inst√¢ncia existente
    const { data: credentials, error: credsError } = await supabaseAdmin
      .from('whatsapp_credentials')
      .select('id, connection_type, wpp_access_token, wpp_number_id, wpp_business_account_id')
      .limit(1);

    if (credsError || !credentials || credentials.length === 0) {
      console.log('‚ùå Nenhuma credencial encontrada para teste');
      return;
    }

    const testInstanceId = credentials[0].id;
    console.log(`üìã Testando com inst√¢ncia: ${testInstanceId}`);
    console.log(`üìã Tipo de conex√£o: ${credentials[0].connection_type}`);

    const isMetaAPI = await metaTemplateControlService.isMetaAPIInstance(testInstanceId);
    console.log(`‚úÖ √â Meta API: ${isMetaAPI}\n`);

    // 2. Testar busca de √∫ltima mensagem do usu√°rio
    console.log('2Ô∏è‚É£ Testando busca de √∫ltima mensagem do usu√°rio...');
    
    // Buscar uma conversa existente
    const { data: messages, error: messagesError } = await supabaseAdmin
      .from('messages')
      .select('conversation_id, instance_id')
      .eq('instance_id', testInstanceId)
      .limit(1);

    if (messagesError || !messages || messages.length === 0) {
      console.log('‚ùå Nenhuma mensagem encontrada para teste');
      return;
    }

    const testConversationId = messages[0].conversation_id;
    console.log(`üìã Testando com conversa: ${testConversationId}`);

    const lastUserMessage = await metaTemplateControlService.getLastUserMessage(
      testConversationId, 
      testInstanceId
    );

    if (lastUserMessage) {
      console.log(`‚úÖ √öltima mensagem do usu√°rio encontrada:`);
      console.log(`   üìÖ Timestamp: ${lastUserMessage.timestamp}`);
      console.log(`   üìù Conte√∫do: ${lastUserMessage.content.substring(0, 50)}...`);
      
      const isOlderThan24h = metaTemplateControlService.isLastMessageOlderThan24Hours(lastUserMessage);
      console.log(`   ‚è∞ Mais de 24h: ${isOlderThan24h}`);
    } else {
      console.log('‚ÑπÔ∏è Nenhuma mensagem do usu√°rio encontrada');
    }
    console.log('');

    // 3. Testar status completo de envio
    console.log('3Ô∏è‚É£ Testando status completo de envio...');
    
    const sendStatus = await metaTemplateControlService.checkMessageSendStatus(
      testConversationId, 
      testInstanceId
    );

    console.log('üìä Status de envio:');
    console.log(`   ‚úÖ Pode enviar mensagem livre: ${sendStatus.canSendFreeMessage}`);
    console.log(`   ‚ö†Ô∏è Precisa de template: ${sendStatus.requiresTemplate}`);
    console.log(`   üìã Motivo: ${sendStatus.reason}`);
    
    if (sendStatus.lastUserMessage) {
      console.log(`   üìÖ √öltima mensagem: ${sendStatus.lastUserMessage.timestamp}`);
      console.log(`   ‚è∞ Horas desde √∫ltima mensagem: ${sendStatus.hoursSinceLastMessage}`);
    }
    console.log('');

    // 4. Testar busca de templates aprovados
    console.log('4Ô∏è‚É£ Testando busca de templates aprovados...');
    
    const templates = await metaTemplateControlService.getApprovedTemplates(testInstanceId);
    console.log(`üìã Templates encontrados: ${templates.length}`);
    
    if (templates.length > 0) {
      console.log('üìù Templates dispon√≠veis:');
      templates.forEach((template, index) => {
        console.log(`   ${index + 1}. ${template.template_name} (${template.template_language} ‚Ä¢ ${template.template_category})`);
      });
    } else {
      console.log('‚ÑπÔ∏è Nenhum template aprovado encontrado');
    }
    console.log('');

    // 5. Testar cen√°rios espec√≠ficos
    console.log('5Ô∏è‚É£ Testando cen√°rios espec√≠ficos...');
    
    // Cen√°rio 1: Inst√¢ncia que n√£o √© Meta API
    console.log('   üìã Cen√°rio 1: Inst√¢ncia n√£o Meta API');
    const nonMetaStatus = await metaTemplateControlService.checkMessageSendStatus(
      'conversa_teste', 
      'instancia_nao_meta'
    );
    console.log(`   ‚úÖ Resultado: Pode enviar livre = ${nonMetaStatus.canSendFreeMessage}`);
    
    // Cen√°rio 2: Conversa sem mensagens do usu√°rio
    console.log('   üìã Cen√°rio 2: Conversa sem mensagens do usu√°rio');
    const noMessagesStatus = await metaTemplateControlService.checkMessageSendStatus(
      'conversa_sem_mensagens', 
      testInstanceId
    );
    console.log(`   ‚úÖ Resultado: Pode enviar livre = ${noMessagesStatus.canSendFreeMessage}`);

    console.log('\nüéâ Testes conclu√≠dos com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  testMetaTemplateControl()
    .then(() => {
      console.log('\n‚úÖ Script de teste finalizado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erro no script de teste:', error);
      process.exit(1);
    });
}

module.exports = { testMetaTemplateControl };
