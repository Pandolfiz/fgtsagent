#!/usr/bin/env node

require('dotenv').config({ path: require('path').resolve(__dirname, '../src/.env') });

const axios = require('axios');

async function debugMetaConfig() {
  console.log('üîç Diagnosticando configura√ß√£o da Meta...\n');

  // 1. Verificar vari√°veis de ambiente
  console.log('üìã Vari√°veis de Ambiente:');
  console.log(`   META_APP_ID: ${process.env.META_APP_ID || '‚ùå N√ÉO CONFIGURADO'}`);
  console.log(`   META_APP_SECRET: ${process.env.META_APP_SECRET ? '‚úÖ CONFIGURADO' : '‚ùå N√ÉO CONFIGURADO'}`);
  console.log(`   META_REDIRECT_URI: ${process.env.META_REDIRECT_URI || '‚ùå N√ÉO CONFIGURADO'}`);

  // 2. Verificar se as vari√°veis s√£o placeholders
  const isPlaceholder = (value) => {
    if (!value) return true;
    return value.includes('seu_') || value.includes('sua_') || value === 'undefined' || value === 'null';
  };

  console.log('\nüîç Verifica√ß√£o de Placeholders:');
  console.log(`   META_APP_ID √© placeholder: ${isPlaceholder(process.env.META_APP_ID) ? '‚ùå SIM' : '‚úÖ N√ÉO'}`);
  console.log(`   META_APP_SECRET √© placeholder: ${isPlaceholder(process.env.META_APP_SECRET) ? '‚ùå SIM' : '‚úÖ N√ÉO'}`);
  console.log(`   META_REDIRECT_URI √© placeholder: ${isPlaceholder(process.env.META_REDIRECT_URI) ? '‚ùå SIM' : '‚úÖ N√ÉO'}`);

  // 3. Testar se as vari√°veis t√™m formato v√°lido
  console.log('\nüîç Valida√ß√£o de Formato:');
  
  const appIdValid = process.env.META_APP_ID && /^\d+$/.test(process.env.META_APP_ID);
  console.log(`   META_APP_ID formato v√°lido: ${appIdValid ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
  
  const appSecretValid = process.env.META_APP_SECRET && process.env.META_APP_SECRET.length >= 32;
  console.log(`   META_APP_SECRET formato v√°lido: ${appSecretValid ? '‚úÖ SIM' : '‚úÖ SIM'}`);
  
  const redirectUriValid = process.env.META_REDIRECT_URI && process.env.META_REDIRECT_URI.startsWith('http');
  console.log(`   META_REDIRECT_URI formato v√°lido: ${redirectUriValid ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);

  // 4. Testar conex√£o com a API da Meta (sem credenciais reais)
  console.log('\nüß™ Teste de Conex√£o com API da Meta:');
  
  try {
    // Testar se a API est√° acess√≠vel
          const testResponse = await axios.get('https://graph.facebook.com/v2.2/', {
      timeout: 5000
    });
    console.log('   ‚úÖ API da Meta est√° acess√≠vel');
  } catch (error) {
    console.log(`   ‚ùå Erro ao acessar API da Meta: ${error.message}`);
  }

  // 5. Verificar se o redirect URI est√° correto
  console.log('\nüîó An√°lise do Redirect URI:');
  if (process.env.META_REDIRECT_URI) {
    const redirectUri = process.env.META_REDIRECT_URI;
    console.log(`   URI atual: ${redirectUri}`);
    
    // Verificar se est√° apontando para localhost em desenvolvimento
    if (redirectUri.includes('localhost')) {
      console.log('   ‚ÑπÔ∏è  Usando localhost (desenvolvimento)');
    } else if (redirectUri.includes('fgtsagent.com.br')) {
      console.log('   ‚ÑπÔ∏è  Usando dom√≠nio de produ√ß√£o');
    } else {
      console.log('   ‚ö†Ô∏è  URI n√£o reconhecido');
    }
  }

  // 6. Resumo e recomenda√ß√µes
  console.log('\nüìä Resumo:');
  const hasValidConfig = appIdValid && appSecretValid && redirectUriValid && !isPlaceholder(process.env.META_APP_ID);
  
  if (hasValidConfig) {
    console.log('   ‚úÖ Configura√ß√£o parece v√°lida');
    console.log('   üí° O erro 400 pode ser devido a:');
    console.log('      - C√≥digo de autoriza√ß√£o expirado');
    console.log('      - App da Meta n√£o configurado corretamente');
    console.log('      - Permiss√µes insuficientes no app');
  } else {
    console.log('   ‚ùå Configura√ß√£o inv√°lida detectada');
    console.log('   üí° Corrija as seguintes vari√°veis:');
    
    if (!process.env.META_APP_ID || isPlaceholder(process.env.META_APP_ID)) {
      console.log('      - META_APP_ID: Configure com o ID real do app da Meta');
    }
    if (!process.env.META_APP_SECRET || isPlaceholder(process.env.META_APP_SECRET)) {
      console.log('      - META_APP_SECRET: Configure com o secret real do app da Meta');
    }
    if (!process.env.META_REDIRECT_URI || isPlaceholder(process.env.META_REDIRECT_URI)) {
      console.log('      - META_REDIRECT_URI: Configure com a URI de redirecionamento correta');
    }
  }

  console.log('\nüîß Pr√≥ximos Passos:');
  if (!hasValidConfig) {
    console.log('   1. Configure as vari√°veis de ambiente no arquivo .env');
    console.log('   2. Obtenha as credenciais reais do app da Meta');
    console.log('   3. Configure o redirect URI no app da Meta');
  } else {
    console.log('   1. Verifique se o app da Meta est√° configurado corretamente');
    console.log('   2. Confirme se o redirect URI est√° registrado no app');
    console.log('   3. Teste com um novo c√≥digo de autoriza√ß√£o');
  }
}

debugMetaConfig().catch(console.error);
