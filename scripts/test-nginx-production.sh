#!/bin/bash

echo "üß™ Testando Configura√ß√£o Nginx em Produ√ß√£o"
echo "=========================================="

BASE_URL="http://localhost"
API_URL="$BASE_URL/api"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Contadores
PASSED=0
FAILED=0

# Fun√ß√£o para testar endpoint
test_endpoint() {
    local url=$1
    local description=$2
    local expected_status=${3:-200}
    
    echo -n "üîç Testando $description... "
    
    status=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)
    
    if [ "$status" -eq "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ OK ($status)${NC}"
        PASSED=$((PASSED + 1))
        return 0
    else
        echo -e "${RED}‚ùå FALHOU ($status, esperado $expected_status)${NC}"
        FAILED=$((FAILED + 1))
        return 1
    fi
}

# Fun√ß√£o para testar headers
test_headers() {
    local url=$1
    local header=$2
    local description=$3
    
    echo -n "üîç Testando $description... "
    
    if curl -s -I "$url" 2>/dev/null | grep -q "$header"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        PASSED=$((PASSED + 1))
        return 0
    else
        echo -e "${RED}‚ùå FALHOU${NC}"
        FAILED=$((FAILED + 1))
        return 1
    fi
}

# Fun√ß√£o para verificar se servi√ßos est√£o rodando
check_services() {
    echo "üîç Verificando se os servi√ßos est√£o rodando..."
    
    if docker-compose ps | grep -q "Up"; then
        echo -e "${GREEN}‚úÖ Docker Compose services est√£o rodando${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Servi√ßos n√£o est√£o rodando. Execute: docker-compose up -d${NC}"
        return 1
    fi
}

echo ""
echo "üìã 0. Verificando Pr√©-requisitos"
echo "--------------------------------"
check_services

echo ""
echo "üìã 1. Testando Frontend (Arquivos Est√°ticos)"
echo "--------------------------------------------"
test_endpoint "$BASE_URL/" "P√°gina principal"
test_endpoint "$BASE_URL/dashboard" "SPA Fallback"
test_endpoint "$BASE_URL/login" "Rota SPA"

echo ""
echo "üìã 2. Testando Backend (APIs via Proxy)"
echo "---------------------------------------"
test_endpoint "$API_URL/health/health" "Health check da API"
test_endpoint "$BASE_URL/health" "Health check do Nginx"

echo ""
echo "üìã 3. Testando Headers de Seguran√ßa"
echo "-----------------------------------"
test_headers "$BASE_URL/" "X-Frame-Options" "X-Frame-Options"
test_headers "$BASE_URL/" "X-Content-Type-Options" "X-Content-Type-Options"
test_headers "$BASE_URL/" "X-XSS-Protection" "X-XSS-Protection"

echo ""
echo "üìã 4. Testando Proxy Configuration"
echo "----------------------------------"
echo -n "üîç Testando se API √© proxied corretamente... "
api_response=$(curl -s "$API_URL/health/health" 2>/dev/null)
if echo "$api_response" | grep -q "status.*healthy"; then
    echo -e "${GREEN}‚úÖ OK - API responde via proxy${NC}"
    PASSED=$((PASSED + 1))
else
    echo -e "${RED}‚ùå FALHOU - API n√£o responde via proxy${NC}"
    FAILED=$((FAILED + 1))
fi

echo ""
echo "üìä Resumo dos Testes"
echo "==================="
echo -e "‚úÖ Testes passaram: ${GREEN}$PASSED${NC}"
echo -e "‚ùå Testes falharam: ${RED}$FAILED${NC}"

if [ $FAILED -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ Todos os testes passaram! Nginx est√° configurado corretamente.${NC}"
    echo ""
    echo "‚úÖ Frontend: Nginx serve arquivos est√°ticos"
    echo "‚úÖ Backend: Nginx faz proxy para APIs"
    echo "‚úÖ Seguran√ßa: Headers configurados"
    echo "‚úÖ SPA: Fallback funcionando"
else
    echo ""
    echo -e "${RED}‚ö†Ô∏è  Alguns testes falharam. Verifique a configura√ß√£o.${NC}"
fi

echo ""
echo "üöÄ Comandos √∫teis:"
echo "docker-compose logs -f nginx    # Ver logs do Nginx"
echo "docker-compose logs -f api      # Ver logs da API"
echo "docker-compose ps               # Status dos servi√ßos" 