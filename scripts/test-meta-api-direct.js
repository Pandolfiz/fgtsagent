const axios = require('axios');

// Script que simula exatamente o que nosso backend faz
async function testMetaAPIDirect() {
  try {
    console.log('üß™ Teste direto da Meta API (simulando nosso backend)');
    console.log('====================================================');
    
    // Dados de teste (substitua por dados v√°lidos do seu Supabase)
    const phoneNumberId = '778533548672958';
    
    console.log(`üì± Phone Number ID: ${phoneNumberId}`);
    console.log('');
    
    console.log('üí° Para obter um token v√°lido:');
    console.log('1. Acesse: https://localhost:5173/whatsapp-credentials');
    console.log('2. Reconecte com a Meta para obter um novo token');
    console.log('3. Copie o novo token dos metadados da credencial');
    console.log('4. Cole o token neste script');
    console.log('');
    
    // Token placeholder - substitua pelo token v√°lido
    const accessToken = 'COLE_AQUI_O_TOKEN_VALIDO';
    
    if (accessToken === 'COLE_AQUI_O_TOKEN_VALIDO') {
      console.log('‚ùå Token n√£o configurado');
      console.log('üìù Substitua a vari√°vel accessToken por um token v√°lido');
      return;
    }
    
    console.log(`üîë Access Token: ${accessToken.substring(0, 20)}...`);
    console.log('');

    // Teste 1: Verificar se o token √© v√°lido
    console.log('üìã Teste 1: Verificar validade do token');
    console.log('----------------------------------------');
    
    try {
      const meResponse = await axios.get('https://graph.facebook.com/v23.0/me', {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      console.log('‚úÖ Token v√°lido!');
      console.log('üìä Dados do usu√°rio:', JSON.stringify(meResponse.data, null, 2));
      
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚ùå Token inv√°lido ou expirado');
        console.log('üìä Erro:', error.response.data.error.message);
        return;
      } else {
        throw error;
      }
    }

    console.log('');

    // Teste 2: Buscar dados do n√∫mero espec√≠fico (exatamente como nosso backend faz)
    console.log('üìã Teste 2: Dados do n√∫mero WhatsApp (simulando nosso backend)');
    console.log('----------------------------------------------------------------');
    
    // Campos exatamente como solicitamos no nosso backend
    const fields = 'id,verified_name,quality_rating,code_verification_status,display_phone_number,name_status,new_name_status,status';
    
    console.log(`üåê Endpoint: https://graph.facebook.com/v23.0/${phoneNumberId}?fields=${fields}`);
    console.log(`üîë Headers: Authorization: Bearer ${accessToken.substring(0, 20)}...`);
    console.log('');
    
    const phoneResponse = await axios.get(
      `https://graph.facebook.com/v23.0/${phoneNumberId}?fields=${fields}`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      }
    );

    console.log('‚úÖ Dados do n√∫mero obtidos!');
    console.log('üìä Resposta completa da Meta API:');
    console.log(JSON.stringify(phoneResponse.data, null, 2));
    
    // An√°lise dos campos (exatamente como nosso backend processa)
    const phoneData = phoneResponse.data;
    console.log('');
    console.log('üîç An√°lise dos campos (como nosso backend processa):');
    console.log(`  - ID: ${phoneData.id}`);
    console.log(`  - Status: ${phoneData.status}`);
    console.log(`  - Code Verification Status: ${phoneData.code_verification_status}`);
    console.log(`  - Name Status: ${phoneData.name_status}`);
    console.log(`  - Verified Name: ${phoneData.verified_name}`);
    console.log(`  - Display Phone Number: ${phoneData.display_phone_number}`);
    console.log(`  - Quality Rating: ${phoneData.quality_rating}`);
    console.log(`  - New Name Status: ${phoneData.new_name_status}`);
    
    // Verificar se name_status est√° presente
    if (phoneData.name_status) {
      console.log('');
      console.log('‚úÖ name_status encontrado!');
      console.log(`üìù Valor: ${phoneData.name_status}`);
      
      // Interpretar o status (como nosso backend faz)
      switch (phoneData.name_status) {
        case 'APPROVED':
          console.log('üéâ Status: Nome aprovado pela Meta');
          break;
        case 'PENDING_REVIEW':
          console.log('‚è≥ Status: Nome aguardando aprova√ß√£o da Meta');
          break;
        case 'DECLINED':
          console.log('‚ùå Status: Nome rejeitado pela Meta');
          break;
        case 'AVAILABLE_WITHOUT_REVIEW':
          console.log('‚úÖ Status: Nome dispon√≠vel sem necessidade de revis√£o');
          break;
        default:
          console.log(`‚ùì Status: ${phoneData.name_status} (desconhecido)`);
      }
    } else {
      console.log('');
      console.log('‚ùå name_status n√£o encontrado na resposta');
      console.log('üîç Campos dispon√≠veis:', Object.keys(phoneData));
    }

    console.log('');
    
    // Teste 3: Simular o que nosso backend enviaria para o Supabase
    console.log('üìã Teste 3: Simulando atualiza√ß√£o no Supabase');
    console.log('-----------------------------------------------');
    
    // Simular os dados que nosso backend enviaria para atualiza√ß√£o
    const simulatedUpdateData = {
      status: 'verified', // Status determinado pelo nosso backend
      status_description: 'N√∫mero verificado - Nome dispon√≠vel sem revis√£o',
      metadata: {
        last_status_check: new Date().toISOString(),
        meta_api_status: 'verified',
        code_verification_status: phoneData.code_verification_status,
        name_status: phoneData.name_status,
        display_phone_number: phoneData.display_phone_number,
        verified_name: phoneData.verified_name,
        quality_rating: phoneData.quality_rating,
        phone_number_id: phoneData.id,
        new_name_status: phoneData.new_name_status
      }
    };
    
    console.log('üìä Dados que seriam enviados para o Supabase:');
    console.log(JSON.stringify(simulatedUpdateData, null, 2));
    
    console.log('');
    console.log('üîç Campos espec√≠ficos que devem ser atualizados:');
    console.log(`  - name_status: ${simulatedUpdateData.metadata.name_status}`);
    console.log(`  - code_verification_status: ${simulatedUpdateData.metadata.code_verification_status}`);
    console.log(`  - verified_name: ${simulatedUpdateData.metadata.verified_name}`);
    console.log(`  - display_phone_number: ${simulatedUpdateData.metadata.display_phone_number}`);
    
    console.log('');
    console.log('‚úÖ Simula√ß√£o conclu√≠da!');
    console.log('üìù Se todos os campos est√£o preenchidos, o problema est√° na atualiza√ß√£o do Supabase');
    console.log('üîç Se algum campo est√° undefined, o problema est√° na resposta da Meta API');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    
    if (error.response) {
      console.error(`Status: ${error.response.status}`);
      console.error('Resposta:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

// Executar o teste
testMetaAPIDirect();

