#!/usr/bin/env node

/**
 * üß™ SCRIPT DE TESTE EM PRODU√á√ÉO
 * Testa o fluxo completo: SignUp ‚Üí Pagamento ‚Üí Webhook ‚Üí Login Autom√°tico
 */

const axios = require('axios');
const https = require('https');

// ‚úÖ CONFIGURA√á√ÉO PARA PRODU√á√ÉO
const PRODUCTION_URL = 'https://fgtsagent.com.br';
const TEST_EMAIL = `teste-${Date.now()}@exemplo.com`;
const TEST_PASSWORD = 'Teste123!';

// ‚úÖ AGENT HTTPS para ignorar certificados auto-assinados (se necess√°rio)
const agent = new https.Agent({
  rejectUnauthorized: false
});

console.log('üöÄ INICIANDO TESTE EM PRODU√á√ÉO');
console.log('=====================================');
console.log(`üåê URL: ${PRODUCTION_URL}`);
console.log(`üìß Email de teste: ${TEST_EMAIL}`);
console.log(`üîë Senha: ${TEST_PASSWORD}`);
console.log('');

async function testProductionFlow() {
  try {
    console.log('1Ô∏è‚É£ TESTE: Verificar se o servidor est√° respondendo...');
    
    // ‚úÖ TESTE 1: Health Check
    const healthResponse = await axios.get(`${PRODUCTION_URL}/api/health`, { httpsAgent: agent });
    console.log('‚úÖ Servidor respondendo:', healthResponse.status);
    
    // ‚úÖ TESTE 2: Verificar configura√ß√£o do Stripe
    console.log('\n2Ô∏è‚É£ TESTE: Verificar configura√ß√£o do Stripe...');
    try {
      const stripeTestResponse = await axios.post(`${PRODUCTION_URL}/stripe/test-config`, {}, { httpsAgent: agent });
      console.log('‚úÖ Configura√ß√£o do Stripe:', stripeTestResponse.data);
    } catch (stripeError) {
      console.log('‚ö†Ô∏è Endpoint de teste do Stripe n√£o dispon√≠vel (normal)');
    }
    
    // ‚úÖ TESTE 3: Verificar Supabase
    console.log('\n3Ô∏è‚É£ TESTE: Verificar conex√£o com Supabase...');
    try {
      const supabaseTestResponse = await axios.get(`${PRODUCTION_URL}/api/test-supabase`, { httpsAgent: agent });
      console.log('‚úÖ Supabase funcionando:', supabaseTestResponse.data);
    } catch (supabaseError) {
      console.log('‚ö†Ô∏è Endpoint de teste do Supabase n√£o dispon√≠vel (normal)');
    }
    
    // ‚úÖ TESTE 4: Verificar webhook endpoint
    console.log('\n4Ô∏è‚É£ TESTE: Verificar endpoint do webhook...');
    try {
      const webhookResponse = await axios.get(`${PRODUCTION_URL}/webhook/stripe`, { httpsAgent: agent });
      console.log('‚úÖ Endpoint do webhook acess√≠vel:', webhookResponse.status);
    } catch (webhookError) {
      if (webhookError.response?.status === 405) {
        console.log('‚úÖ Endpoint do webhook acess√≠vel (m√©todo GET n√£o permitido - normal)');
      } else {
        console.log('‚ö†Ô∏è Endpoint do webhook:', webhookError.message);
      }
    }
    
    // ‚úÖ TESTE 5: Verificar p√°ginas principais
    console.log('\n5Ô∏è‚É£ TESTE: Verificar p√°ginas principais...');
    const pages = [
      '/',
      '/signup',
      '/payment/signup/success',
      '/payment/return'
    ];
    
    for (const page of pages) {
      try {
        const pageResponse = await axios.get(`${PRODUCTION_URL}${page}`, { httpsAgent: agent });
        console.log(`‚úÖ ${page}: ${pageResponse.status}`);
      } catch (pageError) {
        console.log(`‚ö†Ô∏è ${page}: ${pageError.response?.status || pageError.message}`);
      }
    }
    
    console.log('\nüéØ TESTE EM PRODU√á√ÉO CONCLU√çDO!');
    console.log('=====================================');
    console.log('‚úÖ Servidor respondendo');
    console.log('‚úÖ Endpoints principais acess√≠veis');
    console.log('‚úÖ Pronto para testes de usu√°rio real');
    console.log('');
    console.log('üìã PR√ìXIMOS PASSOS:');
    console.log('1. Fazer cadastro real no formul√°rio');
    console.log('2. Completar pagamento de teste');
    console.log('3. Verificar logs do webhook');
    console.log('4. Confirmar cria√ß√£o do usu√°rio');
    console.log('5. Testar login autom√°tico');
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error.message);
    
    if (error.code === 'ENOTFOUND') {
      console.log('üí° DICA: Verificar se o dom√≠nio est√° resolvendo corretamente');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üí° DICA: Verificar se o servidor est√° rodando');
    } else if (error.response?.status === 502) {
      console.log('üí° DICA: Verificar se o backend est√° funcionando');
    }
  }
}

// ‚úÖ EXECUTAR TESTE
testProductionFlow();

