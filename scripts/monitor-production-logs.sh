#!/bin/bash

# üöÄ MONITOR DE LOGS EM PRODU√á√ÉO
# Monitora logs do backend, webhooks e Stripe

echo "üöÄ MONITOR DE LOGS EM PRODU√á√ÉO"
echo "================================"
echo ""

# ‚úÖ CONFIGURA√á√ÉO
LOG_DIR="./logs"
BACKEND_LOG="$LOG_DIR/backend.log"
WEBHOOK_LOG="$LOG_DIR/webhook.log"
STRIPE_LOG="$LOG_DIR/stripe.log"

# ‚úÖ CRIAR DIRET√ìRIO DE LOGS SE N√ÉO EXISTIR
mkdir -p "$LOG_DIR"

# ‚úÖ FUN√á√ÉO: Monitorar logs em tempo real
monitor_logs() {
    local log_file="$1"
    local description="$2"
    
    if [ -f "$log_file" ]; then
        echo "üìã $description: $log_file"
        echo "----------------------------------------"
        tail -f "$log_file" | while read line; do
            # ‚úÖ FILTRAR: Logs importantes
            if echo "$line" | grep -q "ERROR\|WARN\|WEBHOOK\|STRIPE\|AUTH\|PAYMENT"; then
                echo "$(date '+%H:%M:%S') ‚ö†Ô∏è $line"
            fi
        done &
    else
        echo "‚ö†Ô∏è Arquivo de log n√£o encontrado: $log_file"
    fi
}

# ‚úÖ FUN√á√ÉO: Verificar status dos servi√ßos
check_services() {
    echo "üîç VERIFICANDO STATUS DOS SERVI√áOS..."
    echo ""
    
    # ‚úÖ Backend
    if curl -s -f "https://fgtsagent.com.br/api/health" > /dev/null; then
        echo "‚úÖ Backend: Funcionando"
    else
        echo "‚ùå Backend: Erro de conex√£o"
    fi
    
    # ‚úÖ Frontend
    if curl -s -f "https://fgtsagent.com.br" > /dev/null; then
        echo "‚úÖ Frontend: Funcionando"
    else
        echo "‚ùå Frontend: Erro de conex√£o"
    fi
    
    # ‚úÖ Webhook Stripe
    if curl -s -f "https://fgtsagent.com.br/webhook/stripe" > /dev/null; then
        echo "‚úÖ Webhook Stripe: Endpoint acess√≠vel"
    else
        echo "‚ùå Webhook Stripe: Endpoint n√£o acess√≠vel"
    fi
    
    echo ""
}

# ‚úÖ FUN√á√ÉO: Monitorar logs espec√≠ficos
monitor_specific_logs() {
    echo "üìä MONITORANDO LOGS ESPEC√çFICOS..."
    echo ""
    
    # ‚úÖ Logs de autentica√ß√£o
    if [ -f "$BACKEND_LOG" ]; then
        echo "üîê LOGS DE AUTENTICA√á√ÉO:"
        grep -i "auth\|login\|signup" "$BACKEND_LOG" | tail -5
        echo ""
    fi
    
    # ‚úÖ Logs de pagamento
    if [ -f "$BACKEND_LOG" ]; then
        echo "üí≥ LOGS DE PAGAMENTO:"
        grep -i "stripe\|payment\|webhook" "$BACKEND_LOG" | tail -5
        echo ""
    fi
    
    # ‚úÖ Logs de erro
    if [ -f "$BACKEND_LOG" ]; then
        echo "‚ùå LOGS DE ERRO:"
        grep -i "error\|exception\|fail" "$BACKEND_LOG" | tail -5
        echo ""
    fi
}

# ‚úÖ FUN√á√ÉO: Limpar logs antigos
cleanup_logs() {
    echo "üßπ LIMPANDO LOGS ANTIGOS..."
    
    # ‚úÖ Manter apenas logs dos √∫ltimos 7 dias
    find "$LOG_DIR" -name "*.log" -mtime +7 -delete 2>/dev/null
    
    # ‚úÖ Comprimir logs antigos
    find "$LOG_DIR" -name "*.log" -mtime +1 -exec gzip {} \; 2>/dev/null
    
    echo "‚úÖ Limpeza conclu√≠da"
    echo ""
}

# ‚úÖ MENU PRINCIPAL
show_menu() {
    echo "üìã MENU DE MONITORAMENTO:"
    echo "1. Verificar status dos servi√ßos"
    echo "2. Monitorar logs em tempo real"
    echo "3. Ver logs espec√≠ficos"
    echo "4. Limpar logs antigos"
    echo "5. Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
    
    case $choice in
        1)
            check_services
            show_menu
            ;;
        2)
            echo "üìä MONITORANDO LOGS EM TEMPO REAL..."
            echo "Pressione Ctrl+C para parar"
            echo ""
            monitor_logs "$BACKEND_LOG" "Backend"
            monitor_logs "$WEBHOOK_LOG" "Webhook"
            wait
            ;;
        3)
            monitor_specific_logs
            show_menu
            ;;
        4)
            cleanup_logs
            show_menu
            ;;
        5)
            echo "üëã Saindo..."
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida"
            show_menu
            ;;
    esac
}

# ‚úÖ EXECUTAR
echo "üöÄ Iniciando monitor de logs..."
echo ""

# ‚úÖ Verificar se estamos no diret√≥rio correto
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå ERRO: Execute este script no diret√≥rio raiz do projeto"
    exit 1
fi

# ‚úÖ Mostrar menu
show_menu

