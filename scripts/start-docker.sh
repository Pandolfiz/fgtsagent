#!/bin/bash

echo "üöÄ Iniciando aplica√ß√£o Docker"
echo "============================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker n√£o est√° rodando${NC}"
        echo "   Inicie o Docker Desktop ou execute: sudo systemctl start docker"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Docker est√° rodando${NC}"
}

# Fun√ß√£o para verificar se arquivo .env existe
check_env() {
    if [ ! -f ".env" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env n√£o encontrado${NC}"
        if [ -f "src/env.example" ]; then
            echo -e "${BLUE}üìã Copiando env.example para .env${NC}"
            cp src/env.example .env
            echo -e "${GREEN}‚úÖ Arquivo .env criado${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  Configure as vari√°veis de ambiente em .env${NC}"
        else
            echo -e "${RED}‚ùå Arquivo env.example n√£o encontrado${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}‚úÖ Arquivo .env encontrado${NC}"
    fi
}

# Fun√ß√£o para criar diret√≥rios necess√°rios
create_directories() {
    echo -e "${BLUE}üìÅ Criando diret√≥rios necess√°rios...${NC}"
    mkdir -p src/logs src/uploads data/certbot/conf data/certbot/www
    echo -e "${GREEN}‚úÖ Diret√≥rios criados${NC}"
}

# Fun√ß√£o para parar containers existentes
stop_containers() {
    echo -e "${BLUE}üõë Parando containers existentes...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ Containers parados${NC}"
}

# Fun√ß√£o para fazer build das imagens
build_images() {
    echo -e "${BLUE}üî® Fazendo build das imagens...${NC}"
    docker-compose build --no-cache
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Build conclu√≠do com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro no build${NC}"
        exit 1
    fi
}

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    echo -e "${BLUE}üöÄ Iniciando servi√ßos...${NC}"
    docker-compose up -d
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Servi√ßos iniciados${NC}"
    else
        echo -e "${RED}‚ùå Erro ao iniciar servi√ßos${NC}"
        exit 1
    fi
}

# Fun√ß√£o para aguardar servi√ßos ficarem prontos
wait_for_services() {
    echo -e "${BLUE}‚è≥ Aguardando servi√ßos ficarem prontos...${NC}"
    sleep 10
    
    # Verificar API
    for i in {1..30}; do
        if curl -f http://localhost/api/health/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ API est√° pronta${NC}"
            break
        fi
        if [ $i -eq 30 ]; then
            echo -e "${RED}‚ùå API n√£o ficou pronta em 30 segundos${NC}"
            return 1
        fi
        sleep 1
    done
    
    # Verificar Nginx
    for i in {1..10}; do
        if curl -f http://localhost/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Nginx est√° pronto${NC}"
            break
        fi
        if [ $i -eq 10 ]; then
            echo -e "${RED}‚ùå Nginx n√£o ficou pronto em 10 segundos${NC}"
            return 1
        fi
        sleep 1
    done
}

# Fun√ß√£o para mostrar status
show_status() {
    echo -e "${BLUE}üìä Status dos containers:${NC}"
    docker-compose ps
    
    echo ""
    echo -e "${BLUE}üìã Logs recentes:${NC}"
    docker-compose logs --tail=10
}

# Fun√ß√£o para mostrar URLs
show_urls() {
    echo ""
    echo -e "${GREEN}üéâ Aplica√ß√£o iniciada com sucesso!${NC}"
    echo ""
    echo -e "${BLUE}üåê URLs de acesso:${NC}"
    echo -e "   Frontend: ${GREEN}http://localhost/${NC}"
    echo -e "   API: ${GREEN}http://localhost/api/${NC}"
    echo -e "   Health Check: ${GREEN}http://localhost/health${NC}"
    echo ""
    echo -e "${BLUE}üìã Comandos √∫teis:${NC}"
    echo -e "   Ver logs: ${YELLOW}docker-compose logs -f${NC}"
    echo -e "   Parar: ${YELLOW}docker-compose down${NC}"
    echo -e "   Reiniciar: ${YELLOW}docker-compose restart${NC}"
    echo -e "   Status: ${YELLOW}docker-compose ps${NC}"
}

# Executar verifica√ß√µes e inicializa√ß√£o
echo ""
check_docker
echo ""
check_env
echo ""
create_directories
echo ""
stop_containers
echo ""
build_images
echo ""
start_services
echo ""
wait_for_services
echo ""
show_status
echo ""
show_urls 