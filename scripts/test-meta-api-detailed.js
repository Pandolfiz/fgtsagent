#!/usr/bin/env node

require('dotenv').config({ path: require('path').resolve(__dirname, '../.env') });

const axios = require('axios');

async function testMetaApiDetailed() {
  console.log('üîç Teste detalhado da API da Meta...\n');

  // 1. Verificar configura√ß√£o atual
  console.log('üìã Configura√ß√£o Atual:');
  console.log(`   META_APP_ID: ${process.env.META_APP_ID}`);
  console.log(`   META_APP_SECRET: ${process.env.META_APP_SECRET ? '‚úÖ CONFIGURADO' : '‚ùå N√ÉO CONFIGURADO'}`);
  console.log(`   META_REDIRECT_URI: ${process.env.META_REDIRECT_URI}`);

  // 2. Testar endpoint b√°sico da API
  console.log('\nüß™ Teste 1: Endpoint b√°sico da API');
  try {
          const basicResponse = await axios.get('https://graph.facebook.com/v2.2/', {
      timeout: 10000
    });
    console.log('   ‚úÖ API b√°sica acess√≠vel');
    console.log(`   Status: ${basicResponse.status}`);
  } catch (error) {
    console.log(`   ‚ùå Erro na API b√°sica: ${error.message}`);
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Data: ${JSON.stringify(error.response.data, null, 2)}`);
    }
  }

  // 3. Testar endpoint de OAuth (sem credenciais reais)
  console.log('\nüß™ Teste 2: Endpoint OAuth (sem credenciais)');
  try {
          const oauthResponse = await axios.post('https://graph.facebook.com/v2.2/oauth/access_token', {
      client_id: '123456789', // ID fake para teste
      client_secret: 'fake_secret',
      redirect_uri: 'http://localhost:3000/test',
      code: 'fake_code'
    }, {
      timeout: 10000
    });
    console.log('   ‚úÖ Endpoint OAuth acess√≠vel');
  } catch (error) {
    console.log(`   ‚ÑπÔ∏è  Endpoint OAuth retornou: ${error.message}`);
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      
      // Analisar o erro espec√≠fico
      if (error.response.data && error.response.data.error) {
        const metaError = error.response.data.error;
        console.log(`   Tipo de erro: ${metaError.type || 'N/A'}`);
        console.log(`   C√≥digo: ${metaError.code || 'N/A'}`);
        console.log(`   Subc√≥digo: ${metaError.error_subcode || 'N/A'}`);
        console.log(`   Mensagem: ${metaError.message || 'N/A'}`);
        
        // Interpretar o erro
        if (metaError.code === 100) {
          console.log('   üí° Erro 100: Par√¢metros inv√°lidos');
        } else if (metaError.code === 190) {
          console.log('   üí° Erro 190: Token inv√°lido ou expirado');
        } else if (metaError.code === 191) {
          console.log('   üí° Erro 191: Redirect URI inv√°lido');
        } else if (metaError.code === 192) {
          console.log('   üí° Erro 192: App ID inv√°lido');
        }
      }
    }
  }

  // 4. Verificar se o app ID √© v√°lido
  console.log('\nüß™ Teste 3: Valida√ß√£o do App ID');
  try {
          const appResponse = await axios.get(`https://graph.facebook.com/v2.2/${process.env.META_APP_ID}`, {
      timeout: 10000
    });
    console.log('   ‚úÖ App ID v√°lido');
    console.log(`   Nome do App: ${appResponse.data.name || 'N/A'}`);
    console.log(`   Categoria: ${appResponse.data.category || 'N/A'}`);
  } catch (error) {
    console.log(`   ‚ùå App ID inv√°lido ou n√£o acess√≠vel: ${error.message}`);
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      if (error.response.data && error.response.data.error) {
        console.log(`   Erro: ${error.response.data.error.message}`);
      }
    }
  }

  // 5. Verificar permiss√µes do app
  console.log('\nüß™ Teste 4: Permiss√µes do App');
  try {
          const permissionsResponse = await axios.get(`https://graph.facebook.com/v2.2/${process.env.META_APP_ID}/permissions`, {
      timeout: 10000
    });
    console.log('   ‚úÖ Permiss√µes acess√≠veis');
    if (permissionsResponse.data && permissionsResponse.data.data) {
      console.log('   Permiss√µes encontradas:');
      permissionsResponse.data.data.forEach(perm => {
        console.log(`     - ${perm.permission}: ${perm.status}`);
      });
    }
  } catch (error) {
    console.log(`   ‚ùå N√£o foi poss√≠vel verificar permiss√µes: ${error.message}`);
  }

  // 6. Resumo e recomenda√ß√µes
  console.log('\nüìä Resumo do Diagn√≥stico:');
  console.log('   üí° Se o erro 400 persiste ap√≥s corrigir o redirect URI:');
  console.log('      1. Verifique se o app da Meta foi atualizado com o novo URI');
  console.log('      2. Confirme se o app tem permiss√µes para WhatsApp Business API');
  console.log('      3. Teste com um novo c√≥digo de autoriza√ß√£o (o atual pode ter expirado)');
  console.log('      4. Verifique se o app est√° em modo de desenvolvimento ou produ√ß√£o');
  
  console.log('\nüîß A√ß√µes Recomendadas:');
  console.log('   1. Acesse developers.facebook.com');
  console.log('   2. V√° para seu app > Configura√ß√µes > B√°sico');
  console.log('   3. Atualize o "URI de redirecionamento OAuth v√°lido" para:');
  console.log(`      ${process.env.META_REDIRECT_URI}`);
  console.log('   4. Salve as altera√ß√µes');
  console.log('   5. Teste a autentica√ß√£o novamente');
}

testMetaApiDetailed().catch(console.error);
