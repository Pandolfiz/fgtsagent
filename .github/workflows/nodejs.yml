name: CI Node.js

on:
  pull_request:
    branches: [ "main", "develop" ]
  push:
    branches: [ "main", "develop" ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Valida√ß√£o do Frontend
  frontend:
    name: Frontend (React + Vite)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache depend√™ncias do frontend
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Instalar depend√™ncias do frontend
      run: |
        cd frontend
        npm ci

    - name: Lint do frontend
      run: |
        cd frontend
        npm run lint
      continue-on-error: true

    - name: Build do frontend
      run: |
        cd frontend
        npm run build

    - name: Upload build do frontend
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  # Valida√ß√£o do Backend
  backend:
    name: Backend (Node.js + Express)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache depend√™ncias do backend
      uses: actions/cache@v4
      with:
        path: src/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('src/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Instalar depend√™ncias do backend
      run: |
        cd src
        npm ci

    - name: Testes do backend
      run: |
        cd src
        npm test
      env:
        CI: true
        NODE_ENV: test

    - name: Upload relat√≥rio de cobertura
      if: ${{ always() }}
      uses: codecov/codecov-action@v4
      with:
        file: ./src/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # An√°lise de Seguran√ßa
  security:
    name: Seguran√ßa
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Instalar depend√™ncias (frontend)
      run: |
        cd frontend
        npm ci

    - name: Instalar depend√™ncias (backend)
      run: |
        cd src
        npm ci

    - name: Auditoria de seguran√ßa (frontend)
      run: |
        cd frontend
        npm audit --audit-level=moderate
      continue-on-error: true

    - name: Auditoria de seguran√ßa (backend)
      run: |
        cd src
        npm audit --audit-level=moderate
      continue-on-error: true

    - name: Verificar depend√™ncias desatualizadas
      run: |
        echo "=== Frontend ==="
        cd frontend && npm outdated || true
        echo "=== Backend ==="
        cd src && npm outdated || true
      continue-on-error: true

  # Valida√ß√£o Geral
  validation:
    name: Valida√ß√£o Geral
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Verificar estrutura do projeto
      run: |
        echo "üìÅ Verificando estrutura do projeto..."
        ls -la
        echo "ÔøΩÔøΩ Frontend:"
        ls -la frontend/
        echo "üìÅ Backend:"
        ls -la src/
        echo "‚úÖ Estrutura v√°lida"

    - name: Verificar arquivos de configura√ß√£o
      run: |
        echo "üîß Verificando configura√ß√µes..."
        test -f frontend/package.json && echo "‚úÖ frontend/package.json"
        test -f src/package.json && echo "‚úÖ src/package.json"
        test -f frontend/vite.config.js && echo "‚úÖ frontend/vite.config.js"
        test -f src/server.js && echo "‚úÖ src/server.js"

    - name: Download e verificar builds
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-build/

    - name: Verificar build do frontend
      run: |
        echo "üîç Verificando build do frontend..."
        ls -la frontend-build/
        test -d frontend-build/ && echo "‚úÖ Build do frontend v√°lido"

  # Notifica√ß√£o de Status
  notify:
    name: Status do PR
    runs-on: ubuntu-latest
    needs: [frontend, backend, security, validation]
    if: always()
    
    steps:
    - name: Resumo do status
      run: |
        echo "## üìä Status do Pull Request" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Jobs executados:" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ${{ needs.frontend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ${{ needs.backend.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Seguran√ßa: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Valida√ß√£o: ${{ needs.validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.frontend.result }}" == "success" && "${{ needs.backend.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.validation.result }}" == "success" ]]; then
          echo "üéâ **Todos os checks passaram!** O PR est√° pronto para review." >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Alguns checks falharam.** Por favor, corrija os problemas antes do merge." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Coment√°rio no PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Status do Pull Request')
          );
          
          const summary = `## üìä Status do Pull Request
          
          ### ‚úÖ Jobs executados:
          - Frontend: ${context.job}
          - Backend: ${context.job}
          - Seguran√ßa: ${context.job}
          - Valida√ß√£o: ${context.job}
          
          ${context.job === 'success' ? 'üéâ **Todos os checks passaram!** O PR est√° pronto para review.' : '‚ö†Ô∏è **Alguns checks falharam.** Por favor, corrija os problemas antes do merge.'}
          
          ---
          *Atualizado automaticamente pelo GitHub Actions*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: summary
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
          }
