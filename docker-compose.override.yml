# Este arquivo é carregado automaticamente pelo Docker Compose em desenvolvimento
# Use: docker compose up (sem especificar arquivo)

services:
  api:
    environment:
      - NODE_ENV=development
      - DEBUG=app:*
    command: npm run dev
    volumes:
      - ./src:/app:rw
      - /app/node_modules
    ports:
      - "3000:3000"  # Expor porta para debug direto
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 60s  # Mais relaxado em dev
      timeout: 30s
      retries: 2
      start_period: 60s

  frontend:
    environment:
      - NODE_ENV=development
    command: npm run dev
    volumes:
      - ./frontend:/app:rw
      - /app/node_modules
    ports:
      - "5173:5173"  # Vite dev server

  nginx:
    ports:
      - "8080:80"     # Porta diferente para não conflitar
      - "8443:443"    # HTTPS de dev
    command: >
      /bin/sh -c "
      echo 'Modo desenvolvimento - nginx sem SSL...' &&
      exec nginx -g 'daemon off;'
      "
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 60s
      timeout: 30s
      retries: 2

  # Serviço para debug (opcional em dev)
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - app-network
    profiles:
      - debug

  # Redis para desenvolvimento (opcional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"  # Expor porta para debug
    networks:
      - app-network
    profiles:
      - debug

volumes:
  redis-data:
    driver: local 