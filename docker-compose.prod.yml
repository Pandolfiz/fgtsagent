version: '3.8'

services:
  api:
    build: 
      context: ./src
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    expose:
      - "3000"
    env_file:
      - ./src/.env
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - ./src/logs:/app/logs:rw
      - ./src/uploads:/app/uploads:rw
      - /tmp:/app/temp:rw
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/certbot/conf:/etc/letsencrypt:ro
      - certbot-var:/var/lib/letsencrypt:ro
      - ./data/certbot/www:/var/www/certbot:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      api:
        condition: service_healthy
      frontend:
        condition: service_started
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      /bin/sh -c "
      echo 'Aguardando certificados SSL...' &&
      while [ ! -f /etc/letsencrypt/live/fgtsagent.com.br/fullchain.pem ]; do
        echo 'Certificados SSL não encontrados, aguardando...' &&
        sleep 10
      done &&
      echo 'Certificados SSL encontrados, iniciando nginx...' &&
      exec nginx -g 'daemon off;'
      "

  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet; sleep 12h & wait $${!}; done;'"

  # Serviço de monitoramento de logs (opcional)
  logrotate:
    image: alpine:latest
    restart: unless-stopped
    volumes:
      - ./src/logs:/app/logs:rw
      - ./scripts:/scripts:ro
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    command: >
      /bin/sh -c "
      apk add --no-cache logrotate &&
      echo '0 2 * * * logrotate /scripts/logrotate.conf' > /etc/crontabs/root &&
      crond -f
      "

  # Backup automático (opcional)
  backup:
    image: alpine:latest
    restart: unless-stopped
    volumes:
      - ./src/logs:/backup/logs:ro
      - ./src/uploads:/backup/uploads:ro
      - ./data:/backup/data:ro
      - ./backups:/backups:rw
      - ./scripts:/scripts:ro
    environment:
      - BACKUP_RETENTION_DAYS=30
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    command: >
      /bin/sh -c "
      apk add --no-cache tar gzip &&
      echo '0 3 * * * /scripts/backup.sh' > /etc/crontabs/root &&
      crond -f
      "

volumes:
  certbot-var:
    driver: local
  nginx-cache:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 