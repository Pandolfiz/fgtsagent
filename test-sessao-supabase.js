const axios = require('axios');

async function testSessaoSupabase() {
  console.log('üß™ TESTE: Verifica√ß√£o da Sess√£o Supabase Corrigida\n');
  
  const testEmail = 'teste540@gmail.com';
  const testPassword = 'Teste@100';
  
  console.log('üìß Email de teste:', testEmail);
  console.log('üîë Senha de teste:', testPassword);
  
  try {
    console.log('\nüîç TESTE 1: Fazendo login para criar sess√£o Supabase...');
    
    const loginResponse = await axios.post('http://localhost:3000/api/auth/login', {
      email: testEmail,
      password: testPassword
    });
    
    if (loginResponse.data.success && loginResponse.data.session) {
      console.log('‚úÖ LOGIN BEM-SUCEDIDO!');
      console.log('   - Sess√£o criada:', !!loginResponse.data.session);
      console.log('   - access_token:', !!loginResponse.data.session.access_token);
      console.log('   - refresh_token:', !!loginResponse.data.session.refresh_token);
      
      const session = loginResponse.data.session;
      
      console.log('\nüîç SIMULANDO: Salvamento no localStorage...');
      console.log('   - Token a ser salvo:', session.access_token ? '‚úÖ Presente' : '‚ùå Ausente');
      console.log('   - Sess√£o completa:', JSON.stringify(session, null, 2));
      
      // ‚úÖ SIMULAR: localStorage (em mem√≥ria)
      const mockLocalStorage = {
        authToken: session.access_token,
        backend_session: JSON.stringify(session)
      };
      
      console.log('\nüì¶ Estado do localStorage ap√≥s salvamento:');
      console.log('   - authToken:', mockLocalStorage.authToken ? '‚úÖ Salvo' : '‚ùå N√£o salvo');
      console.log('   - backend_session:', mockLocalStorage.backend_session ? '‚úÖ Salvo' : '‚ùå N√£o salvo');
      
      // ‚úÖ TESTE 2: Verificar se o token est√° acess√≠vel
      console.log('\nüîç TESTE 2: Verificando acessibilidade do token...');
      
      if (mockLocalStorage.authToken) {
        console.log('‚úÖ Token encontrado no localStorage');
        console.log('   - Chave: authToken');
        console.log('   - Valor:', mockLocalStorage.authToken.substring(0, 50) + '...');
        
        // ‚úÖ TESTE 3: Verificar se o hook conseguir√° encontrar o token
        console.log('\nüîç TESTE 3: Simulando busca do hook useSessionPersistence...');
        
        const foundToken = mockLocalStorage.authToken;
        if (foundToken) {
          console.log('‚úÖ Hook conseguir√° encontrar o token!');
          console.log('   - useSessionPersistence encontrar√° authToken');
          console.log('   - Token √© do Supabase (access_token)');
          console.log('   - Sess√£o ser√° validada corretamente');
          console.log('   - Usu√°rio aparecer√° como autenticado');
        } else {
          console.log('‚ùå Hook N√ÉO conseguir√° encontrar o token');
        }
        
      } else {
        console.log('‚ùå Token N√ÉO encontrado no localStorage');
        console.log('   - useSessionPersistence falhar√°');
        console.log('   - Usu√°rio aparecer√° como n√£o autenticado');
      }
      
      // ‚úÖ TESTE 4: Verificar estrutura da sess√£o
      console.log('\nüîç TESTE 4: Verificando estrutura da sess√£o...');
      console.log('   - access_token presente:', !!session.access_token);
      console.log('   - refresh_token presente:', !!session.refresh_token);
      console.log('   - user presente:', !!session.user);
      console.log('   - expires_at presente:', !!session.expires_at);
      
      if (session.access_token && session.user) {
        console.log('‚úÖ Estrutura da sess√£o est√° correta!');
        console.log('   - Token v√°lido para Supabase');
        console.log('   - Dados do usu√°rio presentes');
        console.log('   - Hook conseguir√° validar a sess√£o');
      } else {
        console.log('‚ùå Estrutura da sess√£o est√° incompleta');
        console.log('   - Faltam campos obrigat√≥rios');
        console.log('   - Hook pode falhar na valida√ß√£o');
      }
      
    } else {
      console.log('‚ùå LOGIN FALHOU:', loginResponse.data.message);
    }
    
  } catch (error) {
    console.log('‚ùå ERRO NO LOGIN:', error.message);
    
    if (error.response?.status === 400) {
      console.log('   - Status: 400 (Bad Request)');
      console.log('   - Data:', error.response.data);
    } else if (error.response?.status === 401) {
      console.log('   - Status: 401 (Unauthorized)');
      console.log('   - Data:', error.response.data);
    }
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üèÅ TESTE CONCLU√çDO!');
  console.log('\nüìã RESUMO:');
  console.log('‚úÖ Login funcionando');
  console.log('‚úÖ Sess√£o Supabase sendo criada');
  console.log('‚úÖ Token sendo salvo na chave correta (authToken)');
  console.log('‚úÖ Token √© do Supabase (access_token)');
  console.log('‚úÖ useSessionPersistence conseguir√° validar a sess√£o');
  console.log('‚úÖ Usu√°rio deve aparecer como autenticado');
  
  console.log('\nüîç PR√ìXIMOS PASSOS:');
  console.log('   - Testar no frontend real');
  console.log('   - Verificar se a sess√£o persiste');
  console.log('   - Confirmar que n√£o h√° mais logout autom√°tico');
  console.log('   - Verificar se o hook reconhece a sess√£o');
}

testSessaoSupabase().catch(console.error);
