# Docker Compose para Produção - Versão Local para Teste
# Use: docker compose -f docker-compose.yml -f docker-compose.production.local.yml up -d

services:
  # Configurações de produção para API
  api:
    restart: always
    env_file:
      - ./src/.env
    environment:
      - NODE_ENV=production
      - PORT=3000
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2048M
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Configurações de produção para Frontend
  frontend:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.2'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Configurações de produção para Nginx
  nginx:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "30m"
        max-file: "5"

  # Serviço de Logrotate (corrigido)
  logrotate:
    image: alpine:latest
    restart: unless-stopped
    volumes:
      - ./src/logs:/app/logs:rw
      - ./scripts:/scripts:ro
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    command: >
      /bin/sh -c "
      apk add --no-cache logrotate &&
      echo '0 2 * * * logrotate /etc/logrotate.conf' > /etc/crontabs/root &&
      crond -f
      "
    networks:
      - app-network

  # Serviço de Backup (corrigido)
  backup:
    image: alpine:latest
    restart: unless-stopped
    volumes:
      - ./src/logs:/backup/logs:ro
      - ./src/uploads:/backup/uploads:ro
      - ./data:/backup/data:ro
      - ./backups:/backups:rw
      - ./scripts:/scripts:ro
    environment:
      - BACKUP_RETENTION_DAYS=30
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    command: >
      /bin/sh -c "
      apk add --no-cache tar gzip &&
      echo '0 3 * * * /scripts/backup.sh' > /etc/crontabs/root &&
      crond -f
      "
    networks:
      - app-network

  # Monitoring (opcional - desabilitado para teste local)
  watchtower:
    image: containrrr/watchtower:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=admin@fgtsagent.com.br
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=admin@fgtsagent.com.br
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    profiles:
      - monitoring
    networks:
      - app-network

networks:
  app-network:
    external: false 